package org.whole.lang.misc.codebase;

import org.whole.lang.artifacts.builders.IArtifactsBuilder;
import org.whole.lang.artifacts.reflect.ArtifactsLanguageKit;
import org.whole.lang.builders.IBuilderOperation;
import org.whole.lang.misc.builders.IMiscBuilder;
import org.whole.lang.misc.model.Misc;
import org.whole.lang.misc.reflect.MiscLanguageKit;
import org.whole.lang.models.builders.IModelsBuilder;
import org.whole.lang.models.reflect.ModelsLanguageKit;
import org.whole.lang.templates.AbstractTemplateFactory;

/**
 * @generator Whole
 */
public class ModelsInfo extends AbstractTemplateFactory<Misc> {
	public void apply(IBuilderOperation op) {
		IMiscBuilder b0 = (IMiscBuilder) op.wGetBuilder(MiscLanguageKit.URI);
		org.whole.lang.commons.builders.ICommonsBuilder cb = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
	    b0.Misc_(2);
		cb.SameStageFragment_();
		IArtifactsBuilder b1 = (IArtifactsBuilder) op.wGetBuilder(ArtifactsLanguageKit.URI);
		b1.PackageArtifact_();
		b1.Name("org.whole.lang.models");
		b1.Metadata_();
		b1.Copyright("Copyright 2004-2019 Riccardo Solmi.");
		b1
				.License("* All rights reserved. This program and the accompanying materials\n* are made available under the terms of the GNU Lesser General Public License\n* which accompanies this distribution, and is available at\n* http://www.gnu.org/copyleft/lesser.html");
		b1.Author("Riccardo Solmi");
		b1._Metadata();
		cb.Resolver();
		b1._PackageArtifact();
		cb._SameStageFragment();
		cb.SameStageFragment_();
		IModelsBuilder b2 = (IModelsBuilder) op
				.wGetBuilder(ModelsLanguageKit.URI);
		b2.Model_();
		b2.SimpleName("Info");
		b2.TypeRelations();
		b2.ModelDeclarations_(7);
		b2.SimpleEntity_();
		b2.EntityModifiers();
		b2.SimpleName("ModelInfo");
		b2.Types();
		b2.Features_(7);
		b2.Feature_();
		b2.FeatureModifiers();
		b2.SimpleName("Values");
		b2.SimpleName("declarations");
		b2._Feature();
		b2.Feature_();
		b2.FeatureModifiers();
		b2.SimpleName("Values");
		b2.SimpleName("entities");
		b2._Feature();
		b2.Feature_();
		b2.FeatureModifiers();
		b2.SimpleName("Values");
		b2.SimpleName("types");
		b2._Feature();
		b2.Feature_();
		b2.FeatureModifiers();
		b2.SimpleName("ValuesMap");
		b2.SimpleName("featuresMap");
		b2._Feature();
		b2.Feature_();
		b2.FeatureModifiers();
		b2.SimpleName("OccurrencesMap");
		b2.SimpleName("entityOccurrencesMap");
		b2._Feature();
		b2.Feature_();
		b2.FeatureModifiers();
		b2.SimpleName("OccurrencesMap");
		b2.SimpleName("featureOccurrencesMap");
		b2._Feature();
		b2.Feature_();
		b2.FeatureModifiers();
		b2.SimpleName("OccurrencesMap");
		b2.SimpleName("typeOccurrencesMap");
		b2._Feature();
		b2._Features();
		b2._SimpleEntity();
		b2.MapEntity_();
		b2.EntityModifiers();
		b2.SimpleName("OccurrencesMap");
		b2.Types();
		b2.SimpleName("Value");
		b2.SimpleName("Occurrences");
		b2._MapEntity();
		b2.CompositeEntity_();
		b2.EntityModifiers();
		b2.SimpleName("Occurrences");
		b2.Types();
		b2.ComponentModifiers();
		b2.SimpleName("Occurrence");
		b2._CompositeEntity();
		b2.DataEntity_();
		b2.EntityModifiers();
		b2.SimpleName("Occurrence");
		b2.Types();
		b2.DataType("org.whole.lang.model.IEntity");
		b2._DataEntity();
		b2.MapEntity_();
		b2.EntityModifiers();
		b2.SimpleName("ValuesMap");
		b2.Types();
		b2.SimpleName("Value");
		b2.SimpleName("Values");
		b2._MapEntity();
		b2.CompositeEntity_();
		b2.EntityModifiers();
		b2.SimpleName("Values");
		b2.Types();
		b2.ComponentModifiers_(1);
		b2.ComponentModifier("unique");
		b2._ComponentModifiers();
		b2.SimpleName("Value");
		b2._CompositeEntity();
		b2.DataEntity_();
		b2.EntityModifiers();
		b2.SimpleName("Value");
		b2.Types();
		b2.DataType("String");
		b2._DataEntity();
		b2._ModelDeclarations();
		b2._Model();
		cb._SameStageFragment();
		b0._Misc();
	}
}