import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.Status;
import org.eclipse.jgit.lib.*;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevWalk;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;

//import org.apache.maven.shared.invoker.*;
//import org.apache.maven.cli.MavenCli;

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath "org.eclipse.jgit:org.eclipse.jgit:3.7.1.201504261725-r"

    
//	classpath "org.apache.maven.shared:maven-invoker:2.2"

//	classpath "org.apache.maven:maven-embedder:3.3.3"
//	classpath "org.eclipse.aether:aether-connector-basic:1.0.2.v20150114"
//	classpath "org.eclipse.aether:aether-transport-wagon:1.0.2.v20150114"
//	classpath "org.apache.maven.wagon:wagon-http:2.8"
//	classpath "org.apache.maven.wagon:wagon-provider-api:2.8"
//	classpath "org.apache.httpcomponents:httpcore:4.4"
  }
}

ext {
	relengDir = project.projectDir.absolutePath
	repoDir = "${relengDir}/.."
	reposDir = "${repoDir}/.."

	repo = new FileRepositoryBuilder().setWorkTree(new File(repoDir)).build()

	versionNum = "1.0.0"
	versionNumOld = "1.0.0"

	failure = false

	sourceExcludes = ".git/**, */bin/**, */builds/**, */target/**, **/.DS_Store, */.gradle/**"

	gitClone = { String repoUri, String repoDir ->
		Git.cloneRepository().setURI(repoUri).setDirectory(new File(repoDir)).call()
	}
	gitCheckout = { String repoDir, String checkoutCommit, String branchName = '' ->
		def repo = new FileRepositoryBuilder().setWorkTree(new File(repoDir)).build()
        def commit = new RevWalk(repo).parseCommit(repo.resolve(checkoutCommit))
		if (branchName != '')
			new Git(repo).checkout().setCreateBranch(true).setName(branchName).setStartPoint(commit).call()
		else
			new Git(repo).checkout().setName(commit.getId().getName()).setStartPoint(commit).call()
	}
	gitCommit = { String repoDir, String authorName, String authorEmail ->
			def git = Git.wrap(new FileRepositoryBuilder().setWorkTree(new File(repoDir)).build());
			git.add().addFilepattern(".").call();
			def author = new PersonIdent(authorName, authorEmail, new Date(), TimeZone.getDefault());
			git.commit().setAll(true).setAuthor(author).setMessage("commitMessage").call()
	}
	gitApply = { String repoDir, String patchFile ->
		def inputStream = new FileInputStream(new File(patchFile))
		def repo = new FileRepositoryBuilder().setWorkTree(new File(repoDir)).build()
		new Git(repo).apply().setPatch(inputStream).call()
		inputStream.close()
	}

	lastCommitVersion = { ->
		def lastCommitDate = new Git(repo).log().setMaxCount(1).call().iterator().next().getAuthorIdent().getWhen()

		def dateFormat = new java.text.SimpleDateFormat("yyyyMMdd-HHmm")
		dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"))
		def suffix = dateFormat.format(lastCommitDate)
	
		"${versionNum}.v${suffix}"
	}
	fullVersion = lastCommitVersion()
	buildArtifactsDir = "${relengDir}/builds/${fullVersion}"

	repoStatus = new Git(repo).status().call()
	hasUncommittedChanges = !repoStatus.getUncommittedChanges().isEmpty() || !repoStatus.getUntracked().isEmpty()
	existsBuildArtifactsDir = new File(buildArtifactsDir).exists()

	launchMaven = { String pomDir, String pomName, String goal, String profile='' ->
		def result = exec {
			ignoreExitValue = true
			workingDir = pomDir
			executable = "mvn"
			if (profile == '')
				args = ['-Dtycho.localArtifacts=ignore', "-f"+pomName, goal]
			else
				args = ['-Dtycho.localArtifacts=ignore', "-f"+pomName, goal, "-P"+profile]
		}
		if (result.getExitValue() != 0 && goal != "clean") {
			failureMsg = pomDir+"/"+pomName+" "+goal
			failure = true
		}
	}
/*	
	launchMaven = { String pomDir, String pomName, String goal ->
		//FIXME missing property
		def request = new DefaultInvocationRequest()
		request.setPomFile(new File(new File(pomDir), pomName))
		request.setGoals([goal])

		def invoker = new DefaultInvoker()
		def result = invoker.execute(request)
		if (result.getExitCode() != 0 && goal != "clean") {
			failureMsg = pomDir+"/"+pomName+" "+goal
			failure = true
		}
	}

	launchMaven = { String pomDir, String pomName, String goal ->
		//FIXME workaround
		System.setProperty("maven.multiModuleProjectDirectory", pomDir)
		System.setProperty("tycho.localArtifacts", "ignore")
		def cli = new MavenCli()

		def execResult = cli.doMain(["-f"+pomName, goal], pomDir, System.out, System.err);
		if (execResult != 0 && goal != "clean") {
			failureMsg = pomDir+"/"+pomName+" "+goal
			failure = true
		}
	}
*/
}

project.gradle.buildFinished { buildResult ->
	def execTasks = project.tasks.findAll { it.state.executed }
	
	def buildFailure = buildResult.getFailure()

	if (buildFailure == null && !failure) {
		println("Completed without nested errors")
	} else if (buildFailure != null ) {
		println("Error thrown during build ${buildFailure.message}")
		throw new GradleException("Completed with nested failure\n(${failureMsg}")
	} else {
		println("Completed with nested failure")
		throw new GradleException("Completed with nested failure\n(${failureMsg}")
	}
}

task info {
	doLast {
		println("relengDir: ${relengDir}")
		println("Version: ${fullVersion}")
		println("Has uncommitted changes: ${hasUncommittedChanges}")
	}
}

task init_build {
	doLast {
		ant.mkdir(dir: buildArtifactsDir)
	}
}
