/**
 *  Copyright 2004-2019 Riccardo Solmi. All rights reserved.
 *  This file is part of the Whole Platform.
 *  
 *  The Whole Platform is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  The Whole Platform is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU Lesser General Public License for more details.
 *  
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with the Whole Platform. If not, see <http://www.gnu.org/licenses/>.
 */
package org.whole.lang.swiftsyntax.reflect;

import org.whole.lang.reflect.EntityDescriptorEnum;
import org.whole.lang.reflect.EntityDescriptor;
import org.whole.lang.swiftsyntax.model.*;

/**
 *  @generator Whole
 */
@SuppressWarnings("unchecked")
public class SwiftSyntaxEntityDescriptorEnum extends EntityDescriptorEnum {
    public static final int Syntax_ord = 0;
    public static final int SyntaxCollection_ord = 1;
    public static final int Decl_ord = 2;
    public static final int Expr_ord = 3;
    public static final int Pattern_ord = 4;
    public static final int Stmt_ord = 5;
    public static final int Type_ord = 6;
    public static final int Token_ord = 7;
    public static final int UnknownDecl_ord = 8;
    public static final int UnknownExpr_ord = 9;
    public static final int UnknownPattern_ord = 10;
    public static final int UnknownStmt_ord = 11;
    public static final int UnknownType_ord = 12;
    public static final int CodeBlockItem_ord = 13;
    public static final int CodeBlockItemList_ord = 14;
    public static final int CodeBlock_ord = 15;
    public static final int InOutExpr_ord = 16;
    public static final int PoundColumnExpr_ord = 17;
    public static final int FunctionCallArgumentList_ord = 18;
    public static final int TupleElementList_ord = 19;
    public static final int ArrayElementList_ord = 20;
    public static final int DictionaryElementList_ord = 21;
    public static final int AbstractSegment_ord = 22;
    public static final int StringLiteralSegments_ord = 23;
    public static final int TryExpr_ord = 24;
    public static final int DeclNameArgument_ord = 25;
    public static final int DeclNameArgumentList_ord = 26;
    public static final int DeclNameArguments_ord = 27;
    public static final int IdentifierExpr_ord = 28;
    public static final int SuperRefExpr_ord = 29;
    public static final int NilLiteralExpr_ord = 30;
    public static final int DiscardAssignmentExpr_ord = 31;
    public static final int AssignmentExpr_ord = 32;
    public static final int SequenceExpr_ord = 33;
    public static final int ExprList_ord = 34;
    public static final int PoundLineExpr_ord = 35;
    public static final int PoundFileExpr_ord = 36;
    public static final int PoundFunctionExpr_ord = 37;
    public static final int PoundDsohandleExpr_ord = 38;
    public static final int SymbolicReferenceExpr_ord = 39;
    public static final int PrefixOperatorExpr_ord = 40;
    public static final int BinaryOperatorExpr_ord = 41;
    public static final int ArrowExpr_ord = 42;
    public static final int FloatLiteralExpr_ord = 43;
    public static final int TupleExpr_ord = 44;
    public static final int ArrayExpr_ord = 45;
    public static final int DictionaryExpr_ord = 46;
    public static final int FunctionCallArgument_ord = 47;
    public static final int TupleElement_ord = 48;
    public static final int ArrayElement_ord = 49;
    public static final int DictionaryElement_ord = 50;
    public static final int IntegerLiteralExpr_ord = 51;
    public static final int BooleanLiteralExpr_ord = 52;
    public static final int TernaryExpr_ord = 53;
    public static final int MemberAccessExpr_ord = 54;
    public static final int IsExpr_ord = 55;
    public static final int AsExpr_ord = 56;
    public static final int TypeExpr_ord = 57;
    public static final int ClosureCaptureItem_ord = 58;
    public static final int ClosureCaptureItemList_ord = 59;
    public static final int ClosureCaptureSignature_ord = 60;
    public static final int ClosureParam_ord = 61;
    public static final int ClosureParamList_ord = 62;
    public static final int ClosureSignature_ord = 63;
    public static final int ClosureExpr_ord = 64;
    public static final int UnresolvedPatternExpr_ord = 65;
    public static final int FunctionCallExpr_ord = 66;
    public static final int SubscriptExpr_ord = 67;
    public static final int OptionalChainingExpr_ord = 68;
    public static final int ForcedValueExpr_ord = 69;
    public static final int PostfixUnaryExpr_ord = 70;
    public static final int SpecializeExpr_ord = 71;
    public static final int StringSegment_ord = 72;
    public static final int ExpressionSegment_ord = 73;
    public static final int StringLiteralExpr_ord = 74;
    public static final int KeyPathExpr_ord = 75;
    public static final int KeyPathBaseExpr_ord = 76;
    public static final int ObjcNamePiece_ord = 77;
    public static final int ObjcName_ord = 78;
    public static final int ObjcKeyPathExpr_ord = 79;
    public static final int ObjcSelectorExpr_ord = 80;
    public static final int EditorPlaceholderExpr_ord = 81;
    public static final int ObjectLiteralExpr_ord = 82;
    public static final int TypeInitializerClause_ord = 83;
    public static final int TypealiasDecl_ord = 84;
    public static final int AssociatedtypeDecl_ord = 85;
    public static final int FunctionParameterList_ord = 86;
    public static final int ParameterClause_ord = 87;
    public static final int ReturnClause_ord = 88;
    public static final int FunctionSignature_ord = 89;
    public static final int IfConfigClause_ord = 90;
    public static final int IfConfigClauseList_ord = 91;
    public static final int IfConfigDecl_ord = 92;
    public static final int PoundErrorDecl_ord = 93;
    public static final int PoundWarningDecl_ord = 94;
    public static final int PoundSourceLocation_ord = 95;
    public static final int PoundSourceLocationArgs_ord = 96;
    public static final int DeclModifier_ord = 97;
    public static final int InheritedType_ord = 98;
    public static final int InheritedTypeList_ord = 99;
    public static final int TypeInheritanceClause_ord = 100;
    public static final int ClassDecl_ord = 101;
    public static final int StructDecl_ord = 102;
    public static final int ProtocolDecl_ord = 103;
    public static final int ExtensionDecl_ord = 104;
    public static final int MemberDeclBlock_ord = 105;
    public static final int MemberDeclList_ord = 106;
    public static final int MemberDeclListItem_ord = 107;
    public static final int SourceFile_ord = 108;
    public static final int InitializerClause_ord = 109;
    public static final int FunctionParameter_ord = 110;
    public static final int ModifierList_ord = 111;
    public static final int FunctionDecl_ord = 112;
    public static final int InitializerDecl_ord = 113;
    public static final int DeinitializerDecl_ord = 114;
    public static final int SubscriptDecl_ord = 115;
    public static final int AccessLevelModifier_ord = 116;
    public static final int AccessPathComponent_ord = 117;
    public static final int AccessPath_ord = 118;
    public static final int ImportDecl_ord = 119;
    public static final int AccessorParameter_ord = 120;
    public static final int AccessorDecl_ord = 121;
    public static final int AccessorList_ord = 122;
    public static final int AccessorBlock_ord = 123;
    public static final int PatternBinding_ord = 124;
    public static final int PatternBindingList_ord = 125;
    public static final int VariableDecl_ord = 126;
    public static final int EnumCaseElement_ord = 127;
    public static final int EnumCaseElementList_ord = 128;
    public static final int EnumCaseDecl_ord = 129;
    public static final int EnumDecl_ord = 130;
    public static final int OperatorDecl_ord = 131;
    public static final int IdentifierList_ord = 132;
    public static final int OperatorPrecedenceAndTypes_ord = 133;
    public static final int PrecedenceGroupDecl_ord = 134;
    public static final int AbstractPrecedenceGroupAttribute_ord = 135;
    public static final int PrecedenceGroupAttributeList_ord = 136;
    public static final int PrecedenceGroupRelation_ord = 137;
    public static final int PrecedenceGroupNameList_ord = 138;
    public static final int PrecedenceGroupNameElement_ord = 139;
    public static final int PrecedenceGroupAssignment_ord = 140;
    public static final int PrecedenceGroupAssociativity_ord = 141;
    public static final int TokenList_ord = 142;
    public static final int CustomAttribute_ord = 143;
    public static final int Attribute_ord = 144;
    public static final int AbstractAttribute_ord = 145;
    public static final int AttributeList_ord = 146;
    public static final int AbstractSpecializeAttribute_ord = 147;
    public static final int SpecializeAttributeSpecList_ord = 148;
    public static final int LabeledSpecializeEntry_ord = 149;
    public static final int NamedAttributeStringArgument_ord = 150;
    public static final int DeclName_ord = 151;
    public static final int ImplementsAttributeArguments_ord = 152;
    public static final int ObjCSelectorPiece_ord = 153;
    public static final int ObjCSelector_ord = 154;
    public static final int ContinueStmt_ord = 155;
    public static final int WhileStmt_ord = 156;
    public static final int DeferStmt_ord = 157;
    public static final int AbstractSwitchCase_ord = 158;
    public static final int SwitchCaseList_ord = 159;
    public static final int RepeatWhileStmt_ord = 160;
    public static final int GuardStmt_ord = 161;
    public static final int WhereClause_ord = 162;
    public static final int ForInStmt_ord = 163;
    public static final int SwitchStmt_ord = 164;
    public static final int CatchClauseList_ord = 165;
    public static final int DoStmt_ord = 166;
    public static final int ReturnStmt_ord = 167;
    public static final int YieldStmt_ord = 168;
    public static final int YieldList_ord = 169;
    public static final int FallthroughStmt_ord = 170;
    public static final int BreakStmt_ord = 171;
    public static final int CaseItemList_ord = 172;
    public static final int ConditionElement_ord = 173;
    public static final int AvailabilityCondition_ord = 174;
    public static final int MatchingPatternCondition_ord = 175;
    public static final int OptionalBindingCondition_ord = 176;
    public static final int ConditionElementList_ord = 177;
    public static final int ThrowStmt_ord = 178;
    public static final int IfStmt_ord = 179;
    public static final int SwitchCase_ord = 180;
    public static final int SwitchDefaultLabel_ord = 181;
    public static final int CaseItem_ord = 182;
    public static final int SwitchCaseLabel_ord = 183;
    public static final int CatchClause_ord = 184;
    public static final int PoundAssertStmt_ord = 185;
    public static final int GenericWhereClause_ord = 186;
    public static final int AbstractGenericRequirement_ord = 187;
    public static final int GenericRequirementList_ord = 188;
    public static final int SameTypeRequirement_ord = 189;
    public static final int GenericParameterList_ord = 190;
    public static final int GenericParameter_ord = 191;
    public static final int GenericParameterClause_ord = 192;
    public static final int ConformanceRequirement_ord = 193;
    public static final int SimpleTypeIdentifier_ord = 194;
    public static final int MemberTypeIdentifier_ord = 195;
    public static final int ClassRestrictionType_ord = 196;
    public static final int ArrayType_ord = 197;
    public static final int DictionaryType_ord = 198;
    public static final int MetatypeType_ord = 199;
    public static final int OptionalType_ord = 200;
    public static final int SomeType_ord = 201;
    public static final int ImplicitlyUnwrappedOptionalType_ord = 202;
    public static final int CompositionTypeElement_ord = 203;
    public static final int CompositionTypeElementList_ord = 204;
    public static final int CompositionType_ord = 205;
    public static final int TupleTypeElement_ord = 206;
    public static final int TupleTypeElementList_ord = 207;
    public static final int TupleType_ord = 208;
    public static final int FunctionType_ord = 209;
    public static final int AttributedType_ord = 210;
    public static final int GenericArgumentList_ord = 211;
    public static final int GenericArgument_ord = 212;
    public static final int GenericArgumentClause_ord = 213;
    public static final int TypeAnnotation_ord = 214;
    public static final int EnumCasePattern_ord = 215;
    public static final int IsTypePattern_ord = 216;
    public static final int OptionalPattern_ord = 217;
    public static final int IdentifierPattern_ord = 218;
    public static final int AsTypePattern_ord = 219;
    public static final int TuplePattern_ord = 220;
    public static final int WildcardPattern_ord = 221;
    public static final int TuplePatternElement_ord = 222;
    public static final int ExpressionPattern_ord = 223;
    public static final int TuplePatternElementList_ord = 224;
    public static final int ValueBindingPattern_ord = 225;
    public static final int AvailabilitySpecList_ord = 226;
    public static final int AvailabilityArgument_ord = 227;
    public static final int AvailabilityLabeledArgument_ord = 228;
    public static final int AvailabilityVersionRestriction_ord = 229;
    public static final int VersionTuple_ord = 230;
    public static final int TokenKind_ord = 231;
    public static final int Text_ord = 232;
    public static final int Trivia_ord = 233;
    public static final int TriviaPiece_ord = 234;
    public static final int SourcePresence_ord = 235;
    public static final SwiftSyntaxEntityDescriptorEnum instance = new SwiftSyntaxEntityDescriptorEnum();
    public static final EntityDescriptor<Syntax> Syntax = (EntityDescriptor<Syntax>) instance.valueOf(Syntax_ord);
    public static final EntityDescriptor<SyntaxCollection> SyntaxCollection = (EntityDescriptor<SyntaxCollection>) instance.valueOf(SyntaxCollection_ord);
    public static final EntityDescriptor<Decl> Decl = (EntityDescriptor<Decl>) instance.valueOf(Decl_ord);
    public static final EntityDescriptor<Expr> Expr = (EntityDescriptor<Expr>) instance.valueOf(Expr_ord);
    public static final EntityDescriptor<Pattern> Pattern = (EntityDescriptor<Pattern>) instance.valueOf(Pattern_ord);
    public static final EntityDescriptor<Stmt> Stmt = (EntityDescriptor<Stmt>) instance.valueOf(Stmt_ord);
    public static final EntityDescriptor<Type> Type = (EntityDescriptor<Type>) instance.valueOf(Type_ord);
    public static final EntityDescriptor<Token> Token = (EntityDescriptor<Token>) instance.valueOf(Token_ord);
    public static final EntityDescriptor<UnknownDecl> UnknownDecl = (EntityDescriptor<UnknownDecl>) instance.valueOf(UnknownDecl_ord);
    public static final EntityDescriptor<UnknownExpr> UnknownExpr = (EntityDescriptor<UnknownExpr>) instance.valueOf(UnknownExpr_ord);
    public static final EntityDescriptor<UnknownPattern> UnknownPattern = (EntityDescriptor<UnknownPattern>) instance.valueOf(UnknownPattern_ord);
    public static final EntityDescriptor<UnknownStmt> UnknownStmt = (EntityDescriptor<UnknownStmt>) instance.valueOf(UnknownStmt_ord);
    public static final EntityDescriptor<UnknownType> UnknownType = (EntityDescriptor<UnknownType>) instance.valueOf(UnknownType_ord);
    public static final EntityDescriptor<CodeBlockItem> CodeBlockItem = (EntityDescriptor<CodeBlockItem>) instance.valueOf(CodeBlockItem_ord);
    public static final EntityDescriptor<CodeBlockItemList> CodeBlockItemList = (EntityDescriptor<CodeBlockItemList>) instance.valueOf(CodeBlockItemList_ord);
    public static final EntityDescriptor<CodeBlock> CodeBlock = (EntityDescriptor<CodeBlock>) instance.valueOf(CodeBlock_ord);
    public static final EntityDescriptor<InOutExpr> InOutExpr = (EntityDescriptor<InOutExpr>) instance.valueOf(InOutExpr_ord);
    public static final EntityDescriptor<PoundColumnExpr> PoundColumnExpr = (EntityDescriptor<PoundColumnExpr>) instance.valueOf(PoundColumnExpr_ord);
    public static final EntityDescriptor<FunctionCallArgumentList> FunctionCallArgumentList = (EntityDescriptor<FunctionCallArgumentList>) instance.valueOf(FunctionCallArgumentList_ord);
    public static final EntityDescriptor<TupleElementList> TupleElementList = (EntityDescriptor<TupleElementList>) instance.valueOf(TupleElementList_ord);
    public static final EntityDescriptor<ArrayElementList> ArrayElementList = (EntityDescriptor<ArrayElementList>) instance.valueOf(ArrayElementList_ord);
    public static final EntityDescriptor<DictionaryElementList> DictionaryElementList = (EntityDescriptor<DictionaryElementList>) instance.valueOf(DictionaryElementList_ord);
    public static final EntityDescriptor<AbstractSegment> AbstractSegment = (EntityDescriptor<AbstractSegment>) instance.valueOf(AbstractSegment_ord);
    public static final EntityDescriptor<StringLiteralSegments> StringLiteralSegments = (EntityDescriptor<StringLiteralSegments>) instance.valueOf(StringLiteralSegments_ord);
    public static final EntityDescriptor<TryExpr> TryExpr = (EntityDescriptor<TryExpr>) instance.valueOf(TryExpr_ord);
    public static final EntityDescriptor<DeclNameArgument> DeclNameArgument = (EntityDescriptor<DeclNameArgument>) instance.valueOf(DeclNameArgument_ord);
    public static final EntityDescriptor<DeclNameArgumentList> DeclNameArgumentList = (EntityDescriptor<DeclNameArgumentList>) instance.valueOf(DeclNameArgumentList_ord);
    public static final EntityDescriptor<DeclNameArguments> DeclNameArguments = (EntityDescriptor<DeclNameArguments>) instance.valueOf(DeclNameArguments_ord);
    public static final EntityDescriptor<IdentifierExpr> IdentifierExpr = (EntityDescriptor<IdentifierExpr>) instance.valueOf(IdentifierExpr_ord);
    public static final EntityDescriptor<SuperRefExpr> SuperRefExpr = (EntityDescriptor<SuperRefExpr>) instance.valueOf(SuperRefExpr_ord);
    public static final EntityDescriptor<NilLiteralExpr> NilLiteralExpr = (EntityDescriptor<NilLiteralExpr>) instance.valueOf(NilLiteralExpr_ord);
    public static final EntityDescriptor<DiscardAssignmentExpr> DiscardAssignmentExpr = (EntityDescriptor<DiscardAssignmentExpr>) instance.valueOf(DiscardAssignmentExpr_ord);
    public static final EntityDescriptor<AssignmentExpr> AssignmentExpr = (EntityDescriptor<AssignmentExpr>) instance.valueOf(AssignmentExpr_ord);
    public static final EntityDescriptor<SequenceExpr> SequenceExpr = (EntityDescriptor<SequenceExpr>) instance.valueOf(SequenceExpr_ord);
    public static final EntityDescriptor<ExprList> ExprList = (EntityDescriptor<ExprList>) instance.valueOf(ExprList_ord);
    public static final EntityDescriptor<PoundLineExpr> PoundLineExpr = (EntityDescriptor<PoundLineExpr>) instance.valueOf(PoundLineExpr_ord);
    public static final EntityDescriptor<PoundFileExpr> PoundFileExpr = (EntityDescriptor<PoundFileExpr>) instance.valueOf(PoundFileExpr_ord);
    public static final EntityDescriptor<PoundFunctionExpr> PoundFunctionExpr = (EntityDescriptor<PoundFunctionExpr>) instance.valueOf(PoundFunctionExpr_ord);
    public static final EntityDescriptor<PoundDsohandleExpr> PoundDsohandleExpr = (EntityDescriptor<PoundDsohandleExpr>) instance.valueOf(PoundDsohandleExpr_ord);
    public static final EntityDescriptor<SymbolicReferenceExpr> SymbolicReferenceExpr = (EntityDescriptor<SymbolicReferenceExpr>) instance.valueOf(SymbolicReferenceExpr_ord);
    public static final EntityDescriptor<PrefixOperatorExpr> PrefixOperatorExpr = (EntityDescriptor<PrefixOperatorExpr>) instance.valueOf(PrefixOperatorExpr_ord);
    public static final EntityDescriptor<BinaryOperatorExpr> BinaryOperatorExpr = (EntityDescriptor<BinaryOperatorExpr>) instance.valueOf(BinaryOperatorExpr_ord);
    public static final EntityDescriptor<ArrowExpr> ArrowExpr = (EntityDescriptor<ArrowExpr>) instance.valueOf(ArrowExpr_ord);
    public static final EntityDescriptor<FloatLiteralExpr> FloatLiteralExpr = (EntityDescriptor<FloatLiteralExpr>) instance.valueOf(FloatLiteralExpr_ord);
    public static final EntityDescriptor<TupleExpr> TupleExpr = (EntityDescriptor<TupleExpr>) instance.valueOf(TupleExpr_ord);
    public static final EntityDescriptor<ArrayExpr> ArrayExpr = (EntityDescriptor<ArrayExpr>) instance.valueOf(ArrayExpr_ord);
    public static final EntityDescriptor<DictionaryExpr> DictionaryExpr = (EntityDescriptor<DictionaryExpr>) instance.valueOf(DictionaryExpr_ord);
    public static final EntityDescriptor<FunctionCallArgument> FunctionCallArgument = (EntityDescriptor<FunctionCallArgument>) instance.valueOf(FunctionCallArgument_ord);
    public static final EntityDescriptor<TupleElement> TupleElement = (EntityDescriptor<TupleElement>) instance.valueOf(TupleElement_ord);
    public static final EntityDescriptor<ArrayElement> ArrayElement = (EntityDescriptor<ArrayElement>) instance.valueOf(ArrayElement_ord);
    public static final EntityDescriptor<DictionaryElement> DictionaryElement = (EntityDescriptor<DictionaryElement>) instance.valueOf(DictionaryElement_ord);
    public static final EntityDescriptor<IntegerLiteralExpr> IntegerLiteralExpr = (EntityDescriptor<IntegerLiteralExpr>) instance.valueOf(IntegerLiteralExpr_ord);
    public static final EntityDescriptor<BooleanLiteralExpr> BooleanLiteralExpr = (EntityDescriptor<BooleanLiteralExpr>) instance.valueOf(BooleanLiteralExpr_ord);
    public static final EntityDescriptor<TernaryExpr> TernaryExpr = (EntityDescriptor<TernaryExpr>) instance.valueOf(TernaryExpr_ord);
    public static final EntityDescriptor<MemberAccessExpr> MemberAccessExpr = (EntityDescriptor<MemberAccessExpr>) instance.valueOf(MemberAccessExpr_ord);
    public static final EntityDescriptor<IsExpr> IsExpr = (EntityDescriptor<IsExpr>) instance.valueOf(IsExpr_ord);
    public static final EntityDescriptor<AsExpr> AsExpr = (EntityDescriptor<AsExpr>) instance.valueOf(AsExpr_ord);
    public static final EntityDescriptor<TypeExpr> TypeExpr = (EntityDescriptor<TypeExpr>) instance.valueOf(TypeExpr_ord);
    public static final EntityDescriptor<ClosureCaptureItem> ClosureCaptureItem = (EntityDescriptor<ClosureCaptureItem>) instance.valueOf(ClosureCaptureItem_ord);
    public static final EntityDescriptor<ClosureCaptureItemList> ClosureCaptureItemList = (EntityDescriptor<ClosureCaptureItemList>) instance.valueOf(ClosureCaptureItemList_ord);
    public static final EntityDescriptor<ClosureCaptureSignature> ClosureCaptureSignature = (EntityDescriptor<ClosureCaptureSignature>) instance.valueOf(ClosureCaptureSignature_ord);
    public static final EntityDescriptor<ClosureParam> ClosureParam = (EntityDescriptor<ClosureParam>) instance.valueOf(ClosureParam_ord);
    public static final EntityDescriptor<ClosureParamList> ClosureParamList = (EntityDescriptor<ClosureParamList>) instance.valueOf(ClosureParamList_ord);
    public static final EntityDescriptor<ClosureSignature> ClosureSignature = (EntityDescriptor<ClosureSignature>) instance.valueOf(ClosureSignature_ord);
    public static final EntityDescriptor<ClosureExpr> ClosureExpr = (EntityDescriptor<ClosureExpr>) instance.valueOf(ClosureExpr_ord);
    public static final EntityDescriptor<UnresolvedPatternExpr> UnresolvedPatternExpr = (EntityDescriptor<UnresolvedPatternExpr>) instance.valueOf(UnresolvedPatternExpr_ord);
    public static final EntityDescriptor<FunctionCallExpr> FunctionCallExpr = (EntityDescriptor<FunctionCallExpr>) instance.valueOf(FunctionCallExpr_ord);
    public static final EntityDescriptor<SubscriptExpr> SubscriptExpr = (EntityDescriptor<SubscriptExpr>) instance.valueOf(SubscriptExpr_ord);
    public static final EntityDescriptor<OptionalChainingExpr> OptionalChainingExpr = (EntityDescriptor<OptionalChainingExpr>) instance.valueOf(OptionalChainingExpr_ord);
    public static final EntityDescriptor<ForcedValueExpr> ForcedValueExpr = (EntityDescriptor<ForcedValueExpr>) instance.valueOf(ForcedValueExpr_ord);
    public static final EntityDescriptor<PostfixUnaryExpr> PostfixUnaryExpr = (EntityDescriptor<PostfixUnaryExpr>) instance.valueOf(PostfixUnaryExpr_ord);
    public static final EntityDescriptor<SpecializeExpr> SpecializeExpr = (EntityDescriptor<SpecializeExpr>) instance.valueOf(SpecializeExpr_ord);
    public static final EntityDescriptor<StringSegment> StringSegment = (EntityDescriptor<StringSegment>) instance.valueOf(StringSegment_ord);
    public static final EntityDescriptor<ExpressionSegment> ExpressionSegment = (EntityDescriptor<ExpressionSegment>) instance.valueOf(ExpressionSegment_ord);
    public static final EntityDescriptor<StringLiteralExpr> StringLiteralExpr = (EntityDescriptor<StringLiteralExpr>) instance.valueOf(StringLiteralExpr_ord);
    public static final EntityDescriptor<KeyPathExpr> KeyPathExpr = (EntityDescriptor<KeyPathExpr>) instance.valueOf(KeyPathExpr_ord);
    public static final EntityDescriptor<KeyPathBaseExpr> KeyPathBaseExpr = (EntityDescriptor<KeyPathBaseExpr>) instance.valueOf(KeyPathBaseExpr_ord);
    public static final EntityDescriptor<ObjcNamePiece> ObjcNamePiece = (EntityDescriptor<ObjcNamePiece>) instance.valueOf(ObjcNamePiece_ord);
    public static final EntityDescriptor<ObjcName> ObjcName = (EntityDescriptor<ObjcName>) instance.valueOf(ObjcName_ord);
    public static final EntityDescriptor<ObjcKeyPathExpr> ObjcKeyPathExpr = (EntityDescriptor<ObjcKeyPathExpr>) instance.valueOf(ObjcKeyPathExpr_ord);
    public static final EntityDescriptor<ObjcSelectorExpr> ObjcSelectorExpr = (EntityDescriptor<ObjcSelectorExpr>) instance.valueOf(ObjcSelectorExpr_ord);
    public static final EntityDescriptor<EditorPlaceholderExpr> EditorPlaceholderExpr = (EntityDescriptor<EditorPlaceholderExpr>) instance.valueOf(EditorPlaceholderExpr_ord);
    public static final EntityDescriptor<ObjectLiteralExpr> ObjectLiteralExpr = (EntityDescriptor<ObjectLiteralExpr>) instance.valueOf(ObjectLiteralExpr_ord);
    public static final EntityDescriptor<TypeInitializerClause> TypeInitializerClause = (EntityDescriptor<TypeInitializerClause>) instance.valueOf(TypeInitializerClause_ord);
    public static final EntityDescriptor<TypealiasDecl> TypealiasDecl = (EntityDescriptor<TypealiasDecl>) instance.valueOf(TypealiasDecl_ord);
    public static final EntityDescriptor<AssociatedtypeDecl> AssociatedtypeDecl = (EntityDescriptor<AssociatedtypeDecl>) instance.valueOf(AssociatedtypeDecl_ord);
    public static final EntityDescriptor<FunctionParameterList> FunctionParameterList = (EntityDescriptor<FunctionParameterList>) instance.valueOf(FunctionParameterList_ord);
    public static final EntityDescriptor<ParameterClause> ParameterClause = (EntityDescriptor<ParameterClause>) instance.valueOf(ParameterClause_ord);
    public static final EntityDescriptor<ReturnClause> ReturnClause = (EntityDescriptor<ReturnClause>) instance.valueOf(ReturnClause_ord);
    public static final EntityDescriptor<FunctionSignature> FunctionSignature = (EntityDescriptor<FunctionSignature>) instance.valueOf(FunctionSignature_ord);
    public static final EntityDescriptor<IfConfigClause> IfConfigClause = (EntityDescriptor<IfConfigClause>) instance.valueOf(IfConfigClause_ord);
    public static final EntityDescriptor<IfConfigClauseList> IfConfigClauseList = (EntityDescriptor<IfConfigClauseList>) instance.valueOf(IfConfigClauseList_ord);
    public static final EntityDescriptor<IfConfigDecl> IfConfigDecl = (EntityDescriptor<IfConfigDecl>) instance.valueOf(IfConfigDecl_ord);
    public static final EntityDescriptor<PoundErrorDecl> PoundErrorDecl = (EntityDescriptor<PoundErrorDecl>) instance.valueOf(PoundErrorDecl_ord);
    public static final EntityDescriptor<PoundWarningDecl> PoundWarningDecl = (EntityDescriptor<PoundWarningDecl>) instance.valueOf(PoundWarningDecl_ord);
    public static final EntityDescriptor<PoundSourceLocation> PoundSourceLocation = (EntityDescriptor<PoundSourceLocation>) instance.valueOf(PoundSourceLocation_ord);
    public static final EntityDescriptor<PoundSourceLocationArgs> PoundSourceLocationArgs = (EntityDescriptor<PoundSourceLocationArgs>) instance.valueOf(PoundSourceLocationArgs_ord);
    public static final EntityDescriptor<DeclModifier> DeclModifier = (EntityDescriptor<DeclModifier>) instance.valueOf(DeclModifier_ord);
    public static final EntityDescriptor<InheritedType> InheritedType = (EntityDescriptor<InheritedType>) instance.valueOf(InheritedType_ord);
    public static final EntityDescriptor<InheritedTypeList> InheritedTypeList = (EntityDescriptor<InheritedTypeList>) instance.valueOf(InheritedTypeList_ord);
    public static final EntityDescriptor<TypeInheritanceClause> TypeInheritanceClause = (EntityDescriptor<TypeInheritanceClause>) instance.valueOf(TypeInheritanceClause_ord);
    public static final EntityDescriptor<ClassDecl> ClassDecl = (EntityDescriptor<ClassDecl>) instance.valueOf(ClassDecl_ord);
    public static final EntityDescriptor<StructDecl> StructDecl = (EntityDescriptor<StructDecl>) instance.valueOf(StructDecl_ord);
    public static final EntityDescriptor<ProtocolDecl> ProtocolDecl = (EntityDescriptor<ProtocolDecl>) instance.valueOf(ProtocolDecl_ord);
    public static final EntityDescriptor<ExtensionDecl> ExtensionDecl = (EntityDescriptor<ExtensionDecl>) instance.valueOf(ExtensionDecl_ord);
    public static final EntityDescriptor<MemberDeclBlock> MemberDeclBlock = (EntityDescriptor<MemberDeclBlock>) instance.valueOf(MemberDeclBlock_ord);
    public static final EntityDescriptor<MemberDeclList> MemberDeclList = (EntityDescriptor<MemberDeclList>) instance.valueOf(MemberDeclList_ord);
    public static final EntityDescriptor<MemberDeclListItem> MemberDeclListItem = (EntityDescriptor<MemberDeclListItem>) instance.valueOf(MemberDeclListItem_ord);
    public static final EntityDescriptor<SourceFile> SourceFile = (EntityDescriptor<SourceFile>) instance.valueOf(SourceFile_ord);
    public static final EntityDescriptor<InitializerClause> InitializerClause = (EntityDescriptor<InitializerClause>) instance.valueOf(InitializerClause_ord);
    public static final EntityDescriptor<FunctionParameter> FunctionParameter = (EntityDescriptor<FunctionParameter>) instance.valueOf(FunctionParameter_ord);
    public static final EntityDescriptor<ModifierList> ModifierList = (EntityDescriptor<ModifierList>) instance.valueOf(ModifierList_ord);
    public static final EntityDescriptor<FunctionDecl> FunctionDecl = (EntityDescriptor<FunctionDecl>) instance.valueOf(FunctionDecl_ord);
    public static final EntityDescriptor<InitializerDecl> InitializerDecl = (EntityDescriptor<InitializerDecl>) instance.valueOf(InitializerDecl_ord);
    public static final EntityDescriptor<DeinitializerDecl> DeinitializerDecl = (EntityDescriptor<DeinitializerDecl>) instance.valueOf(DeinitializerDecl_ord);
    public static final EntityDescriptor<SubscriptDecl> SubscriptDecl = (EntityDescriptor<SubscriptDecl>) instance.valueOf(SubscriptDecl_ord);
    public static final EntityDescriptor<AccessLevelModifier> AccessLevelModifier = (EntityDescriptor<AccessLevelModifier>) instance.valueOf(AccessLevelModifier_ord);
    public static final EntityDescriptor<AccessPathComponent> AccessPathComponent = (EntityDescriptor<AccessPathComponent>) instance.valueOf(AccessPathComponent_ord);
    public static final EntityDescriptor<AccessPath> AccessPath = (EntityDescriptor<AccessPath>) instance.valueOf(AccessPath_ord);
    public static final EntityDescriptor<ImportDecl> ImportDecl = (EntityDescriptor<ImportDecl>) instance.valueOf(ImportDecl_ord);
    public static final EntityDescriptor<AccessorParameter> AccessorParameter = (EntityDescriptor<AccessorParameter>) instance.valueOf(AccessorParameter_ord);
    public static final EntityDescriptor<AccessorDecl> AccessorDecl = (EntityDescriptor<AccessorDecl>) instance.valueOf(AccessorDecl_ord);
    public static final EntityDescriptor<AccessorList> AccessorList = (EntityDescriptor<AccessorList>) instance.valueOf(AccessorList_ord);
    public static final EntityDescriptor<AccessorBlock> AccessorBlock = (EntityDescriptor<AccessorBlock>) instance.valueOf(AccessorBlock_ord);
    public static final EntityDescriptor<PatternBinding> PatternBinding = (EntityDescriptor<PatternBinding>) instance.valueOf(PatternBinding_ord);
    public static final EntityDescriptor<PatternBindingList> PatternBindingList = (EntityDescriptor<PatternBindingList>) instance.valueOf(PatternBindingList_ord);
    public static final EntityDescriptor<VariableDecl> VariableDecl = (EntityDescriptor<VariableDecl>) instance.valueOf(VariableDecl_ord);
    public static final EntityDescriptor<EnumCaseElement> EnumCaseElement = (EntityDescriptor<EnumCaseElement>) instance.valueOf(EnumCaseElement_ord);
    public static final EntityDescriptor<EnumCaseElementList> EnumCaseElementList = (EntityDescriptor<EnumCaseElementList>) instance.valueOf(EnumCaseElementList_ord);
    public static final EntityDescriptor<EnumCaseDecl> EnumCaseDecl = (EntityDescriptor<EnumCaseDecl>) instance.valueOf(EnumCaseDecl_ord);
    public static final EntityDescriptor<EnumDecl> EnumDecl = (EntityDescriptor<EnumDecl>) instance.valueOf(EnumDecl_ord);
    public static final EntityDescriptor<OperatorDecl> OperatorDecl = (EntityDescriptor<OperatorDecl>) instance.valueOf(OperatorDecl_ord);
    public static final EntityDescriptor<IdentifierList> IdentifierList = (EntityDescriptor<IdentifierList>) instance.valueOf(IdentifierList_ord);
    public static final EntityDescriptor<OperatorPrecedenceAndTypes> OperatorPrecedenceAndTypes = (EntityDescriptor<OperatorPrecedenceAndTypes>) instance.valueOf(OperatorPrecedenceAndTypes_ord);
    public static final EntityDescriptor<PrecedenceGroupDecl> PrecedenceGroupDecl = (EntityDescriptor<PrecedenceGroupDecl>) instance.valueOf(PrecedenceGroupDecl_ord);
    public static final EntityDescriptor<AbstractPrecedenceGroupAttribute> AbstractPrecedenceGroupAttribute = (EntityDescriptor<AbstractPrecedenceGroupAttribute>) instance.valueOf(AbstractPrecedenceGroupAttribute_ord);
    public static final EntityDescriptor<PrecedenceGroupAttributeList> PrecedenceGroupAttributeList = (EntityDescriptor<PrecedenceGroupAttributeList>) instance.valueOf(PrecedenceGroupAttributeList_ord);
    public static final EntityDescriptor<PrecedenceGroupRelation> PrecedenceGroupRelation = (EntityDescriptor<PrecedenceGroupRelation>) instance.valueOf(PrecedenceGroupRelation_ord);
    public static final EntityDescriptor<PrecedenceGroupNameList> PrecedenceGroupNameList = (EntityDescriptor<PrecedenceGroupNameList>) instance.valueOf(PrecedenceGroupNameList_ord);
    public static final EntityDescriptor<PrecedenceGroupNameElement> PrecedenceGroupNameElement = (EntityDescriptor<PrecedenceGroupNameElement>) instance.valueOf(PrecedenceGroupNameElement_ord);
    public static final EntityDescriptor<PrecedenceGroupAssignment> PrecedenceGroupAssignment = (EntityDescriptor<PrecedenceGroupAssignment>) instance.valueOf(PrecedenceGroupAssignment_ord);
    public static final EntityDescriptor<PrecedenceGroupAssociativity> PrecedenceGroupAssociativity = (EntityDescriptor<PrecedenceGroupAssociativity>) instance.valueOf(PrecedenceGroupAssociativity_ord);
    public static final EntityDescriptor<TokenList> TokenList = (EntityDescriptor<TokenList>) instance.valueOf(TokenList_ord);
    public static final EntityDescriptor<CustomAttribute> CustomAttribute = (EntityDescriptor<CustomAttribute>) instance.valueOf(CustomAttribute_ord);
    public static final EntityDescriptor<Attribute> Attribute = (EntityDescriptor<Attribute>) instance.valueOf(Attribute_ord);
    public static final EntityDescriptor<AbstractAttribute> AbstractAttribute = (EntityDescriptor<AbstractAttribute>) instance.valueOf(AbstractAttribute_ord);
    public static final EntityDescriptor<AttributeList> AttributeList = (EntityDescriptor<AttributeList>) instance.valueOf(AttributeList_ord);
    public static final EntityDescriptor<AbstractSpecializeAttribute> AbstractSpecializeAttribute = (EntityDescriptor<AbstractSpecializeAttribute>) instance.valueOf(AbstractSpecializeAttribute_ord);
    public static final EntityDescriptor<SpecializeAttributeSpecList> SpecializeAttributeSpecList = (EntityDescriptor<SpecializeAttributeSpecList>) instance.valueOf(SpecializeAttributeSpecList_ord);
    public static final EntityDescriptor<LabeledSpecializeEntry> LabeledSpecializeEntry = (EntityDescriptor<LabeledSpecializeEntry>) instance.valueOf(LabeledSpecializeEntry_ord);
    public static final EntityDescriptor<NamedAttributeStringArgument> NamedAttributeStringArgument = (EntityDescriptor<NamedAttributeStringArgument>) instance.valueOf(NamedAttributeStringArgument_ord);
    public static final EntityDescriptor<DeclName> DeclName = (EntityDescriptor<DeclName>) instance.valueOf(DeclName_ord);
    public static final EntityDescriptor<ImplementsAttributeArguments> ImplementsAttributeArguments = (EntityDescriptor<ImplementsAttributeArguments>) instance.valueOf(ImplementsAttributeArguments_ord);
    public static final EntityDescriptor<ObjCSelectorPiece> ObjCSelectorPiece = (EntityDescriptor<ObjCSelectorPiece>) instance.valueOf(ObjCSelectorPiece_ord);
    public static final EntityDescriptor<ObjCSelector> ObjCSelector = (EntityDescriptor<ObjCSelector>) instance.valueOf(ObjCSelector_ord);
    public static final EntityDescriptor<ContinueStmt> ContinueStmt = (EntityDescriptor<ContinueStmt>) instance.valueOf(ContinueStmt_ord);
    public static final EntityDescriptor<WhileStmt> WhileStmt = (EntityDescriptor<WhileStmt>) instance.valueOf(WhileStmt_ord);
    public static final EntityDescriptor<DeferStmt> DeferStmt = (EntityDescriptor<DeferStmt>) instance.valueOf(DeferStmt_ord);
    public static final EntityDescriptor<AbstractSwitchCase> AbstractSwitchCase = (EntityDescriptor<AbstractSwitchCase>) instance.valueOf(AbstractSwitchCase_ord);
    public static final EntityDescriptor<SwitchCaseList> SwitchCaseList = (EntityDescriptor<SwitchCaseList>) instance.valueOf(SwitchCaseList_ord);
    public static final EntityDescriptor<RepeatWhileStmt> RepeatWhileStmt = (EntityDescriptor<RepeatWhileStmt>) instance.valueOf(RepeatWhileStmt_ord);
    public static final EntityDescriptor<GuardStmt> GuardStmt = (EntityDescriptor<GuardStmt>) instance.valueOf(GuardStmt_ord);
    public static final EntityDescriptor<WhereClause> WhereClause = (EntityDescriptor<WhereClause>) instance.valueOf(WhereClause_ord);
    public static final EntityDescriptor<ForInStmt> ForInStmt = (EntityDescriptor<ForInStmt>) instance.valueOf(ForInStmt_ord);
    public static final EntityDescriptor<SwitchStmt> SwitchStmt = (EntityDescriptor<SwitchStmt>) instance.valueOf(SwitchStmt_ord);
    public static final EntityDescriptor<CatchClauseList> CatchClauseList = (EntityDescriptor<CatchClauseList>) instance.valueOf(CatchClauseList_ord);
    public static final EntityDescriptor<DoStmt> DoStmt = (EntityDescriptor<DoStmt>) instance.valueOf(DoStmt_ord);
    public static final EntityDescriptor<ReturnStmt> ReturnStmt = (EntityDescriptor<ReturnStmt>) instance.valueOf(ReturnStmt_ord);
    public static final EntityDescriptor<YieldStmt> YieldStmt = (EntityDescriptor<YieldStmt>) instance.valueOf(YieldStmt_ord);
    public static final EntityDescriptor<YieldList> YieldList = (EntityDescriptor<YieldList>) instance.valueOf(YieldList_ord);
    public static final EntityDescriptor<FallthroughStmt> FallthroughStmt = (EntityDescriptor<FallthroughStmt>) instance.valueOf(FallthroughStmt_ord);
    public static final EntityDescriptor<BreakStmt> BreakStmt = (EntityDescriptor<BreakStmt>) instance.valueOf(BreakStmt_ord);
    public static final EntityDescriptor<CaseItemList> CaseItemList = (EntityDescriptor<CaseItemList>) instance.valueOf(CaseItemList_ord);
    public static final EntityDescriptor<ConditionElement> ConditionElement = (EntityDescriptor<ConditionElement>) instance.valueOf(ConditionElement_ord);
    public static final EntityDescriptor<AvailabilityCondition> AvailabilityCondition = (EntityDescriptor<AvailabilityCondition>) instance.valueOf(AvailabilityCondition_ord);
    public static final EntityDescriptor<MatchingPatternCondition> MatchingPatternCondition = (EntityDescriptor<MatchingPatternCondition>) instance.valueOf(MatchingPatternCondition_ord);
    public static final EntityDescriptor<OptionalBindingCondition> OptionalBindingCondition = (EntityDescriptor<OptionalBindingCondition>) instance.valueOf(OptionalBindingCondition_ord);
    public static final EntityDescriptor<ConditionElementList> ConditionElementList = (EntityDescriptor<ConditionElementList>) instance.valueOf(ConditionElementList_ord);
    public static final EntityDescriptor<ThrowStmt> ThrowStmt = (EntityDescriptor<ThrowStmt>) instance.valueOf(ThrowStmt_ord);
    public static final EntityDescriptor<IfStmt> IfStmt = (EntityDescriptor<IfStmt>) instance.valueOf(IfStmt_ord);
    public static final EntityDescriptor<SwitchCase> SwitchCase = (EntityDescriptor<SwitchCase>) instance.valueOf(SwitchCase_ord);
    public static final EntityDescriptor<SwitchDefaultLabel> SwitchDefaultLabel = (EntityDescriptor<SwitchDefaultLabel>) instance.valueOf(SwitchDefaultLabel_ord);
    public static final EntityDescriptor<CaseItem> CaseItem = (EntityDescriptor<CaseItem>) instance.valueOf(CaseItem_ord);
    public static final EntityDescriptor<SwitchCaseLabel> SwitchCaseLabel = (EntityDescriptor<SwitchCaseLabel>) instance.valueOf(SwitchCaseLabel_ord);
    public static final EntityDescriptor<CatchClause> CatchClause = (EntityDescriptor<CatchClause>) instance.valueOf(CatchClause_ord);
    public static final EntityDescriptor<PoundAssertStmt> PoundAssertStmt = (EntityDescriptor<PoundAssertStmt>) instance.valueOf(PoundAssertStmt_ord);
    public static final EntityDescriptor<GenericWhereClause> GenericWhereClause = (EntityDescriptor<GenericWhereClause>) instance.valueOf(GenericWhereClause_ord);
    public static final EntityDescriptor<AbstractGenericRequirement> AbstractGenericRequirement = (EntityDescriptor<AbstractGenericRequirement>) instance.valueOf(AbstractGenericRequirement_ord);
    public static final EntityDescriptor<GenericRequirementList> GenericRequirementList = (EntityDescriptor<GenericRequirementList>) instance.valueOf(GenericRequirementList_ord);
    public static final EntityDescriptor<SameTypeRequirement> SameTypeRequirement = (EntityDescriptor<SameTypeRequirement>) instance.valueOf(SameTypeRequirement_ord);
    public static final EntityDescriptor<GenericParameterList> GenericParameterList = (EntityDescriptor<GenericParameterList>) instance.valueOf(GenericParameterList_ord);
    public static final EntityDescriptor<GenericParameter> GenericParameter = (EntityDescriptor<GenericParameter>) instance.valueOf(GenericParameter_ord);
    public static final EntityDescriptor<GenericParameterClause> GenericParameterClause = (EntityDescriptor<GenericParameterClause>) instance.valueOf(GenericParameterClause_ord);
    public static final EntityDescriptor<ConformanceRequirement> ConformanceRequirement = (EntityDescriptor<ConformanceRequirement>) instance.valueOf(ConformanceRequirement_ord);
    public static final EntityDescriptor<SimpleTypeIdentifier> SimpleTypeIdentifier = (EntityDescriptor<SimpleTypeIdentifier>) instance.valueOf(SimpleTypeIdentifier_ord);
    public static final EntityDescriptor<MemberTypeIdentifier> MemberTypeIdentifier = (EntityDescriptor<MemberTypeIdentifier>) instance.valueOf(MemberTypeIdentifier_ord);
    public static final EntityDescriptor<ClassRestrictionType> ClassRestrictionType = (EntityDescriptor<ClassRestrictionType>) instance.valueOf(ClassRestrictionType_ord);
    public static final EntityDescriptor<ArrayType> ArrayType = (EntityDescriptor<ArrayType>) instance.valueOf(ArrayType_ord);
    public static final EntityDescriptor<DictionaryType> DictionaryType = (EntityDescriptor<DictionaryType>) instance.valueOf(DictionaryType_ord);
    public static final EntityDescriptor<MetatypeType> MetatypeType = (EntityDescriptor<MetatypeType>) instance.valueOf(MetatypeType_ord);
    public static final EntityDescriptor<OptionalType> OptionalType = (EntityDescriptor<OptionalType>) instance.valueOf(OptionalType_ord);
    public static final EntityDescriptor<SomeType> SomeType = (EntityDescriptor<SomeType>) instance.valueOf(SomeType_ord);
    public static final EntityDescriptor<ImplicitlyUnwrappedOptionalType> ImplicitlyUnwrappedOptionalType = (EntityDescriptor<ImplicitlyUnwrappedOptionalType>) instance.valueOf(ImplicitlyUnwrappedOptionalType_ord);
    public static final EntityDescriptor<CompositionTypeElement> CompositionTypeElement = (EntityDescriptor<CompositionTypeElement>) instance.valueOf(CompositionTypeElement_ord);
    public static final EntityDescriptor<CompositionTypeElementList> CompositionTypeElementList = (EntityDescriptor<CompositionTypeElementList>) instance.valueOf(CompositionTypeElementList_ord);
    public static final EntityDescriptor<CompositionType> CompositionType = (EntityDescriptor<CompositionType>) instance.valueOf(CompositionType_ord);
    public static final EntityDescriptor<TupleTypeElement> TupleTypeElement = (EntityDescriptor<TupleTypeElement>) instance.valueOf(TupleTypeElement_ord);
    public static final EntityDescriptor<TupleTypeElementList> TupleTypeElementList = (EntityDescriptor<TupleTypeElementList>) instance.valueOf(TupleTypeElementList_ord);
    public static final EntityDescriptor<TupleType> TupleType = (EntityDescriptor<TupleType>) instance.valueOf(TupleType_ord);
    public static final EntityDescriptor<FunctionType> FunctionType = (EntityDescriptor<FunctionType>) instance.valueOf(FunctionType_ord);
    public static final EntityDescriptor<AttributedType> AttributedType = (EntityDescriptor<AttributedType>) instance.valueOf(AttributedType_ord);
    public static final EntityDescriptor<GenericArgumentList> GenericArgumentList = (EntityDescriptor<GenericArgumentList>) instance.valueOf(GenericArgumentList_ord);
    public static final EntityDescriptor<GenericArgument> GenericArgument = (EntityDescriptor<GenericArgument>) instance.valueOf(GenericArgument_ord);
    public static final EntityDescriptor<GenericArgumentClause> GenericArgumentClause = (EntityDescriptor<GenericArgumentClause>) instance.valueOf(GenericArgumentClause_ord);
    public static final EntityDescriptor<TypeAnnotation> TypeAnnotation = (EntityDescriptor<TypeAnnotation>) instance.valueOf(TypeAnnotation_ord);
    public static final EntityDescriptor<EnumCasePattern> EnumCasePattern = (EntityDescriptor<EnumCasePattern>) instance.valueOf(EnumCasePattern_ord);
    public static final EntityDescriptor<IsTypePattern> IsTypePattern = (EntityDescriptor<IsTypePattern>) instance.valueOf(IsTypePattern_ord);
    public static final EntityDescriptor<OptionalPattern> OptionalPattern = (EntityDescriptor<OptionalPattern>) instance.valueOf(OptionalPattern_ord);
    public static final EntityDescriptor<IdentifierPattern> IdentifierPattern = (EntityDescriptor<IdentifierPattern>) instance.valueOf(IdentifierPattern_ord);
    public static final EntityDescriptor<AsTypePattern> AsTypePattern = (EntityDescriptor<AsTypePattern>) instance.valueOf(AsTypePattern_ord);
    public static final EntityDescriptor<TuplePattern> TuplePattern = (EntityDescriptor<TuplePattern>) instance.valueOf(TuplePattern_ord);
    public static final EntityDescriptor<WildcardPattern> WildcardPattern = (EntityDescriptor<WildcardPattern>) instance.valueOf(WildcardPattern_ord);
    public static final EntityDescriptor<TuplePatternElement> TuplePatternElement = (EntityDescriptor<TuplePatternElement>) instance.valueOf(TuplePatternElement_ord);
    public static final EntityDescriptor<ExpressionPattern> ExpressionPattern = (EntityDescriptor<ExpressionPattern>) instance.valueOf(ExpressionPattern_ord);
    public static final EntityDescriptor<TuplePatternElementList> TuplePatternElementList = (EntityDescriptor<TuplePatternElementList>) instance.valueOf(TuplePatternElementList_ord);
    public static final EntityDescriptor<ValueBindingPattern> ValueBindingPattern = (EntityDescriptor<ValueBindingPattern>) instance.valueOf(ValueBindingPattern_ord);
    public static final EntityDescriptor<AvailabilitySpecList> AvailabilitySpecList = (EntityDescriptor<AvailabilitySpecList>) instance.valueOf(AvailabilitySpecList_ord);
    public static final EntityDescriptor<AvailabilityArgument> AvailabilityArgument = (EntityDescriptor<AvailabilityArgument>) instance.valueOf(AvailabilityArgument_ord);
    public static final EntityDescriptor<AvailabilityLabeledArgument> AvailabilityLabeledArgument = (EntityDescriptor<AvailabilityLabeledArgument>) instance.valueOf(AvailabilityLabeledArgument_ord);
    public static final EntityDescriptor<AvailabilityVersionRestriction> AvailabilityVersionRestriction = (EntityDescriptor<AvailabilityVersionRestriction>) instance.valueOf(AvailabilityVersionRestriction_ord);
    public static final EntityDescriptor<VersionTuple> VersionTuple = (EntityDescriptor<VersionTuple>) instance.valueOf(VersionTuple_ord);
    public static final EntityDescriptor<TokenKind> TokenKind = (EntityDescriptor<TokenKind>) instance.valueOf(TokenKind_ord);
    public static final EntityDescriptor<Text> Text = (EntityDescriptor<Text>) instance.valueOf(Text_ord);
    public static final EntityDescriptor<Trivia> Trivia = (EntityDescriptor<Trivia>) instance.valueOf(Trivia_ord);
    public static final EntityDescriptor<TriviaPiece> TriviaPiece = (EntityDescriptor<TriviaPiece>) instance.valueOf(TriviaPiece_ord);
    public static final EntityDescriptor<SourcePresence> SourcePresence = (EntityDescriptor<SourcePresence>) instance.valueOf(SourcePresence_ord);

    private SwiftSyntaxEntityDescriptorEnum() {
    }
    private static final long serialVersionUID = 1;

    protected void initEntityDescriptors() {
        putSimpleEntity(Syntax_ord, "Syntax", Syntax.class, true, InheritedTypeList_ord, OptionalBindingCondition_ord, AvailabilityArgument_ord, AttributeList_ord, AsExpr_ord, IdentifierList_ord, ObjcName_ord, DictionaryType_ord, EnumCasePattern_ord, UnknownDecl_ord, TupleType_ord, DeclModifier_ord, InOutExpr_ord, ClosureCaptureSignature_ord, DiscardAssignmentExpr_ord, PoundWarningDecl_ord, CodeBlock_ord, ParameterClause_ord, CompositionTypeElement_ord, ForInStmt_ord, Expr_ord, SubscriptDecl_ord, DictionaryElementList_ord, GenericArgumentList_ord, PoundFunctionExpr_ord, PatternBindingList_ord, Attribute_ord, OperatorDecl_ord, YieldList_ord, EditorPlaceholderExpr_ord, PrecedenceGroupAssignment_ord, ClosureParamList_ord, EnumCaseElementList_ord, SymbolicReferenceExpr_ord, InitializerClause_ord, TypeInheritanceClause_ord, ObjcKeyPathExpr_ord, FunctionType_ord, FunctionParameterList_ord, GenericParameterClause_ord, ConditionElement_ord, TuplePatternElement_ord, FunctionCallArgument_ord, MemberAccessExpr_ord, IsTypePattern_ord, ConformanceRequirement_ord, ObjcSelectorExpr_ord, CompositionType_ord, SpecializeAttributeSpecList_ord, ImplementsAttributeArguments_ord, MemberTypeIdentifier_ord, TupleTypeElementList_ord, ArrayElement_ord, IdentifierPattern_ord, TernaryExpr_ord, SequenceExpr_ord, KeyPathExpr_ord, PoundSourceLocation_ord, InheritedType_ord, ClosureExpr_ord, CatchClauseList_ord, TupleExpr_ord, ClassRestrictionType_ord, SwitchCase_ord, OptionalType_ord, PrecedenceGroupNameList_ord, PrecedenceGroupRelation_ord, DeferStmt_ord, ClosureCaptureItemList_ord, NamedAttributeStringArgument_ord, CustomAttribute_ord, StringLiteralExpr_ord, EnumCaseDecl_ord, StringLiteralSegments_ord, ExpressionSegment_ord, TypeInitializerClause_ord, WildcardPattern_ord, DeclNameArgument_ord, SwitchDefaultLabel_ord, ClosureCaptureItem_ord, AccessLevelModifier_ord, GenericArgument_ord, UnknownExpr_ord, TuplePatternElementList_ord, SourceFile_ord, ObjCSelector_ord, ClosureParam_ord, DictionaryExpr_ord, ProtocolDecl_ord, PoundLineExpr_ord, TypeAnnotation_ord, UnknownStmt_ord, AccessPathComponent_ord, AvailabilityLabeledArgument_ord, VersionTuple_ord, MemberDeclListItem_ord, AccessorDecl_ord, ClosureSignature_ord, TupleElementList_ord, Decl_ord, AbstractGenericRequirement_ord, PrefixOperatorExpr_ord, VariableDecl_ord, TryExpr_ord, AsTypePattern_ord, SameTypeRequirement_ord, GenericArgumentClause_ord, IfStmt_ord, GenericWhereClause_ord, ClassDecl_ord, GenericParameterList_ord, GenericParameter_ord, UnknownPattern_ord, PatternBinding_ord, AccessorList_ord, IntegerLiteralExpr_ord, PoundAssertStmt_ord, FallthroughStmt_ord, WhereClause_ord, IfConfigDecl_ord, Token_ord, StringSegment_ord, EnumDecl_ord, MemberDeclBlock_ord, SimpleTypeIdentifier_ord, SuperRefExpr_ord, BreakStmt_ord, AccessorBlock_ord, UnresolvedPatternExpr_ord, SwitchStmt_ord, CodeBlockItemList_ord, CatchClause_ord, AssignmentExpr_ord, PostfixUnaryExpr_ord, FunctionSignature_ord, SyntaxCollection_ord, MetatypeType_ord, ArrowExpr_ord, YieldStmt_ord, ThrowStmt_ord, OptionalPattern_ord, DictionaryElement_ord, PrecedenceGroupAssociativity_ord, RepeatWhileStmt_ord, TypealiasDecl_ord, AttributedType_ord, WhileStmt_ord, IdentifierExpr_ord, IsExpr_ord, CompositionTypeElementList_ord, AccessorParameter_ord, DoStmt_ord, Pattern_ord, IfConfigClauseList_ord, PoundColumnExpr_ord, OperatorPrecedenceAndTypes_ord, DeinitializerDecl_ord, AbstractSegment_ord, TuplePattern_ord, UnknownType_ord, IfConfigClause_ord, ArrayElementList_ord, ModifierList_ord, Type_ord, MatchingPatternCondition_ord, ExprList_ord, AccessPath_ord, ImportDecl_ord, AbstractSpecializeAttribute_ord, AvailabilitySpecList_ord, ExpressionPattern_ord, PrecedenceGroupNameElement_ord, SubscriptExpr_ord, ReturnClause_ord, ConditionElementList_ord, ArrayType_ord, PoundErrorDecl_ord, BooleanLiteralExpr_ord, LabeledSpecializeEntry_ord, CaseItem_ord, FunctionCallArgumentList_ord, FunctionParameter_ord, EnumCaseElement_ord, OptionalChainingExpr_ord, ObjectLiteralExpr_ord, KeyPathBaseExpr_ord, DeclNameArgumentList_ord, DeclNameArguments_ord, NilLiteralExpr_ord, SpecializeExpr_ord, SwitchCaseLabel_ord, AvailabilityCondition_ord, ExtensionDecl_ord, ArrayExpr_ord, FunctionCallExpr_ord, GenericRequirementList_ord, TupleTypeElement_ord, ObjcNamePiece_ord, AvailabilityVersionRestriction_ord, GuardStmt_ord, CodeBlockItem_ord, ReturnStmt_ord, AbstractSwitchCase_ord, ObjCSelectorPiece_ord, ImplicitlyUnwrappedOptionalType_ord, TokenList_ord, ValueBindingPattern_ord, Stmt_ord, FloatLiteralExpr_ord, AbstractAttribute_ord, PoundFileExpr_ord, DeclName_ord, AbstractPrecedenceGroupAttribute_ord, PrecedenceGroupAttributeList_ord, InitializerDecl_ord, SomeType_ord, CaseItemList_ord, ForcedValueExpr_ord, TypeExpr_ord, BinaryOperatorExpr_ord, FunctionDecl_ord, ContinueStmt_ord, PrecedenceGroupDecl_ord, TupleElement_ord, PoundSourceLocationArgs_ord, PoundDsohandleExpr_ord, MemberDeclList_ord, AssociatedtypeDecl_ord, StructDecl_ord, SwitchCaseList_ord);
        putSimpleEntity(SyntaxCollection_ord, "SyntaxCollection", SyntaxCollection.class, true, InheritedTypeList_ord, AttributeList_ord, StringLiteralSegments_ord, TokenList_ord, IdentifierList_ord, ConditionElementList_ord, ObjcName_ord, SpecializeAttributeSpecList_ord, TuplePatternElementList_ord, TupleTypeElementList_ord, CompositionTypeElementList_ord, FunctionCallArgumentList_ord, ClosureParamList_ord, EnumCaseElementList_ord, ObjCSelector_ord, PrecedenceGroupAttributeList_ord, IfConfigClauseList_ord, CodeBlockItemList_ord, DeclNameArgumentList_ord, TupleElementList_ord, CaseItemList_ord, FunctionParameterList_ord, CatchClauseList_ord, ArrayElementList_ord, ModifierList_ord, ExprList_ord, GenericRequirementList_ord, GenericParameterList_ord, MemberDeclList_ord, AccessPath_ord, PrecedenceGroupNameList_ord, DictionaryElementList_ord, GenericArgumentList_ord, AvailabilitySpecList_ord, ClosureCaptureItemList_ord, AccessorList_ord, PatternBindingList_ord, SwitchCaseList_ord);
        putSimpleEntity(Decl_ord, "Decl", Decl.class, true, InitializerDecl_ord, AccessorDecl_ord, OperatorDecl_ord, PoundWarningDecl_ord, IfConfigDecl_ord, PoundSourceLocation_ord, EnumCaseDecl_ord, DeinitializerDecl_ord, VariableDecl_ord, EnumDecl_ord, ExtensionDecl_ord, FunctionDecl_ord, PrecedenceGroupDecl_ord, TypealiasDecl_ord, ClassDecl_ord, PoundErrorDecl_ord, SubscriptDecl_ord, UnknownDecl_ord, ImportDecl_ord, AssociatedtypeDecl_ord, StructDecl_ord, ProtocolDecl_ord);
        putSimpleEntity(Expr_ord, "Expr", Expr.class, true, IntegerLiteralExpr_ord, SubscriptExpr_ord, AsExpr_ord, StringLiteralExpr_ord, ObjcSelectorExpr_ord, EditorPlaceholderExpr_ord, SuperRefExpr_ord, UnknownExpr_ord, IdentifierExpr_ord, FloatLiteralExpr_ord, BooleanLiteralExpr_ord, IsExpr_ord, PoundFileExpr_ord, DictionaryExpr_ord, SymbolicReferenceExpr_ord, TernaryExpr_ord, SequenceExpr_ord, PoundLineExpr_ord, UnresolvedPatternExpr_ord, KeyPathExpr_ord, OptionalChainingExpr_ord, ObjectLiteralExpr_ord, InOutExpr_ord, PoundColumnExpr_ord, KeyPathBaseExpr_ord, DiscardAssignmentExpr_ord, ObjcKeyPathExpr_ord, ForcedValueExpr_ord, AssignmentExpr_ord, PrefixOperatorExpr_ord, ClosureExpr_ord, PostfixUnaryExpr_ord, NilLiteralExpr_ord, TypeExpr_ord, SpecializeExpr_ord, TryExpr_ord, BinaryOperatorExpr_ord, TupleExpr_ord, ArrayExpr_ord, FunctionCallExpr_ord, PoundDsohandleExpr_ord, ArrowExpr_ord, PoundFunctionExpr_ord, MemberAccessExpr_ord);
        putSimpleEntity(Pattern_ord, "Pattern", Pattern.class, true, OptionalPattern_ord, TuplePattern_ord, EnumCasePattern_ord, UnknownPattern_ord, IsTypePattern_ord, ExpressionPattern_ord, ValueBindingPattern_ord, IdentifierPattern_ord, AsTypePattern_ord, WildcardPattern_ord);
        putSimpleEntity(Stmt_ord, "Stmt", Stmt.class, true, UnknownStmt_ord, PoundAssertStmt_ord, SwitchStmt_ord, FallthroughStmt_ord, ContinueStmt_ord, ForInStmt_ord, RepeatWhileStmt_ord, IfStmt_ord, WhileStmt_ord, BreakStmt_ord, YieldStmt_ord, GuardStmt_ord, DeferStmt_ord, ReturnStmt_ord, ThrowStmt_ord, DoStmt_ord);
        putSimpleEntity(Type_ord, "Type", Type.class, true, SomeType_ord, FunctionType_ord, ImplicitlyUnwrappedOptionalType_ord, CompositionType_ord, ClassRestrictionType_ord, DictionaryType_ord, UnknownType_ord, SimpleTypeIdentifier_ord, MemberTypeIdentifier_ord, ArrayType_ord, OptionalType_ord, AttributedType_ord, MetatypeType_ord, TupleType_ord);
        putSimpleEntity(Token_ord, "Token", Token.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.kind, TokenKind_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.presence, SourcePresence_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.leadingTrivia, Trivia_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingTrivia, Trivia_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.text, Text_ord, true, false, false, false, false);
        putCompositeEntity(UnknownDecl_ord, "UnknownDecl", UnknownDecl.class, false, Syntax_ord, true, false);
        putCompositeEntity(UnknownExpr_ord, "UnknownExpr", UnknownExpr.class, false, Syntax_ord, true, false);
        putCompositeEntity(UnknownPattern_ord, "UnknownPattern", UnknownPattern.class, false, Syntax_ord, true, false);
        putCompositeEntity(UnknownStmt_ord, "UnknownStmt", UnknownStmt.class, false, Syntax_ord, true, false);
        putCompositeEntity(UnknownType_ord, "UnknownType", UnknownType.class, false, Syntax_ord, true, false);
        putSimpleEntity(CodeBlockItem_ord, "CodeBlockItem", CodeBlockItem.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.item, Syntax_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.semicolon, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.errorTokens, Syntax_ord, true, false, false, false, false);
        putCompositeEntity(CodeBlockItemList_ord, "CodeBlockItemList", CodeBlockItemList.class, false, CodeBlockItem_ord, true, false);
        putSimpleEntity(CodeBlock_ord, "CodeBlock", CodeBlock.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftBrace, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.statements, CodeBlockItemList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightBrace, Token_ord);
        putSimpleEntity(InOutExpr_ord, "InOutExpr", InOutExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.ampersand, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.expression, Expr_ord);
        putSimpleEntity(PoundColumnExpr_ord, "PoundColumnExpr", PoundColumnExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.poundColumn, Token_ord);
        putCompositeEntity(FunctionCallArgumentList_ord, "FunctionCallArgumentList", FunctionCallArgumentList.class, false, FunctionCallArgument_ord, true, false);
        putCompositeEntity(TupleElementList_ord, "TupleElementList", TupleElementList.class, false, TupleElement_ord, true, false);
        putCompositeEntity(ArrayElementList_ord, "ArrayElementList", ArrayElementList.class, false, ArrayElement_ord, true, false);
        putCompositeEntity(DictionaryElementList_ord, "DictionaryElementList", DictionaryElementList.class, false, DictionaryElement_ord, true, false);
        putSimpleEntity(AbstractSegment_ord, "AbstractSegment", AbstractSegment.class, true, StringSegment_ord, ExpressionSegment_ord);
        putCompositeEntity(StringLiteralSegments_ord, "StringLiteralSegments", StringLiteralSegments.class, false, AbstractSegment_ord, true, false);
        putSimpleEntity(TryExpr_ord, "TryExpr", TryExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.tryKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.questionOrExclamationMark, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.expression, Expr_ord);
        putSimpleEntity(DeclNameArgument_ord, "DeclNameArgument", DeclNameArgument.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.name, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord);
        putCompositeEntity(DeclNameArgumentList_ord, "DeclNameArgumentList", DeclNameArgumentList.class, false, DeclNameArgument_ord, true, false);
        putSimpleEntity(DeclNameArguments_ord, "DeclNameArguments", DeclNameArguments.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.arguments, DeclNameArgumentList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord);
        putSimpleEntity(IdentifierExpr_ord, "IdentifierExpr", IdentifierExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.identifier, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.declNameArguments, DeclNameArguments_ord, true, false, false, false, false);
        putSimpleEntity(SuperRefExpr_ord, "SuperRefExpr", SuperRefExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.superKeyword, Token_ord);
        putSimpleEntity(NilLiteralExpr_ord, "NilLiteralExpr", NilLiteralExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.nilKeyword, Token_ord);
        putSimpleEntity(DiscardAssignmentExpr_ord, "DiscardAssignmentExpr", DiscardAssignmentExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.wildcard, Token_ord);
        putSimpleEntity(AssignmentExpr_ord, "AssignmentExpr", AssignmentExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.assignToken, Token_ord);
        putSimpleEntity(SequenceExpr_ord, "SequenceExpr", SequenceExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.elements, ExprList_ord);
        putCompositeEntity(ExprList_ord, "ExprList", ExprList.class, false, Expr_ord, true, false);
        putSimpleEntity(PoundLineExpr_ord, "PoundLineExpr", PoundLineExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.poundLine, Token_ord);
        putSimpleEntity(PoundFileExpr_ord, "PoundFileExpr", PoundFileExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.poundFile, Token_ord);
        putSimpleEntity(PoundFunctionExpr_ord, "PoundFunctionExpr", PoundFunctionExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.poundFunction, Token_ord);
        putSimpleEntity(PoundDsohandleExpr_ord, "PoundDsohandleExpr", PoundDsohandleExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.poundDsohandle, Token_ord);
        putSimpleEntity(SymbolicReferenceExpr_ord, "SymbolicReferenceExpr", SymbolicReferenceExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.identifier, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericArgumentClause, GenericArgumentClause_ord, true, false, false, false, false);
        putSimpleEntity(PrefixOperatorExpr_ord, "PrefixOperatorExpr", PrefixOperatorExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.operatorToken, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.postfixExpression, Expr_ord);
        putSimpleEntity(BinaryOperatorExpr_ord, "BinaryOperatorExpr", BinaryOperatorExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.operatorToken, Token_ord);
        putSimpleEntity(ArrowExpr_ord, "ArrowExpr", ArrowExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.throwsToken, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.arrowToken, Token_ord);
        putSimpleEntity(FloatLiteralExpr_ord, "FloatLiteralExpr", FloatLiteralExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.floatingDigits, Token_ord);
        putSimpleEntity(TupleExpr_ord, "TupleExpr", TupleExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.elementList, TupleElementList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord);
        putSimpleEntity(ArrayExpr_ord, "ArrayExpr", ArrayExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftSquare, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.elements, ArrayElementList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightSquare, Token_ord);
        putSimpleEntity(DictionaryExpr_ord, "DictionaryExpr", DictionaryExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftSquare, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.content, Syntax_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightSquare, Token_ord);
        putSimpleEntity(FunctionCallArgument_ord, "FunctionCallArgument", FunctionCallArgument.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.label, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.expression, Expr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putSimpleEntity(TupleElement_ord, "TupleElement", TupleElement.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.label, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.expression, Expr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putSimpleEntity(ArrayElement_ord, "ArrayElement", ArrayElement.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.expression, Expr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putSimpleEntity(DictionaryElement_ord, "DictionaryElement", DictionaryElement.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.keyExpression, Expr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.valueExpression, Expr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putSimpleEntity(IntegerLiteralExpr_ord, "IntegerLiteralExpr", IntegerLiteralExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.digits, Token_ord);
        putSimpleEntity(BooleanLiteralExpr_ord, "BooleanLiteralExpr", BooleanLiteralExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.booleanLiteral, Token_ord);
        putSimpleEntity(TernaryExpr_ord, "TernaryExpr", TernaryExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.conditionExpression, Expr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.questionMark, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.firstChoice, Expr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.colonMark, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.secondChoice, Expr_ord);
        putSimpleEntity(MemberAccessExpr_ord, "MemberAccessExpr", MemberAccessExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.base, Expr_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.dot, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.name, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.declNameArguments, DeclNameArguments_ord, true, false, false, false, false);
        putSimpleEntity(IsExpr_ord, "IsExpr", IsExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.isTok, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.typeName, Type_ord);
        putSimpleEntity(AsExpr_ord, "AsExpr", AsExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.asTok, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.questionOrExclamationMark, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.typeName, Type_ord);
        putSimpleEntity(TypeExpr_ord, "TypeExpr", TypeExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.type, Type_ord);
        putSimpleEntity(ClosureCaptureItem_ord, "ClosureCaptureItem", ClosureCaptureItem.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.specifier, TokenList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.name, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.assignToken, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.expression, Expr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putCompositeEntity(ClosureCaptureItemList_ord, "ClosureCaptureItemList", ClosureCaptureItemList.class, false, ClosureCaptureItem_ord, true, false);
        putSimpleEntity(ClosureCaptureSignature_ord, "ClosureCaptureSignature", ClosureCaptureSignature.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftSquare, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.items, ClosureCaptureItemList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightSquare, Token_ord);
        putSimpleEntity(ClosureParam_ord, "ClosureParam", ClosureParam.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.name, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putCompositeEntity(ClosureParamList_ord, "ClosureParamList", ClosureParamList.class, false, ClosureParam_ord, true, false);
        putSimpleEntity(ClosureSignature_ord, "ClosureSignature", ClosureSignature.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.capture, ClosureCaptureSignature_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.input, Syntax_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.throwsTok, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.output, ReturnClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.inTok, Token_ord);
        putSimpleEntity(ClosureExpr_ord, "ClosureExpr", ClosureExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftBrace, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.signature, ClosureSignature_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.statements, CodeBlockItemList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightBrace, Token_ord);
        putSimpleEntity(UnresolvedPatternExpr_ord, "UnresolvedPatternExpr", UnresolvedPatternExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.pattern, Pattern_ord);
        putSimpleEntity(FunctionCallExpr_ord, "FunctionCallExpr", FunctionCallExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.calledExpression, Expr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.argumentList, FunctionCallArgumentList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingClosure, ClosureExpr_ord, true, false, false, false, false);
        putSimpleEntity(SubscriptExpr_ord, "SubscriptExpr", SubscriptExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.calledExpression, Expr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftBracket, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.argumentList, FunctionCallArgumentList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightBracket, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingClosure, ClosureExpr_ord, true, false, false, false, false);
        putSimpleEntity(OptionalChainingExpr_ord, "OptionalChainingExpr", OptionalChainingExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.expression, Expr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.questionMark, Token_ord);
        putSimpleEntity(ForcedValueExpr_ord, "ForcedValueExpr", ForcedValueExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.expression, Expr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.exclamationMark, Token_ord);
        putSimpleEntity(PostfixUnaryExpr_ord, "PostfixUnaryExpr", PostfixUnaryExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.expression, Expr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.operatorToken, Token_ord);
        putSimpleEntity(SpecializeExpr_ord, "SpecializeExpr", SpecializeExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.expression, Expr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericArgumentClause, GenericArgumentClause_ord);
        putSimpleEntity(StringSegment_ord, "StringSegment", StringSegment.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.content, Token_ord);
        putSimpleEntity(ExpressionSegment_ord, "ExpressionSegment", ExpressionSegment.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.backslash, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.delimiter, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.expressions, FunctionCallArgumentList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord);
        putSimpleEntity(StringLiteralExpr_ord, "StringLiteralExpr", StringLiteralExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.openDelimiter, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.openQuote, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.segments, StringLiteralSegments_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.closeQuote, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.closeDelimiter, Token_ord, true, false, false, false, false);
        putSimpleEntity(KeyPathExpr_ord, "KeyPathExpr", KeyPathExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.backslash, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rootExpr, Expr_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.expression, Expr_ord);
        putSimpleEntity(KeyPathBaseExpr_ord, "KeyPathBaseExpr", KeyPathBaseExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.period, Token_ord);
        putSimpleEntity(ObjcNamePiece_ord, "ObjcNamePiece", ObjcNamePiece.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.name, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.dot, Token_ord, true, false, false, false, false);
        putCompositeEntity(ObjcName_ord, "ObjcName", ObjcName.class, false, ObjcNamePiece_ord, true, false);
        putSimpleEntity(ObjcKeyPathExpr_ord, "ObjcKeyPathExpr", ObjcKeyPathExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.keyPath, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.name, ObjcName_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord);
        putSimpleEntity(ObjcSelectorExpr_ord, "ObjcSelectorExpr", ObjcSelectorExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.poundSelector, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.kind, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.name, Expr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord);
        putSimpleEntity(EditorPlaceholderExpr_ord, "EditorPlaceholderExpr", EditorPlaceholderExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.identifier, Token_ord);
        putSimpleEntity(ObjectLiteralExpr_ord, "ObjectLiteralExpr", ObjectLiteralExpr.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.identifier, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.arguments, FunctionCallArgumentList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord);
        putSimpleEntity(TypeInitializerClause_ord, "TypeInitializerClause", TypeInitializerClause.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.equal, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.value, Type_ord);
        putSimpleEntity(TypealiasDecl_ord, "TypealiasDecl", TypealiasDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.modifiers, ModifierList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.typealiasKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.identifier, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericParameterClause, GenericParameterClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.initializer, TypeInitializerClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericWhereClause, GenericWhereClause_ord, true, false, false, false, false);
        putSimpleEntity(AssociatedtypeDecl_ord, "AssociatedtypeDecl", AssociatedtypeDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.modifiers, ModifierList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.associatedtypeKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.identifier, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.inheritanceClause, TypeInheritanceClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.initializer, TypeInitializerClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericWhereClause, GenericWhereClause_ord, true, false, false, false, false);
        putCompositeEntity(FunctionParameterList_ord, "FunctionParameterList", FunctionParameterList.class, false, FunctionParameter_ord, true, false);
        putSimpleEntity(ParameterClause_ord, "ParameterClause", ParameterClause.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.parameterList, FunctionParameterList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord);
        putSimpleEntity(ReturnClause_ord, "ReturnClause", ReturnClause.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.arrow, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.returnType, Type_ord);
        putSimpleEntity(FunctionSignature_ord, "FunctionSignature", FunctionSignature.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.input, ParameterClause_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.throwsOrRethrowsKeyword, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.output, ReturnClause_ord, true, false, false, false, false);
        putSimpleEntity(IfConfigClause_ord, "IfConfigClause", IfConfigClause.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.poundKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.condition, Expr_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.elements, Syntax_ord);
        putCompositeEntity(IfConfigClauseList_ord, "IfConfigClauseList", IfConfigClauseList.class, false, IfConfigClause_ord, true, false);
        putSimpleEntity(IfConfigDecl_ord, "IfConfigDecl", IfConfigDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.clauses, IfConfigClauseList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.poundEndif, Token_ord);
        putSimpleEntity(PoundErrorDecl_ord, "PoundErrorDecl", PoundErrorDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.poundError, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.message, StringLiteralExpr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord);
        putSimpleEntity(PoundWarningDecl_ord, "PoundWarningDecl", PoundWarningDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.poundWarning, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.message, StringLiteralExpr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord);
        putSimpleEntity(PoundSourceLocation_ord, "PoundSourceLocation", PoundSourceLocation.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.poundSourceLocation, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.args, PoundSourceLocationArgs_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord);
        putSimpleEntity(PoundSourceLocationArgs_ord, "PoundSourceLocationArgs", PoundSourceLocationArgs.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.fileArgLabel, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.fileArgColon, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.fileName, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.comma, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.lineArgLabel, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.lineArgColon, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.lineNumber, Token_ord);
        putSimpleEntity(DeclModifier_ord, "DeclModifier", DeclModifier.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.name, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.detailLeftParen, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.detail, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.detailRightParen, Token_ord, true, false, false, false, false);
        putSimpleEntity(InheritedType_ord, "InheritedType", InheritedType.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.typeName, Type_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putCompositeEntity(InheritedTypeList_ord, "InheritedTypeList", InheritedTypeList.class, false, InheritedType_ord, true, false);
        putSimpleEntity(TypeInheritanceClause_ord, "TypeInheritanceClause", TypeInheritanceClause.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.inheritedTypeCollection, InheritedTypeList_ord);
        putSimpleEntity(ClassDecl_ord, "ClassDecl", ClassDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.modifiers, ModifierList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.classKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.identifier, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericParameterClause, GenericParameterClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.inheritanceClause, TypeInheritanceClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericWhereClause, GenericWhereClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.members, MemberDeclBlock_ord);
        putSimpleEntity(StructDecl_ord, "StructDecl", StructDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.modifiers, ModifierList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.structKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.identifier, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericParameterClause, GenericParameterClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.inheritanceClause, TypeInheritanceClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericWhereClause, GenericWhereClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.members, MemberDeclBlock_ord);
        putSimpleEntity(ProtocolDecl_ord, "ProtocolDecl", ProtocolDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.modifiers, ModifierList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.protocolKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.identifier, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.inheritanceClause, TypeInheritanceClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericWhereClause, GenericWhereClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.members, MemberDeclBlock_ord);
        putSimpleEntity(ExtensionDecl_ord, "ExtensionDecl", ExtensionDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.modifiers, ModifierList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.extensionKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.extendedType, Type_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.inheritanceClause, TypeInheritanceClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericWhereClause, GenericWhereClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.members, MemberDeclBlock_ord);
        putSimpleEntity(MemberDeclBlock_ord, "MemberDeclBlock", MemberDeclBlock.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftBrace, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.members, MemberDeclList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightBrace, Token_ord);
        putCompositeEntity(MemberDeclList_ord, "MemberDeclList", MemberDeclList.class, false, MemberDeclListItem_ord, true, false);
        putSimpleEntity(MemberDeclListItem_ord, "MemberDeclListItem", MemberDeclListItem.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.decl, Decl_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.semicolon, Token_ord, true, false, false, false, false);
        putSimpleEntity(SourceFile_ord, "SourceFile", SourceFile.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.statements, CodeBlockItemList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.eofToken, Token_ord);
        putSimpleEntity(InitializerClause_ord, "InitializerClause", InitializerClause.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.equal, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.value, Expr_ord);
        putSimpleEntity(FunctionParameter_ord, "FunctionParameter", FunctionParameter.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.firstName, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.secondName, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.type, Type_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.ellipsis, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.defaultArgument, InitializerClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putCompositeEntity(ModifierList_ord, "ModifierList", ModifierList.class, false, DeclModifier_ord, true, false);
        putSimpleEntity(FunctionDecl_ord, "FunctionDecl", FunctionDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.modifiers, ModifierList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.funcKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.identifier, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericParameterClause, GenericParameterClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.signature, FunctionSignature_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericWhereClause, GenericWhereClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.body, CodeBlock_ord, true, false, false, false, false);
        putSimpleEntity(InitializerDecl_ord, "InitializerDecl", InitializerDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.modifiers, ModifierList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.initKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.optionalMark, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericParameterClause, GenericParameterClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.parameters, ParameterClause_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.throwsOrRethrowsKeyword, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericWhereClause, GenericWhereClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.body, CodeBlock_ord, true, false, false, false, false);
        putSimpleEntity(DeinitializerDecl_ord, "DeinitializerDecl", DeinitializerDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.modifiers, ModifierList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.deinitKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.body, CodeBlock_ord);
        putSimpleEntity(SubscriptDecl_ord, "SubscriptDecl", SubscriptDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.modifiers, ModifierList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.subscriptKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericParameterClause, GenericParameterClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.indices, ParameterClause_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.result, ReturnClause_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericWhereClause, GenericWhereClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.accessor, Syntax_ord, true, false, false, false, false);
        putSimpleEntity(AccessLevelModifier_ord, "AccessLevelModifier", AccessLevelModifier.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.name, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.modifier, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord, true, false, false, false, false);
        putSimpleEntity(AccessPathComponent_ord, "AccessPathComponent", AccessPathComponent.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.name, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingDot, Token_ord, true, false, false, false, false);
        putCompositeEntity(AccessPath_ord, "AccessPath", AccessPath.class, false, AccessPathComponent_ord, true, false);
        putSimpleEntity(ImportDecl_ord, "ImportDecl", ImportDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.modifiers, ModifierList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.importTok, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.importKind, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.path, AccessPath_ord);
        putSimpleEntity(AccessorParameter_ord, "AccessorParameter", AccessorParameter.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.name, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord);
        putSimpleEntity(AccessorDecl_ord, "AccessorDecl", AccessorDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.modifier, DeclModifier_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.accessorKind, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.parameter, AccessorParameter_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.body, CodeBlock_ord, true, false, false, false, false);
        putCompositeEntity(AccessorList_ord, "AccessorList", AccessorList.class, false, AccessorDecl_ord, true, false);
        putSimpleEntity(AccessorBlock_ord, "AccessorBlock", AccessorBlock.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftBrace, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.accessors, AccessorList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightBrace, Token_ord);
        putSimpleEntity(PatternBinding_ord, "PatternBinding", PatternBinding.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.pattern, Pattern_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.typeAnnotation, TypeAnnotation_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.initializer, InitializerClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.accessor, Syntax_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putCompositeEntity(PatternBindingList_ord, "PatternBindingList", PatternBindingList.class, false, PatternBinding_ord, true, false);
        putSimpleEntity(VariableDecl_ord, "VariableDecl", VariableDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.modifiers, ModifierList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.letOrVarKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.bindings, PatternBindingList_ord);
        putSimpleEntity(EnumCaseElement_ord, "EnumCaseElement", EnumCaseElement.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.identifier, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.associatedValue, ParameterClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.rawValue, InitializerClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putCompositeEntity(EnumCaseElementList_ord, "EnumCaseElementList", EnumCaseElementList.class, false, EnumCaseElement_ord, true, false);
        putSimpleEntity(EnumCaseDecl_ord, "EnumCaseDecl", EnumCaseDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.modifiers, ModifierList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.caseKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.elements, EnumCaseElementList_ord);
        putSimpleEntity(EnumDecl_ord, "EnumDecl", EnumDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.modifiers, ModifierList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.enumKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.identifier, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericParameters, GenericParameterClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.inheritanceClause, TypeInheritanceClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericWhereClause, GenericWhereClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.members, MemberDeclBlock_ord);
        putSimpleEntity(OperatorDecl_ord, "OperatorDecl", OperatorDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.modifiers, ModifierList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.operatorKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.identifier, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.operatorPrecedenceAndTypes, OperatorPrecedenceAndTypes_ord, true, false, false, false, false);
        putCompositeEntity(IdentifierList_ord, "IdentifierList", IdentifierList.class, false, Token_ord, true, false);
        putSimpleEntity(OperatorPrecedenceAndTypes_ord, "OperatorPrecedenceAndTypes", OperatorPrecedenceAndTypes.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.precedenceGroupAndDesignatedTypes, IdentifierList_ord);
        putSimpleEntity(PrecedenceGroupDecl_ord, "PrecedenceGroupDecl", PrecedenceGroupDecl.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.modifiers, ModifierList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.precedencegroupKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.identifier, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftBrace, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.groupAttributes, PrecedenceGroupAttributeList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightBrace, Token_ord);
        putSimpleEntity(AbstractPrecedenceGroupAttribute_ord, "AbstractPrecedenceGroupAttribute", AbstractPrecedenceGroupAttribute.class, true, PrecedenceGroupAssignment_ord, PrecedenceGroupRelation_ord, PrecedenceGroupAssociativity_ord);
        putCompositeEntity(PrecedenceGroupAttributeList_ord, "PrecedenceGroupAttributeList", PrecedenceGroupAttributeList.class, false, AbstractPrecedenceGroupAttribute_ord, true, false);
        putSimpleEntity(PrecedenceGroupRelation_ord, "PrecedenceGroupRelation", PrecedenceGroupRelation.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.higherThanOrLowerThan, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.otherNames, PrecedenceGroupNameList_ord);
        putCompositeEntity(PrecedenceGroupNameList_ord, "PrecedenceGroupNameList", PrecedenceGroupNameList.class, false, PrecedenceGroupNameElement_ord, true, false);
        putSimpleEntity(PrecedenceGroupNameElement_ord, "PrecedenceGroupNameElement", PrecedenceGroupNameElement.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.name, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putSimpleEntity(PrecedenceGroupAssignment_ord, "PrecedenceGroupAssignment", PrecedenceGroupAssignment.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.assignmentKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.flag, Token_ord);
        putSimpleEntity(PrecedenceGroupAssociativity_ord, "PrecedenceGroupAssociativity", PrecedenceGroupAssociativity.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.associativityKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.value, Token_ord);
        putCompositeEntity(TokenList_ord, "TokenList", TokenList.class, false, Token_ord, true, false);
        putSimpleEntity(CustomAttribute_ord, "CustomAttribute", CustomAttribute.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.atSignToken, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributeName, Type_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.argumentList, FunctionCallArgumentList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord, true, false, false, false, false);
        putSimpleEntity(Attribute_ord, "Attribute", Attribute.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.atSignToken, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributeName, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.argument, Syntax_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord, true, false, false, false, false);
        putSimpleEntity(AbstractAttribute_ord, "AbstractAttribute", AbstractAttribute.class, true, Attribute_ord, CustomAttribute_ord);
        putCompositeEntity(AttributeList_ord, "AttributeList", AttributeList.class, false, AbstractAttribute_ord, true, false);
        putSimpleEntity(AbstractSpecializeAttribute_ord, "AbstractSpecializeAttribute", AbstractSpecializeAttribute.class, true, GenericWhereClause_ord, LabeledSpecializeEntry_ord);
        putCompositeEntity(SpecializeAttributeSpecList_ord, "SpecializeAttributeSpecList", SpecializeAttributeSpecList.class, false, AbstractSpecializeAttribute_ord, true, false);
        putSimpleEntity(LabeledSpecializeEntry_ord, "LabeledSpecializeEntry", LabeledSpecializeEntry.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.label, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.value, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putSimpleEntity(NamedAttributeStringArgument_ord, "NamedAttributeStringArgument", NamedAttributeStringArgument.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.nameTok, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.stringOrDeclname, Syntax_ord);
        putSimpleEntity(DeclName_ord, "DeclName", DeclName.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.declBaseName, Syntax_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.declNameArguments, DeclNameArguments_ord, true, false, false, false, false);
        putSimpleEntity(ImplementsAttributeArguments_ord, "ImplementsAttributeArguments", ImplementsAttributeArguments.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.type, SimpleTypeIdentifier_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.comma, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.declBaseName, Syntax_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.declNameArguments, DeclNameArguments_ord, true, false, false, false, false);
        putSimpleEntity(ObjCSelectorPiece_ord, "ObjCSelectorPiece", ObjCSelectorPiece.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.name, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord, true, false, false, false, false);
        putCompositeEntity(ObjCSelector_ord, "ObjCSelector", ObjCSelector.class, false, ObjCSelectorPiece_ord, true, false);
        putSimpleEntity(ContinueStmt_ord, "ContinueStmt", ContinueStmt.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.continueKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.label, Token_ord, true, false, false, false, false);
        putSimpleEntity(WhileStmt_ord, "WhileStmt", WhileStmt.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.labelName, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.labelColon, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.whileKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.conditions, ConditionElementList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.body, CodeBlock_ord);
        putSimpleEntity(DeferStmt_ord, "DeferStmt", DeferStmt.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.deferKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.body, CodeBlock_ord);
        putSimpleEntity(AbstractSwitchCase_ord, "AbstractSwitchCase", AbstractSwitchCase.class, true, IfConfigDecl_ord, SwitchCase_ord);
        putCompositeEntity(SwitchCaseList_ord, "SwitchCaseList", SwitchCaseList.class, false, AbstractSwitchCase_ord, true, false);
        putSimpleEntity(RepeatWhileStmt_ord, "RepeatWhileStmt", RepeatWhileStmt.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.labelName, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.labelColon, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.repeatKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.body, CodeBlock_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.whileKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.condition, Expr_ord);
        putSimpleEntity(GuardStmt_ord, "GuardStmt", GuardStmt.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.guardKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.conditions, ConditionElementList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.elseKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.body, CodeBlock_ord);
        putSimpleEntity(WhereClause_ord, "WhereClause", WhereClause.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.whereKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.guardResult, Expr_ord);
        putSimpleEntity(ForInStmt_ord, "ForInStmt", ForInStmt.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.labelName, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.labelColon, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.forKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.caseKeyword, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.pattern, Pattern_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.typeAnnotation, TypeAnnotation_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.inKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.sequenceExpr, Expr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.whereClause, WhereClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.body, CodeBlock_ord);
        putSimpleEntity(SwitchStmt_ord, "SwitchStmt", SwitchStmt.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.labelName, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.labelColon, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.switchKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.expression, Expr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftBrace, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.cases, SwitchCaseList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightBrace, Token_ord);
        putCompositeEntity(CatchClauseList_ord, "CatchClauseList", CatchClauseList.class, false, CatchClause_ord, true, false);
        putSimpleEntity(DoStmt_ord, "DoStmt", DoStmt.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.labelName, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.labelColon, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.doKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.body, CodeBlock_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.catchClauses, CatchClauseList_ord, true, false, false, false, false);
        putSimpleEntity(ReturnStmt_ord, "ReturnStmt", ReturnStmt.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.returnKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.expression, Expr_ord, true, false, false, false, false);
        putSimpleEntity(YieldStmt_ord, "YieldStmt", YieldStmt.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.yieldKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.yields, Syntax_ord);
        putSimpleEntity(YieldList_ord, "YieldList", YieldList.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.elementList, ExprList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord);
        putSimpleEntity(FallthroughStmt_ord, "FallthroughStmt", FallthroughStmt.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.fallthroughKeyword, Token_ord);
        putSimpleEntity(BreakStmt_ord, "BreakStmt", BreakStmt.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.breakKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.label, Token_ord, true, false, false, false, false);
        putCompositeEntity(CaseItemList_ord, "CaseItemList", CaseItemList.class, false, CaseItem_ord, true, false);
        putSimpleEntity(ConditionElement_ord, "ConditionElement", ConditionElement.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.condition, Syntax_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putSimpleEntity(AvailabilityCondition_ord, "AvailabilityCondition", AvailabilityCondition.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.poundAvailableKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.availabilitySpec, AvailabilitySpecList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord);
        putSimpleEntity(MatchingPatternCondition_ord, "MatchingPatternCondition", MatchingPatternCondition.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.caseKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.pattern, Pattern_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.typeAnnotation, TypeAnnotation_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.initializer, InitializerClause_ord);
        putSimpleEntity(OptionalBindingCondition_ord, "OptionalBindingCondition", OptionalBindingCondition.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.letOrVarKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.pattern, Pattern_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.typeAnnotation, TypeAnnotation_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.initializer, InitializerClause_ord);
        putCompositeEntity(ConditionElementList_ord, "ConditionElementList", ConditionElementList.class, false, ConditionElement_ord, true, false);
        putSimpleEntity(ThrowStmt_ord, "ThrowStmt", ThrowStmt.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.throwKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.expression, Expr_ord);
        putSimpleEntity(IfStmt_ord, "IfStmt", IfStmt.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.labelName, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.labelColon, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.ifKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.conditions, ConditionElementList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.body, CodeBlock_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.elseKeyword, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.elseBody, Syntax_ord, true, false, false, false, false);
        putSimpleEntity(SwitchCase_ord, "SwitchCase", SwitchCase.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.unknownAttr, Attribute_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.label, Syntax_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.statements, CodeBlockItemList_ord);
        putSimpleEntity(SwitchDefaultLabel_ord, "SwitchDefaultLabel", SwitchDefaultLabel.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.defaultKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord);
        putSimpleEntity(CaseItem_ord, "CaseItem", CaseItem.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.pattern, Pattern_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.whereClause, WhereClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putSimpleEntity(SwitchCaseLabel_ord, "SwitchCaseLabel", SwitchCaseLabel.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.caseKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.caseItems, CaseItemList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord);
        putSimpleEntity(CatchClause_ord, "CatchClause", CatchClause.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.catchKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.pattern, Pattern_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.whereClause, WhereClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.body, CodeBlock_ord);
        putSimpleEntity(PoundAssertStmt_ord, "PoundAssertStmt", PoundAssertStmt.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.poundAssert, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.condition, Expr_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.comma, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.message, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord);
        putSimpleEntity(GenericWhereClause_ord, "GenericWhereClause", GenericWhereClause.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.whereKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.requirementList, GenericRequirementList_ord);
        putSimpleEntity(AbstractGenericRequirement_ord, "AbstractGenericRequirement", AbstractGenericRequirement.class, true, SameTypeRequirement_ord, ConformanceRequirement_ord);
        putCompositeEntity(GenericRequirementList_ord, "GenericRequirementList", GenericRequirementList.class, false, AbstractGenericRequirement_ord, true, false);
        putSimpleEntity(SameTypeRequirement_ord, "SameTypeRequirement", SameTypeRequirement.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftTypeIdentifier, Type_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.equalityToken, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightTypeIdentifier, Type_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putCompositeEntity(GenericParameterList_ord, "GenericParameterList", GenericParameterList.class, false, GenericParameter_ord, true, false);
        putSimpleEntity(GenericParameter_ord, "GenericParameter", GenericParameter.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.name, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.inheritedType, Type_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putSimpleEntity(GenericParameterClause_ord, "GenericParameterClause", GenericParameterClause.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftAngleBracket, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericParameterList, GenericParameterList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightAngleBracket, Token_ord);
        putSimpleEntity(ConformanceRequirement_ord, "ConformanceRequirement", ConformanceRequirement.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftTypeIdentifier, Type_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightTypeIdentifier, Type_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putSimpleEntity(SimpleTypeIdentifier_ord, "SimpleTypeIdentifier", SimpleTypeIdentifier.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.name, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericArgumentClause, GenericArgumentClause_ord, true, false, false, false, false);
        putSimpleEntity(MemberTypeIdentifier_ord, "MemberTypeIdentifier", MemberTypeIdentifier.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.baseType, Type_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.period, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.name, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.genericArgumentClause, GenericArgumentClause_ord, true, false, false, false, false);
        putSimpleEntity(ClassRestrictionType_ord, "ClassRestrictionType", ClassRestrictionType.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.classKeyword, Token_ord);
        putSimpleEntity(ArrayType_ord, "ArrayType", ArrayType.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftSquareBracket, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.elementType, Type_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightSquareBracket, Token_ord);
        putSimpleEntity(DictionaryType_ord, "DictionaryType", DictionaryType.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftSquareBracket, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.keyType, Type_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.valueType, Type_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightSquareBracket, Token_ord);
        putSimpleEntity(MetatypeType_ord, "MetatypeType", MetatypeType.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.baseType, Type_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.period, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.typeOrProtocol, Token_ord);
        putSimpleEntity(OptionalType_ord, "OptionalType", OptionalType.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.wrappedType, Type_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.questionMark, Token_ord);
        putSimpleEntity(SomeType_ord, "SomeType", SomeType.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.someSpecifier, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.baseType, Type_ord);
        putSimpleEntity(ImplicitlyUnwrappedOptionalType_ord, "ImplicitlyUnwrappedOptionalType", ImplicitlyUnwrappedOptionalType.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.wrappedType, Type_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.exclamationMark, Token_ord);
        putSimpleEntity(CompositionTypeElement_ord, "CompositionTypeElement", CompositionTypeElement.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.type, Type_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.ampersand, Token_ord, true, false, false, false, false);
        putCompositeEntity(CompositionTypeElementList_ord, "CompositionTypeElementList", CompositionTypeElementList.class, false, CompositionTypeElement_ord, true, false);
        putSimpleEntity(CompositionType_ord, "CompositionType", CompositionType.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.elements, CompositionTypeElementList_ord);
        putSimpleEntity(TupleTypeElement_ord, "TupleTypeElement", TupleTypeElement.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.inOut, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.name, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.secondName, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.type, Type_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.ellipsis, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.initializer, InitializerClause_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putCompositeEntity(TupleTypeElementList_ord, "TupleTypeElementList", TupleTypeElementList.class, false, TupleTypeElement_ord, true, false);
        putSimpleEntity(TupleType_ord, "TupleType", TupleType.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.elements, TupleTypeElementList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord);
        putSimpleEntity(FunctionType_ord, "FunctionType", FunctionType.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.arguments, TupleTypeElementList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.throwsOrRethrowsKeyword, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.arrow, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.returnType, Type_ord);
        putSimpleEntity(AttributedType_ord, "AttributedType", AttributedType.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.specifier, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.attributes, AttributeList_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.baseType, Type_ord);
        putCompositeEntity(GenericArgumentList_ord, "GenericArgumentList", GenericArgumentList.class, false, GenericArgument_ord, true, false);
        putSimpleEntity(GenericArgument_ord, "GenericArgument", GenericArgument.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.argumentType, Type_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putSimpleEntity(GenericArgumentClause_ord, "GenericArgumentClause", GenericArgumentClause.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftAngleBracket, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.arguments, GenericArgumentList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightAngleBracket, Token_ord);
        putSimpleEntity(TypeAnnotation_ord, "TypeAnnotation", TypeAnnotation.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.type, Type_ord);
        putSimpleEntity(EnumCasePattern_ord, "EnumCasePattern", EnumCasePattern.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.type, Type_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.period, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.caseName, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.associatedTuple, TuplePattern_ord, true, false, false, false, false);
        putSimpleEntity(IsTypePattern_ord, "IsTypePattern", IsTypePattern.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.isKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.type, Type_ord);
        putSimpleEntity(OptionalPattern_ord, "OptionalPattern", OptionalPattern.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.subPattern, Pattern_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.questionMark, Token_ord);
        putSimpleEntity(IdentifierPattern_ord, "IdentifierPattern", IdentifierPattern.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.identifier, Token_ord);
        putSimpleEntity(AsTypePattern_ord, "AsTypePattern", AsTypePattern.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.pattern, Pattern_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.asKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.type, Type_ord);
        putSimpleEntity(TuplePattern_ord, "TuplePattern", TuplePattern.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.leftParen, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.elements, TuplePatternElementList_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.rightParen, Token_ord);
        putSimpleEntity(WildcardPattern_ord, "WildcardPattern", WildcardPattern.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.wildcard, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.typeAnnotation, TypeAnnotation_ord, true, false, false, false, false);
        putSimpleEntity(TuplePatternElement_ord, "TuplePatternElement", TuplePatternElement.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.labelName, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.labelColon, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.pattern, Pattern_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putSimpleEntity(ExpressionPattern_ord, "ExpressionPattern", ExpressionPattern.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.expression, Expr_ord);
        putCompositeEntity(TuplePatternElementList_ord, "TuplePatternElementList", TuplePatternElementList.class, false, TuplePatternElement_ord, true, false);
        putSimpleEntity(ValueBindingPattern_ord, "ValueBindingPattern", ValueBindingPattern.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.letOrVarKeyword, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.valuePattern, Pattern_ord);
        putCompositeEntity(AvailabilitySpecList_ord, "AvailabilitySpecList", AvailabilitySpecList.class, false, AvailabilityArgument_ord, true, false);
        putSimpleEntity(AvailabilityArgument_ord, "AvailabilityArgument", AvailabilityArgument.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.entry, Syntax_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.trailingComma, Token_ord, true, false, false, false, false);
        putSimpleEntity(AvailabilityLabeledArgument_ord, "AvailabilityLabeledArgument", AvailabilityLabeledArgument.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.label, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.colon, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.value, Syntax_ord);
        putSimpleEntity(AvailabilityVersionRestriction_ord, "AvailabilityVersionRestriction", AvailabilityVersionRestriction.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.platform, Token_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.version, VersionTuple_ord);
        putSimpleEntity(VersionTuple_ord, "VersionTuple", VersionTuple.class, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.majorMinor, Syntax_ord).withFeature(SwiftSyntaxFeatureDescriptorEnum.patchPeriod, Token_ord, true, false, false, false, false).withFeature(SwiftSyntaxFeatureDescriptorEnum.patchVersion, Token_ord, true, false, false, false, false);
        putDataEntity(TokenKind_ord, "TokenKind", TokenKind.class, false, TokenKindEnum.Value.class);
        putDataEntity(Text_ord, "Text", Text.class, false, String.class);
        putCompositeEntity(Trivia_ord, "Trivia", Trivia.class, false, TriviaPiece_ord, true, false);
        putDataEntity(TriviaPiece_ord, "TriviaPiece", TriviaPiece.class, false, String.class);
        putDataEntity(SourcePresence_ord, "SourcePresence", SourcePresence.class, false, SourcePresenceEnum.Value.class);
    }
}
