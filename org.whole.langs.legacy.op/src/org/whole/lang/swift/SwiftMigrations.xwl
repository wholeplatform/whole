<?xml version="1.0"?>
<migrations:Library xmlns:migrations="whole:org.whole.lang.migrations:MigrationsPatternsModel">
    <semantics:URI xmlns:semantics="http://lang.whole.org/Semantics" value="whole:org.whole.lang.swift:SwiftMigrations"/>
    <semantics:Namespace xmlns:semantics="http://lang.whole.org/Semantics" value="org.whole.lang.swift"/>
    <semantics:Name xmlns:semantics="http://lang.whole.org/Semantics" value="SwiftMigrations"/>
    <migrations:MigrationFunctions initialCapacity="2">
        <migrations:MigrationFunction>
            <actions:Label xmlns:actions="http://lang.whole.org/Actions" value="Migrate Swift Syntax to AST"/>
            <semantics:Name xmlns:semantics="http://lang.whole.org/Semantics" value="migrateSyntax"/>
            <migrations:MigrationRules initialCapacity="1">
                <migrations:MigrateLanguage>
                    <queries:LanguageTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel"/>
                    <queries:LanguageTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel"/>
                    <migrations:LanguageMigrationRules initialCapacity="103">
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#QuestionOrExclamationMarkEnum"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#questionOrExclamationMark"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TryExpr"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#IdentifierEnum"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#identifier"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#IdentifierExpr"/>
                                </queries:Some>
                                <queries:Some>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                    <queries:Or initialCapacity="2">
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="selfKeyword"/>
                                        </queries:EqualsStep>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="capitalSelfKeyword"/>
                                        </queries:EqualsStep>
                                    </queries:Or>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#Throws"/>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#throwsToken"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ArrowExpr"/>
                                </queries:Some>
                                <queries:Some>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="throwsKeyword"/>
                                    </queries:EqualsStep>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#BooleanLiteral"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#booleanLiteral"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#BooleanLiteralExpr"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#DotEnum"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#dot"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#MemberAccessExpr"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#QuestionOrExclamationMarkEnum"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#questionOrExclamationMark"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#AsExpr"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#WildcardMarker"/>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#name"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ClosureParam"/>
                                </queries:Some>
                                <queries:Some>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="wildcardKeyword"/>
                                    </queries:EqualsStep>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#Throws"/>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#throwsTok"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ClosureSignature"/>
                                </queries:Some>
                                <queries:Some>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="throwsKeyword"/>
                                    </queries:EqualsStep>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#OpenQuoteEnum"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#openQuote"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#StringLiteralExpr"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#KindValue"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ObjcSelectorExpr"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#PoundIdentifierEnum"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#poundIdentifier"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ObjectLiteralExpr"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#ThrowsOrRethrowsKeywordEnum"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#throwsOrRethrowsKeyword"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#FunctionSignature"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#PoundKeywordEnum"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#poundKeyword"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#IfConfigClause"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#NameValue"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#name"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#DeclModifier"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#WildcardMarker"/>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#firstName"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#FunctionParameter"/>
                                </queries:Some>
                                <queries:Some>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="wildcardKeyword"/>
                                    </queries:EqualsStep>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#WildcardMarker"/>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#secondName"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#FunctionParameter"/>
                                </queries:Some>
                                <queries:Some>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="wildcardKeyword"/>
                                    </queries:EqualsStep>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#Ellipsis"/>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ellipsis"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#FunctionParameter"/>
                                </queries:Some>
                                <queries:Some>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="ellipsis"/>
                                    </queries:EqualsStep>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#OptionalMarkEnum"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#optionalMark"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#InitializerDecl"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#ThrowsOrRethrowsKeywordEnum"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#throwsOrRethrowsKeyword"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#InitializerDecl"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#ImportKindEnum"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#importKind"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ImportDecl"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#AccessorKindValue"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#accessorKind"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#AccessorDecl"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#LetOrVarKeywordEnum"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#letOrVarKeyword"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#VariableDecl"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#HigherThanOrLowerThanValue"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#higherThanOrLowerThan"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#PrecedenceGroupRelation"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#FlagEnum"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#flag"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#PrecedenceGroupAssignment"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#ValueValue"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#value"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#PrecedenceGroupAssociativity"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#Case"/>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#caseKeyword"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ForInStmt"/>
                                </queries:Some>
                                <queries:Some>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="caseKeyword"/>
                                    </queries:EqualsStep>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#LetOrVarKeywordEnum"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#letOrVarKeyword"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#OptionalBindingCondition"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#NameEnum"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#name"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#SimpleTypeIdentifier"/>
                                </queries:Some>
                                <queries:Some>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                    <queries:Or initialCapacity="2">
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="capitalSelfKeyword"/>
                                        </queries:EqualsStep>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="anyKeyword"/>
                                        </queries:EqualsStep>
                                    </queries:Or>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#PeriodEnum"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#period"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#MemberTypeIdentifier"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#NameEnum"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#name"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#MemberTypeIdentifier"/>
                                </queries:Some>
                                <queries:Some>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                    <queries:Or initialCapacity="2">
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="capitalSelfKeyword"/>
                                        </queries:EqualsStep>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="anyKeyword"/>
                                        </queries:EqualsStep>
                                    </queries:Or>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#TypeOrProtocolValue"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#typeOrProtocol"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#MetatypeType"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#Inout"/>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#inOut"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TupleTypeElement"/>
                                </queries:Some>
                                <queries:Some>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="inoutKeyword"/>
                                    </queries:EqualsStep>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#WildcardMarker"/>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#name"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TupleTypeElement"/>
                                </queries:Some>
                                <queries:Some>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="wildcardKeyword"/>
                                    </queries:EqualsStep>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#WildcardMarker"/>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#secondName"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TupleTypeElement"/>
                                </queries:Some>
                                <queries:Some>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="wildcardKeyword"/>
                                    </queries:EqualsStep>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#Ellipsis"/>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ellipsis"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TupleTypeElement"/>
                                </queries:Some>
                                <queries:Some>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="ellipsis"/>
                                    </queries:EqualsStep>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#ThrowsOrRethrowsKeywordEnum"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#throwsOrRethrowsKeyword"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#FunctionType"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#SpecifierValue"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#specifier"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#AttributedType"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#SelfMarker"/>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#patternIdentifier"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#IdentifierPattern"/>
                                </queries:Some>
                                <queries:Some>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="selfKeyword"/>
                                    </queries:EqualsStep>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#LetOrVarKeywordEnum"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:AtFeatureTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#letOrVarKeyword"/>
                                <queries:Some>
                                    <queries:ParentStep/>
                                    <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ValueBindingPattern"/>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TupleExpr"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#TupleExpr"/>
                            <queries:Path xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:Filter>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#elementList"/>
                                    <queries:KindTest value="COMPOSITE"/>
                                </queries:Filter>
                                <queries:ChildStep/>
                            </queries:Path>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ArrayExpr"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#ArrayExpr"/>
                            <queries:Path xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:Filter>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#elements"/>
                                    <queries:KindTest value="COMPOSITE"/>
                                </queries:Filter>
                                <queries:ChildStep/>
                            </queries:Path>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#DictionaryExpr"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#DictionaryExpr"/>
                            <queries:Path xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:Filter>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#content"/>
                                    <queries:KindTest value="COMPOSITE"/>
                                </queries:Filter>
                                <queries:ChildStep/>
                            </queries:Path>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#SequenceExpr"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#SequenceExpr"/>
                            <queries:Path xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:Filter>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#elements"/>
                                    <queries:KindTest value="COMPOSITE"/>
                                </queries:Filter>
                                <queries:ChildStep/>
                            </queries:Path>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#YieldList"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#YieldList"/>
                            <queries:Path xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:Filter>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#elementList"/>
                                    <queries:KindTest value="COMPOSITE"/>
                                </queries:Filter>
                                <queries:ChildStep/>
                            </queries:Path>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ObjcKeyPathExpr"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#ObjcKeyPathExpr"/>
                            <queries:Path xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:Filter>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#name"/>
                                    <queries:KindTest value="COMPOSITE"/>
                                </queries:Filter>
                                <queries:ChildStep/>
                            </queries:Path>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#IfConfigDecl"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#IfConfigDecl"/>
                            <queries:Path xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:Filter>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#clauses"/>
                                    <queries:KindTest value="COMPOSITE"/>
                                </queries:Filter>
                                <queries:ChildStep/>
                            </queries:Path>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#AccessorBlock"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#AccessorBlock"/>
                            <queries:Path xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:Filter>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#accessors"/>
                                    <queries:KindTest value="COMPOSITE"/>
                                </queries:Filter>
                                <queries:ChildStep/>
                            </queries:Path>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#SwitchCaseLabel"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#SwitchCaseLabel"/>
                            <queries:Path xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:Filter>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#caseItems"/>
                                    <queries:KindTest value="COMPOSITE"/>
                                </queries:Filter>
                                <queries:ChildStep/>
                            </queries:Path>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#CompositionType"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#CompositionType"/>
                            <queries:Path xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:Filter>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#elements"/>
                                    <queries:KindTest value="COMPOSITE"/>
                                </queries:Filter>
                                <queries:ChildStep/>
                            </queries:Path>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#CodeBlockItem"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#item"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#CodeBlock"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#statements"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#DeclNameArgument"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#name"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#DeclNameArguments"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#arguments"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ArrayElement"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#expression"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ClosureCaptureSignature"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#items"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ClosureParam"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#name"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ParameterClause"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#parameterList"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ObjcNamePiece"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#name"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TypeInitializerClause"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#value"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ReturnClause"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#returnType"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#InheritedType"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#typeName"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TypeInheritanceClause"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#inheritedTypeCollection"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#MemberDeclBlock"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#members"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#MemberDeclListItem"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#decl"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#InitializerClause"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#value"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#AccessPathComponent"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#name"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#AccessorParameter"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#name"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#OperatorPrecedenceAndTypes"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#precedenceGroupAndDesignatedTypes"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#PrecedenceGroupNameElement"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#name"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#GenericWhereClause"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#requirementList"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ObjCSelectorPiece"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#name"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#WhereClause"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#guardResult"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ConditionElement"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#condition"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#GenericParameterClause"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#genericParameterList"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#GenericArgument"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#argumentType"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#GenericArgumentClause"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#arguments"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TypeAnnotation"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#type"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TuplePattern"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#elements"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#AvailabilityArgument"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#entry"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#BooleanLiteralExpr"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#booleanLiteral"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#FloatLiteralExpr"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#floatingDigits"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#IntegerLiteralExpr"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#digits"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#StringSegment"/>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#content"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#IdentifierExpr"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Path initialCapacity="2">
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#declNameArguments"/>
                                        <queries:ChildStep/>
                                        </queries:Path>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                    </queries:Some>
                                </queries:Not>
                            </queries:And>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#identifier"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#SimpleTypeIdentifier"/>
                                <queries:Not>
                                    <queries:Or initialCapacity="2">
                                        <queries:Some>
                                        <queries:Path initialCapacity="2">
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#genericArgumentClause"/>
                                        <queries:ChildStep/>
                                        </queries:Path>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </queries:Some>
                                        <queries:AtTypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#SimpleTypeIdentifier"/>
                                    </queries:Or>
                                </queries:Not>
                                <queries:Some>
                                    <queries:Path initialCapacity="2">
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#name"/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                    </queries:Path>
                                    <queries:Or initialCapacity="3">
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="identifier"/>
                                        </queries:EqualsStep>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="capitalSelfKeyword"/>
                                        </queries:EqualsStep>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="anyKeyword"/>
                                        </queries:EqualsStep>
                                    </queries:Or>
                                </queries:Some>
                            </queries:And>
                            <migrations:MigratePath>
                                <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#name"/>
                            </migrations:MigratePath>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TokenList"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#CaptureSpecifierEnum"/>
                            <queries:StringLiteral xmlns:queries="http://lang.whole.org/Queries" value="weak"/>
                            <queries:Some xmlns:queries="http://lang.whole.org/Queries">
                                <queries:Path initialCapacity="2">
                                    <queries:Filter>
                                        <queries:ChildStep/>
                                        <queries:IndexTest>
                                        <queries:IntLiteral value="0"/>
                                        </queries:IndexTest>
                                    </queries:Filter>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                                </queries:Path>
                                <queries:EqualsStep>
                                    <queries:StringLiteral value="weak"/>
                                </queries:EqualsStep>
                            </queries:Some>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TokenList"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#CaptureSpecifierEnum"/>
                            <queries:StringLiteral xmlns:queries="http://lang.whole.org/Queries" value="unowned(safe)"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:Some>
                                    <queries:Path initialCapacity="2">
                                        <queries:Filter>
                                        <queries:ChildStep/>
                                        <queries:IndexTest>
                                        <queries:IntLiteral value="2"/>
                                        </queries:IndexTest>
                                        </queries:Filter>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                                    </queries:Path>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="safe"/>
                                    </queries:EqualsStep>
                                </queries:Some>
                                <queries:Some>
                                    <queries:Path initialCapacity="2">
                                        <queries:Filter>
                                        <queries:ChildStep/>
                                        <queries:IndexTest>
                                        <queries:IntLiteral value="0"/>
                                        </queries:IndexTest>
                                        </queries:Filter>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                                    </queries:Path>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="unowned"/>
                                    </queries:EqualsStep>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TokenList"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#CaptureSpecifierEnum"/>
                            <queries:StringLiteral xmlns:queries="http://lang.whole.org/Queries" value="unowned(unsafe)"/>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:Some>
                                    <queries:Path initialCapacity="2">
                                        <queries:Filter>
                                        <queries:ChildStep/>
                                        <queries:IndexTest>
                                        <queries:IntLiteral value="2"/>
                                        </queries:IndexTest>
                                        </queries:Filter>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                                    </queries:Path>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="unsafe"/>
                                    </queries:EqualsStep>
                                </queries:Some>
                                <queries:Some>
                                    <queries:Path initialCapacity="2">
                                        <queries:Filter>
                                        <queries:ChildStep/>
                                        <queries:IndexTest>
                                        <queries:IntLiteral value="0"/>
                                        </queries:IndexTest>
                                        </queries:Filter>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                                    </queries:Path>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="unowned"/>
                                    </queries:EqualsStep>
                                </queries:Some>
                            </queries:And>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TokenList"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#CaptureSpecifierEnum"/>
                            <queries:StringLiteral xmlns:queries="http://lang.whole.org/Queries" value="unowned"/>
                            <queries:Some xmlns:queries="http://lang.whole.org/Queries">
                                <queries:Path initialCapacity="2">
                                    <queries:Filter>
                                        <queries:ChildStep/>
                                        <queries:IndexTest>
                                        <queries:IntLiteral value="0"/>
                                        </queries:IndexTest>
                                    </queries:Filter>
                                    <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                                </queries:Path>
                                <queries:EqualsStep>
                                    <queries:StringLiteral value="unowned"/>
                                </queries:EqualsStep>
                            </queries:Some>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ObjectLiteralExpr"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#ObjectLiteralExpr"/>
                            <migrations:MigrateFeatures initialCapacity="1">
                                <migrations:MigrateFeature>
                                    <migrations:MigratePath>
                                        <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#identifier"/>
                                    </migrations:MigratePath>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#poundIdentifier"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#IdentifierPattern"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#IdentifierPattern"/>
                            <migrations:MigrateFeatures initialCapacity="1">
                                <migrations:MigrateFeature>
                                    <migrations:MigratePath>
                                        <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#identifier"/>
                                    </migrations:MigratePath>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#patternIdentifier"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#FunctionDecl"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#FunctionDecl"/>
                            <migrations:MigrateFeatures initialCapacity="1">
                                <migrations:MigrateFeature>
                                    <migrations:MigratePath>
                                        <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#identifier"/>
                                    </migrations:MigratePath>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#functionIdentifier"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#OperatorDecl"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#OperatorDecl"/>
                            <migrations:MigrateFeatures initialCapacity="1">
                                <migrations:MigrateFeature>
                                    <migrations:MigratePath>
                                        <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#identifier"/>
                                    </migrations:MigratePath>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#operatorIdentifier"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#IntegerLiteral"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:Some xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                <queries:EqualsStep>
                                    <queries:StringLiteral value="integerLiteral"/>
                                </queries:EqualsStep>
                            </queries:Some>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#FloatingLiteral"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:Some xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                <queries:EqualsStep>
                                    <queries:StringLiteral value="floatingLiteral"/>
                                </queries:EqualsStep>
                            </queries:Some>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#StringLiteral"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:Some xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                <queries:EqualsStep>
                                    <queries:StringLiteral value="stringLiteral"/>
                                </queries:EqualsStep>
                            </queries:Some>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#Identifier"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:Some xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                <queries:EqualsStep>
                                    <queries:StringLiteral value="identifier"/>
                                </queries:EqualsStep>
                            </queries:Some>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#BinaryOperator"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:Some xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                <queries:Or initialCapacity="2">
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="unspacedBinaryOperator"/>
                                    </queries:EqualsStep>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="spacedBinaryOperator"/>
                                    </queries:EqualsStep>
                                </queries:Or>
                            </queries:Some>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#PostfixOperator"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:Some xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                <queries:EqualsStep>
                                    <queries:StringLiteral value="postfixOperator"/>
                                </queries:EqualsStep>
                            </queries:Some>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#PrefixOperator"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:Some xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                <queries:EqualsStep>
                                    <queries:StringLiteral value="prefixOperator"/>
                                </queries:EqualsStep>
                            </queries:Some>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#DollarIdentifier"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:Some xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                <queries:EqualsStep>
                                    <queries:StringLiteral value="dollarIdentifier"/>
                                </queries:EqualsStep>
                            </queries:Some>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#RawStringDelimiter"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:Some xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                <queries:EqualsStep>
                                    <queries:StringLiteral value="rawStringDelimiter"/>
                                </queries:EqualsStep>
                            </queries:Some>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Token"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#StringLiteral"/>
                            <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#text"/>
                            <queries:Some xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#kind"/>
                                <queries:EqualsStep>
                                    <queries:StringLiteral value="stringSegment"/>
                                </queries:EqualsStep>
                            </queries:Some>
                        </migrations:MigrateEntity>
                    </migrations:LanguageMigrationRules>
                    <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                </migrations:MigrateLanguage>
            </migrations:MigrationRules>
        </migrations:MigrationFunction>
        <migrations:MigrationFunction>
            <actions:Label xmlns:actions="http://lang.whole.org/Actions" value="Migrate Swift AST to Syntax"/>
            <semantics:Name xmlns:semantics="http://lang.whole.org/Semantics" value="migrateAST"/>
            <migrations:MigrationRules initialCapacity="1">
                <migrations:MigrateLanguage>
                    <queries:LanguageTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel"/>
                    <queries:LanguageTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel"/>
                    <migrations:LanguageMigrationRules initialCapacity="105">
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#CodeBlockItem"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="1">
                                    <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#CodeBlockItemList"/>
                                    </queries:Some>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#CodeBlockItem"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="item"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#CodeBlock"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="15">
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#FunctionDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#body"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#InitializerDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#body"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#DeinitializerDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#body"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#AccessorDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#body"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#WhileStmt"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#body"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#DeferStmt"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#body"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#RepeatWhileStmt"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#body"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#GuardStmt"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#body"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ForInStmt"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#body"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#DoStmt"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#body"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#IfStmt"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#body"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#CatchClause"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#body"/>
                                    </queries:And>
                                    <queries:And initialCapacity="3">
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#CodeBlockItemList"/>
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#SubscriptDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#accessor"/>
                                    </queries:And>
                                    <queries:And initialCapacity="3">
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#CodeBlockItemList"/>
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#PatternBinding"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#accessor"/>
                                    </queries:And>
                                    <queries:And initialCapacity="3">
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#CodeBlockItemList"/>
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#IfStmt"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#elseBody"/>
                                    </queries:And>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#CodeBlock"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="statements"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#DeclNameArgument"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="1">
                                    <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#DeclNameArgumentList"/>
                                    </queries:Some>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#DeclNameArgument"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="name"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#DeclNameArguments"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="4">
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#IdentifierExpr"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#declNameArguments"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#MemberAccessExpr"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#declNameArguments"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ImplementsAttributeArguments"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#declNameArguments"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#DeclName"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#declNameArguments"/>
                                    </queries:And>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#DeclNameArguments"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="arguments"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ArrayElement"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="1">
                                    <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ArrayExpr"/>
                                    </queries:Some>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ArrayElement"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="expression"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ClosureCaptureSignature"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="1">
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ClosureSignature"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#capture"/>
                                    </queries:And>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ClosureCaptureSignature"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="items"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ClosureParam"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="1">
                                    <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ClosureParamList"/>
                                    </queries:Some>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ClosureParam"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="name"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ParameterClause"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="5">
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#FunctionSignature"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#input"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#InitializerDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#parameters"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#SubscriptDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#indices"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#EnumCaseElement"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#associatedValue"/>
                                    </queries:And>
                                    <queries:And initialCapacity="3">
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#FunctionParameterList"/>
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ClosureSignature"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#input"/>
                                    </queries:And>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ParameterClause"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="parameterList"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ObjcNamePiece"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="1">
                                    <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ObjcKeyPathExpr"/>
                                    </queries:Some>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ObjcNamePiece"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="name"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TypeInitializerClause"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="2">
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#TypealiasDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#initializer"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#AssociatedtypeDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#initializer"/>
                                    </queries:And>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TypeInitializerClause"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="value"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ReturnClause"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="3">
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ClosureSignature"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#output"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#FunctionSignature"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#output"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#SubscriptDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#result"/>
                                    </queries:And>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ReturnClause"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="returnType"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#InheritedType"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="1">
                                    <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#InheritedTypeList"/>
                                    </queries:Some>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#InheritedType"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="typeName"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TypeInheritanceClause"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="6">
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#AssociatedtypeDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#inheritanceClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ClassDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#inheritanceClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#StructDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#inheritanceClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ProtocolDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#inheritanceClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ExtensionDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#inheritanceClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#EnumDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#inheritanceClause"/>
                                    </queries:And>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TypeInheritanceClause"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="inheritedTypeCollection"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#MemberDeclBlock"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="5">
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ClassDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#members"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#StructDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#members"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ProtocolDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#members"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ExtensionDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#members"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#EnumDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#members"/>
                                    </queries:And>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#MemberDeclBlock"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="members"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#MemberDeclListItem"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="1">
                                    <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#MemberDeclList"/>
                                    </queries:Some>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#MemberDeclListItem"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="decl"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#InitializerClause"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="6">
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#FunctionParameter"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#defaultArgument"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#PatternBinding"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#initializer"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#EnumCaseElement"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#rawValue"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#MatchingPatternCondition"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#initializer"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#OptionalBindingCondition"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#initializer"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#TupleTypeElement"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#initializer"/>
                                    </queries:And>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#InitializerClause"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="value"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#AccessPathComponent"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="1">
                                    <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#AccessPath"/>
                                    </queries:Some>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#AccessPathComponent"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="name"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#AccessorParameter"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="1">
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#AccessorDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#parameter"/>
                                    </queries:And>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#AccessorParameter"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="name"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#OperatorPrecedenceAndTypes"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="1">
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#OperatorDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#operatorPrecedenceAndTypes"/>
                                    </queries:And>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#OperatorPrecedenceAndTypes"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="precedenceGroupAndDesignatedTypes"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#PrecedenceGroupNameElement"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="1">
                                    <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#PrecedenceGroupNameList"/>
                                    </queries:Some>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#PrecedenceGroupNameElement"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="name"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#GenericWhereClause"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="11">
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#TypealiasDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericWhereClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#AssociatedtypeDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericWhereClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ClassDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericWhereClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#StructDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericWhereClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ProtocolDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericWhereClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ExtensionDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericWhereClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#FunctionDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericWhereClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#InitializerDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericWhereClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#SubscriptDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericWhereClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#EnumDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericWhereClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#GenericRequirementList"/>
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#SpecializeAttributeSpecList"/>
                                        </queries:Some>
                                    </queries:And>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#GenericWhereClause"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="requirementList"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ObjCSelectorPiece"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="1">
                                    <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ObjCSelector"/>
                                    </queries:Some>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ObjCSelectorPiece"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="name"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#WhereClause"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="3">
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ForInStmt"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#whereClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#CaseItem"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#whereClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#CatchClause"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#whereClause"/>
                                    </queries:And>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#WhereClause"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="guardResult"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ConditionElement"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="1">
                                    <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ConditionElementList"/>
                                    </queries:Some>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ConditionElement"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="condition"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#GenericParameterClause"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="7">
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#TypealiasDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericParameterClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ClassDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericParameterClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#StructDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericParameterClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#FunctionDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericParameterClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#InitializerDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericParameterClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#SubscriptDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericParameterClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#EnumDecl"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericParameters"/>
                                    </queries:And>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#GenericParameterClause"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="genericParameterList"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#GenericArgument"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="1">
                                    <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#GenericArgumentList"/>
                                    </queries:Some>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#GenericArgument"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="argumentType"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#GenericArgumentClause"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="4">
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#SymbolicReferenceExpr"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericArgumentClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#SpecializeExpr"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericArgumentClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#SimpleTypeIdentifier"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericArgumentClause"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#MemberTypeIdentifier"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#genericArgumentClause"/>
                                    </queries:And>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#GenericArgumentClause"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="arguments"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TypeAnnotation"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="5">
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#PatternBinding"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#typeAnnotation"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ForInStmt"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#typeAnnotation"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#MatchingPatternCondition"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#typeAnnotation"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#OptionalBindingCondition"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#typeAnnotation"/>
                                    </queries:And>
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#WildcardPattern"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#typeAnnotation"/>
                                    </queries:And>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TypeAnnotation"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="type"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TuplePattern"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="12">
                                    <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#EnumCasePattern"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#associatedTuple"/>
                                    </queries:And>
                                    <queries:And initialCapacity="3">
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#TuplePatternElementList"/>
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#UnresolvedPatternExpr"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#pattern"/>
                                    </queries:And>
                                    <queries:And initialCapacity="3">
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#TuplePatternElementList"/>
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#PatternBinding"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#pattern"/>
                                    </queries:And>
                                    <queries:And initialCapacity="3">
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#TuplePatternElementList"/>
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ForInStmt"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#pattern"/>
                                    </queries:And>
                                    <queries:And initialCapacity="3">
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#TuplePatternElementList"/>
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#MatchingPatternCondition"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#pattern"/>
                                    </queries:And>
                                    <queries:And initialCapacity="3">
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#TuplePatternElementList"/>
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#OptionalBindingCondition"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#pattern"/>
                                    </queries:And>
                                    <queries:And initialCapacity="3">
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#TuplePatternElementList"/>
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#CaseItem"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#pattern"/>
                                    </queries:And>
                                    <queries:And initialCapacity="3">
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#TuplePatternElementList"/>
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#CatchClause"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#pattern"/>
                                    </queries:And>
                                    <queries:And initialCapacity="3">
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#TuplePatternElementList"/>
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#OptionalPattern"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#subPattern"/>
                                    </queries:And>
                                    <queries:And initialCapacity="3">
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#TuplePatternElementList"/>
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#AsTypePattern"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#pattern"/>
                                    </queries:And>
                                    <queries:And initialCapacity="3">
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#TuplePatternElementList"/>
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#TuplePatternElement"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#pattern"/>
                                    </queries:And>
                                    <queries:And initialCapacity="3">
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#TuplePatternElementList"/>
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#ValueBindingPattern"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#valuePattern"/>
                                    </queries:And>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TuplePattern"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="elements"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#AvailabilityArgument"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="1">
                                    <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#AvailabilitySpecList"/>
                                    </queries:Some>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#AvailabilityArgument"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="entry"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="4">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#BooleanLiteralExpr"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#BooleanLiteralEnum"/>
                                <queries:Not>
                                    <queries:Or initialCapacity="1">
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#booleanLiteral"/>
                                    </queries:Or>
                                </queries:Not>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#BooleanLiteralExpr"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="booleanLiteral"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="4">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#FloatLiteralExpr"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#FloatingLiteral"/>
                                <queries:Not>
                                    <queries:Or initialCapacity="4">
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#floatingDigits"/>
                                        <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#LabeledSpecializeEntry"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#value"/>
                                        </queries:And>
                                        <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#AvailabilityLabeledArgument"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#value"/>
                                        </queries:And>
                                        <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#VersionTuple"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#majorMinor"/>
                                        </queries:And>
                                    </queries:Or>
                                </queries:Not>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#FloatLiteralExpr"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="floatingDigits"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="4">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#IntegerLiteralExpr"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#IntegerLiteral"/>
                                <queries:Not>
                                    <queries:Or initialCapacity="7">
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#digits"/>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#lineNumber"/>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#patchVersion"/>
                                        <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#Attribute"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#argument"/>
                                        </queries:And>
                                        <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#LabeledSpecializeEntry"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#value"/>
                                        </queries:And>
                                        <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#AvailabilityLabeledArgument"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#value"/>
                                        </queries:And>
                                        <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#VersionTuple"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#majorMinor"/>
                                        </queries:And>
                                    </queries:Or>
                                </queries:Not>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#IntegerLiteralExpr"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="digits"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="4">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#StringSegment"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#StringLiteral"/>
                                <queries:Not>
                                    <queries:Or initialCapacity="7">
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#content"/>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#fileName"/>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#message"/>
                                        <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#Attribute"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#argument"/>
                                        </queries:And>
                                        <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#LabeledSpecializeEntry"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#value"/>
                                        </queries:And>
                                        <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#AvailabilityLabeledArgument"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#value"/>
                                        </queries:And>
                                        <queries:And initialCapacity="2">
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#NamedAttributeStringArgument"/>
                                        </queries:Some>
                                        <queries:AtFeatureTest value="whole:org.whole.lang.swift:SwiftModel#stringOrDeclname"/>
                                        </queries:And>
                                    </queries:Or>
                                </queries:Not>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#StringSegment"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="content"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="4">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#IdentifierExpr"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:SubtypeTest value="whole:org.whole.lang.swift:SwiftModel#AbstractIdentifier"/>
                                <queries:Or initialCapacity="2">
                                    <queries:AtTypeTest value="whole:org.whole.lang.swift:SwiftModel#Expr"/>
                                    <queries:AtTypeTest value="whole:org.whole.lang.swift:SwiftModel#AbstractRootExpr"/>
                                </queries:Or>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#IdentifierExpr"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="identifier"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="4">
                                <queries:KindTest value="IMPL"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:Sequence initialCapacity="2">
                                        <migrations:Target/>
                                        <queries:VariableRefStep value="_outerTargetInstance"/>
                                        </queries:Sequence>
                                        <queries:TypeTest value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#SimpleTypeIdentifier"/>
                                    </queries:Some>
                                </queries:Not>
                                <queries:Or initialCapacity="2">
                                    <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#Identifier"/>
                                    <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#NameEnum"/>
                                </queries:Or>
                                <queries:AtTypeTest value="whole:org.whole.lang.swift:SwiftModel#Type"/>
                            </queries:And>
                            <queries:Scope xmlns:queries="http://lang.whole.org/Queries">
                                <queries:FreshNames initialCapacity="1">
                                    <queries:Name value="_outerTargetInstance"/>
                                </queries:FreshNames>
                                <queries:Block initialCapacity="2">
                                    <queries:Filter>
                                        <migrations:Target/>
                                        <queries:VariableTest value="_outerTargetInstance"/>
                                    </queries:Filter>
                                    <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#SimpleTypeIdentifier"/>
                                        <queries:Registry value="DEFAULT"/>
                                        <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="name"/>
                                        <queries:Scope>
                                        <queries:FreshNames initialCapacity="1">
                                        <queries:Name value="_targetInstance"/>
                                        </queries:FreshNames>
                                        <queries:Block initialCapacity="2">
                                        <queries:VariableTest value="_targetInstance"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <migrations:Source/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Block>
                                        </queries:Scope>
                                        </queries:Feature>
                                        </queries:Features>
                                    </queries:Create>
                                </queries:Block>
                            </queries:Scope>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:And xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#DictionaryExpr"/>
                                <queries:Not>
                                    <queries:Some>
                                        <queries:ChildStep/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                    </queries:Some>
                                </queries:Not>
                            </queries:And>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:DictionaryExpr xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <swiftsyntax:Token>
                                        <swiftsyntax:TokenKind value="leftSquareBracket"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="["/>
                                    </swiftsyntax:Token>
                                    <swiftsyntax:Token>
                                        <swiftsyntax:TokenKind value="colon"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value=":"/>
                                    </swiftsyntax:Token>
                                    <swiftsyntax:Token>
                                        <swiftsyntax:TokenKind value="rightSquareBracket"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="]"/>
                                    </swiftsyntax:Token>
                                </swiftsyntax:DictionaryExpr>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#QuestionOrExclamationMarkEnum"/>
                            <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="?"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="postfixQuestionMark"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="?"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="!"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="exclamationMark"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="!"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                            </queries:Choose>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#IdentifierEnum"/>
                            <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="self"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="selfKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="self"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="Self"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="capitalSelfKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="Self"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                            </queries:Choose>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#Throws"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <swiftsyntax:TokenKind value="throwsKeyword"/>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Text value="throws"/>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#BooleanLiteral"/>
                            <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:BooleanLiteral value="true"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:BooleanLiteralExpr xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:Token>
                                        <swiftsyntax:TokenKind value="trueKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="true"/>
                                        </swiftsyntax:Token>
                                        </swiftsyntax:BooleanLiteralExpr>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:BooleanLiteral value="false"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:BooleanLiteralExpr xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:Token>
                                        <swiftsyntax:TokenKind value="falseKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="false"/>
                                        </swiftsyntax:Token>
                                        </swiftsyntax:BooleanLiteralExpr>
                                    </commons:StageUpFragment>
                                </queries:If>
                            </queries:Choose>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#DotEnum"/>
                            <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="."/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="period"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="."/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="."/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="prefixPeriod"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="."/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                            </queries:Choose>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#WildcardMarker"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <swiftsyntax:TokenKind value="wildcardKeyword"/>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Text value="_"/>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#OpenQuoteEnum"/>
                            <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="&quot;"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="stringQuote"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="&quot;"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="&quot;&quot;&quot;"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="multilineStringQuote"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="&quot;&quot;&quot;"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                            </queries:Choose>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#CloseQuoteEnum"/>
                            <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="&quot;"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="stringQuote"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="&quot;"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="&quot;&quot;&quot;"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="multilineStringQuote"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="&quot;&quot;&quot;"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                            </queries:Choose>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#KindValue"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <swiftsyntax:TokenKind value="contextualKeyword"/>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <commons:StageDownFragment>
                                        <queries:SelfStep xmlns:queries="http://lang.whole.org/Queries"/>
                                    </commons:StageDownFragment>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#PoundIdentifierEnum"/>
                            <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="#colorLiteral"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="poundColorLiteralKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="#colorLiteral"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="#fileLiteral"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="poundFileLiteralKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="#fileLiteral"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="#imageLiteral"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="poundImageLiteralKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="#imageLiteral"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                            </queries:Choose>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#ThrowsOrRethrowsKeywordEnum"/>
                            <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="throws"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="throwsKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="throws"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="rethrows"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="rethrowsKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="rethrows"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                            </queries:Choose>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#PoundKeywordEnum"/>
                            <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="#if"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="poundIfKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="#if"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="#elseif"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="poundElseifKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="#elseif"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="#else"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="poundElseKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="#else"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                            </queries:Choose>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#NameValue"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <commons:StageDownFragment>
                                        <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="23">
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="class"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="classKeyword"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="convenience"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="dynamic"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="final"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="infix"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="lazy"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="optional"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="override"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="postfix"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="prefix"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="required"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="static"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="staticKeyword"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="unowned"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="weak"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="private"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="privateKeyword"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="fileprivate"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="fileprivateKeyword"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="internal"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="internalKeyword"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="public"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="publicKeyword"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="open"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="mutating"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="nonmutating"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="indirect"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="__consuming"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        </queries:Choose>
                                    </commons:StageDownFragment>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <commons:StageDownFragment>
                                        <queries:SelfStep xmlns:queries="http://lang.whole.org/Queries"/>
                                    </commons:StageDownFragment>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#Ellipsis"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <swiftsyntax:TokenKind value="ellipsis"/>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Text value="..."/>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#OptionalMarkEnum"/>
                            <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="?"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="postfixQuestionMark"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="?"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="?"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="infixQuestionMark"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="?"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="!"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="exclamationMark"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="!"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                            </queries:Choose>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#ImportKindEnum"/>
                            <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="8">
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="typealias"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="typealiasKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="typealias"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="struct"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="structKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="struct"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="class"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="classKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="class"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="enum"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="enumKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="enum"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="protocol"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="protocolKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="protocol"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="var"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="varKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="var"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="let"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="letKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="let"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="func"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="funcKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="func"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                            </queries:Choose>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#AccessorKindValue"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <commons:StageDownFragment>
                                        <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="12">
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="get"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="contextualKeyword"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="set"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="contextualKeyword"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="didSet"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="contextualKeyword"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="willSet"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="contextualKeyword"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="unsafeAddress"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="addressWithOwner"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="addressWithNativeOwner"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="unsafeMutableAddress"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="mutableAddressWithOwner"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="mutableAddressWithNativeOwner"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="_read"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="_modify"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        </queries:Choose>
                                    </commons:StageDownFragment>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <commons:StageDownFragment>
                                        <queries:SelfStep xmlns:queries="http://lang.whole.org/Queries"/>
                                    </commons:StageDownFragment>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#LetOrVarKeywordEnum"/>
                            <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="let"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="letKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="let"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="var"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="varKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="var"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                            </queries:Choose>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#HigherThanOrLowerThanValue"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <swiftsyntax:TokenKind value="identifier"/>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <commons:StageDownFragment>
                                        <queries:SelfStep xmlns:queries="http://lang.whole.org/Queries"/>
                                    </commons:StageDownFragment>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#FlagEnum"/>
                            <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="true"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="trueKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="true"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="false"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="falseKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="false"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                            </queries:Choose>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#ValueValue"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <swiftsyntax:TokenKind value="identifier"/>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <commons:StageDownFragment>
                                        <queries:SelfStep xmlns:queries="http://lang.whole.org/Queries"/>
                                    </commons:StageDownFragment>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#Case"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <swiftsyntax:TokenKind value="caseKeyword"/>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Text value="case"/>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#NameEnum"/>
                            <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="Self"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="capitalSelfKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="Self"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="Any"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="anyKeyword"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="Any"/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                            </queries:Choose>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#PeriodEnum"/>
                            <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="."/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="period"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="."/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="."/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                        <swiftsyntax:TokenKind value="prefixPeriod"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="."/>
                                        </swiftsyntax:Token>
                                    </commons:StageUpFragment>
                                </queries:If>
                            </queries:Choose>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#TypeOrProtocolValue"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <swiftsyntax:TokenKind value="identifier"/>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <commons:StageDownFragment>
                                        <queries:SelfStep xmlns:queries="http://lang.whole.org/Queries"/>
                                    </commons:StageDownFragment>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#Inout"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <swiftsyntax:TokenKind value="inoutKeyword"/>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Text value="inout"/>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#SpecifierValue"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <commons:StageDownFragment>
                                        <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="3">
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="inout"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="inoutKeyword"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="__shared"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <queries:EqualsStep>
                                        <queries:StringLiteral value="__owned"/>
                                        </queries:EqualsStep>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        </queries:Choose>
                                    </commons:StageDownFragment>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <commons:StageDownFragment>
                                        <queries:SelfStep xmlns:queries="http://lang.whole.org/Queries"/>
                                    </commons:StageDownFragment>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#SelfMarker"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <swiftsyntax:TokenKind value="selfKeyword"/>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Text value="self"/>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#TupleExpr"/>
                            <queries:Create xmlns:queries="http://lang.whole.org/Queries">
                                <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TupleExpr"/>
                                <queries:Registry value="DEFAULT"/>
                                <queries:Features initialCapacity="1">
                                    <queries:Feature>
                                        <queries:Name value="elementList"/>
                                        <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TupleElementList"/>
                                        <queries:Registry value="RESOLVER"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <queries:Path initialCapacity="2">
                                        <migrations:Source/>
                                        <queries:ChildStep/>
                                        </queries:Path>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Create>
                                    </queries:Feature>
                                </queries:Features>
                            </queries:Create>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#ArrayExpr"/>
                            <queries:Create xmlns:queries="http://lang.whole.org/Queries">
                                <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ArrayExpr"/>
                                <queries:Registry value="DEFAULT"/>
                                <queries:Features initialCapacity="1">
                                    <queries:Feature>
                                        <queries:Name value="elements"/>
                                        <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ArrayElementList"/>
                                        <queries:Registry value="RESOLVER"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <queries:Path initialCapacity="2">
                                        <migrations:Source/>
                                        <queries:ChildStep/>
                                        </queries:Path>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Create>
                                    </queries:Feature>
                                </queries:Features>
                            </queries:Create>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#DictionaryExpr"/>
                            <queries:Create xmlns:queries="http://lang.whole.org/Queries">
                                <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#DictionaryExpr"/>
                                <queries:Registry value="DEFAULT"/>
                                <queries:Features initialCapacity="1">
                                    <queries:Feature>
                                        <queries:Name value="content"/>
                                        <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#DictionaryElementList"/>
                                        <queries:Registry value="RESOLVER"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <queries:Path initialCapacity="2">
                                        <migrations:Source/>
                                        <queries:ChildStep/>
                                        </queries:Path>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Create>
                                    </queries:Feature>
                                </queries:Features>
                            </queries:Create>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#SequenceExpr"/>
                            <queries:Create xmlns:queries="http://lang.whole.org/Queries">
                                <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#SequenceExpr"/>
                                <queries:Registry value="DEFAULT"/>
                                <queries:Features initialCapacity="1">
                                    <queries:Feature>
                                        <queries:Name value="elements"/>
                                        <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ExprList"/>
                                        <queries:Registry value="RESOLVER"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <queries:Path initialCapacity="2">
                                        <migrations:Source/>
                                        <queries:ChildStep/>
                                        </queries:Path>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Create>
                                    </queries:Feature>
                                </queries:Features>
                            </queries:Create>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#YieldList"/>
                            <queries:Create xmlns:queries="http://lang.whole.org/Queries">
                                <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#YieldList"/>
                                <queries:Registry value="DEFAULT"/>
                                <queries:Features initialCapacity="1">
                                    <queries:Feature>
                                        <queries:Name value="elementList"/>
                                        <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ExprList"/>
                                        <queries:Registry value="RESOLVER"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <queries:Path initialCapacity="2">
                                        <migrations:Source/>
                                        <queries:ChildStep/>
                                        </queries:Path>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Create>
                                    </queries:Feature>
                                </queries:Features>
                            </queries:Create>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#ObjcKeyPathExpr"/>
                            <queries:Create xmlns:queries="http://lang.whole.org/Queries">
                                <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ObjcKeyPathExpr"/>
                                <queries:Registry value="DEFAULT"/>
                                <queries:Features initialCapacity="1">
                                    <queries:Feature>
                                        <queries:Name value="name"/>
                                        <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ObjcName"/>
                                        <queries:Registry value="RESOLVER"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <queries:Path initialCapacity="2">
                                        <migrations:Source/>
                                        <queries:ChildStep/>
                                        </queries:Path>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Create>
                                    </queries:Feature>
                                </queries:Features>
                            </queries:Create>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#IfConfigDecl"/>
                            <queries:Create xmlns:queries="http://lang.whole.org/Queries">
                                <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#IfConfigDecl"/>
                                <queries:Registry value="DEFAULT"/>
                                <queries:Features initialCapacity="1">
                                    <queries:Feature>
                                        <queries:Name value="clauses"/>
                                        <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#IfConfigClauseList"/>
                                        <queries:Registry value="RESOLVER"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <queries:Path initialCapacity="2">
                                        <migrations:Source/>
                                        <queries:ChildStep/>
                                        </queries:Path>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Create>
                                    </queries:Feature>
                                </queries:Features>
                            </queries:Create>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#AccessorBlock"/>
                            <queries:Create xmlns:queries="http://lang.whole.org/Queries">
                                <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#AccessorBlock"/>
                                <queries:Registry value="DEFAULT"/>
                                <queries:Features initialCapacity="1">
                                    <queries:Feature>
                                        <queries:Name value="accessors"/>
                                        <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#AccessorList"/>
                                        <queries:Registry value="RESOLVER"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <queries:Path initialCapacity="2">
                                        <migrations:Source/>
                                        <queries:ChildStep/>
                                        </queries:Path>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Create>
                                    </queries:Feature>
                                </queries:Features>
                            </queries:Create>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#SwitchCaseLabel"/>
                            <queries:Create xmlns:queries="http://lang.whole.org/Queries">
                                <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#SwitchCaseLabel"/>
                                <queries:Registry value="DEFAULT"/>
                                <queries:Features initialCapacity="1">
                                    <queries:Feature>
                                        <queries:Name value="caseItems"/>
                                        <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#CaseItemList"/>
                                        <queries:Registry value="RESOLVER"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <queries:Path initialCapacity="2">
                                        <migrations:Source/>
                                        <queries:ChildStep/>
                                        </queries:Path>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Create>
                                    </queries:Feature>
                                </queries:Features>
                            </queries:Create>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#CompositionType"/>
                            <queries:Create xmlns:queries="http://lang.whole.org/Queries">
                                <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#CompositionType"/>
                                <queries:Registry value="DEFAULT"/>
                                <queries:Features initialCapacity="1">
                                    <queries:Feature>
                                        <queries:Name value="elements"/>
                                        <queries:Create>
                                        <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#CompositionTypeElementList"/>
                                        <queries:Registry value="RESOLVER"/>
                                        <semantics:FunctionApplication xmlns:semantics="http://lang.whole.org/Semantics">
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <queries:Path initialCapacity="2">
                                        <migrations:Source/>
                                        <queries:ChildStep/>
                                        </queries:Path>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </semantics:FunctionApplication>
                                        </queries:Create>
                                    </queries:Feature>
                                </queries:Features>
                            </queries:Create>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#CaptureSpecifierEnum"/>
                            <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="4">
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="weak"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:TokenList xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel" initialCapacity="1">
                                        <swiftsyntax:Token>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="weak"/>
                                        </swiftsyntax:Token>
                                        </swiftsyntax:TokenList>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="unowned(safe)"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:TokenList xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel" initialCapacity="4">
                                        <swiftsyntax:Token>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="unowned"/>
                                        </swiftsyntax:Token>
                                        <swiftsyntax:Token>
                                        <swiftsyntax:TokenKind value="leftParen"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="("/>
                                        </swiftsyntax:Token>
                                        <swiftsyntax:Token>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="safe"/>
                                        </swiftsyntax:Token>
                                        <swiftsyntax:Token>
                                        <swiftsyntax:TokenKind value="rightParen"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value=")"/>
                                        </swiftsyntax:Token>
                                        </swiftsyntax:TokenList>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="unowned(unsafe)"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:TokenList xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel" initialCapacity="4">
                                        <swiftsyntax:Token>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="unowned"/>
                                        </swiftsyntax:Token>
                                        <swiftsyntax:Token>
                                        <swiftsyntax:TokenKind value="leftParen"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="("/>
                                        </swiftsyntax:Token>
                                        <swiftsyntax:Token>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="unsafe"/>
                                        </swiftsyntax:Token>
                                        <swiftsyntax:Token>
                                        <swiftsyntax:TokenKind value="rightParen"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value=")"/>
                                        </swiftsyntax:Token>
                                        </swiftsyntax:TokenList>
                                    </commons:StageUpFragment>
                                </queries:If>
                                <queries:If>
                                    <queries:EqualsStep>
                                        <queries:StringLiteral value="unowned"/>
                                    </queries:EqualsStep>
                                    <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <swiftsyntax:TokenList xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel" initialCapacity="1">
                                        <swiftsyntax:Token>
                                        <swiftsyntax:TokenKind value="identifier"/>
                                        <swiftsyntax:SourcePresence value="present"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Trivia initialCapacity="0"/>
                                        <swiftsyntax:Text value="unowned"/>
                                        </swiftsyntax:Token>
                                        </swiftsyntax:TokenList>
                                    </commons:StageUpFragment>
                                </queries:If>
                            </queries:Choose>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#StringLiteralExpr"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#StringLiteralExpr"/>
                            <migrations:MigrateFeatures initialCapacity="2">
                                <migrations:MigrateFeature>
                                    <migrations:MigratePath>
                                        <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#openQuote"/>
                                    </migrations:MigratePath>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#closeQuote"/>
                                </migrations:MigrateFeature>
                                <migrations:MigrateFeature>
                                    <migrations:MigratePath>
                                        <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#openDelimiter"/>
                                    </migrations:MigratePath>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#closeDelimiter"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#TuplePatternElement"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TuplePatternElement"/>
                            <migrations:MigrateFeatures initialCapacity="1">
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#labelName"/>
                                        <queries:KindTest value="RESOLVER"/>
                                        </queries:Path>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#labelColon"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#TupleTypeElement"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TupleTypeElement"/>
                            <migrations:MigrateFeatures initialCapacity="1">
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#type"/>
                                        <queries:KindTest value="RESOLVER"/>
                                        </queries:Path>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#colon"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#GenericParameter"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#GenericParameter"/>
                            <migrations:MigrateFeatures initialCapacity="1">
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#name"/>
                                        <queries:KindTest value="RESOLVER"/>
                                        </queries:Path>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#colon"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#IfStmt"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#IfStmt"/>
                            <migrations:MigrateFeatures initialCapacity="2">
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#labelName"/>
                                        <queries:KindTest value="RESOLVER"/>
                                        </queries:Path>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#labelColon"/>
                                </migrations:MigrateFeature>
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#elseBody"/>
                                        <queries:KindTest value="RESOLVER"/>
                                        </queries:Path>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#elseKeyword"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#ForInStmt"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ForInStmt"/>
                            <migrations:MigrateFeatures initialCapacity="1">
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#labelName"/>
                                        <queries:KindTest value="RESOLVER"/>
                                        </queries:Path>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#labelColon"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#Attribute"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#Attribute"/>
                            <migrations:MigrateFeatures initialCapacity="2">
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#argument"/>
                                        <queries:Or initialCapacity="2">
                                        <queries:KindTest value="RESOLVER"/>
                                        <queries:Not>
                                        <queries:Some>
                                        <queries:ChildStep/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </queries:Some>
                                        </queries:Not>
                                        </queries:Or>
                                        </queries:Path>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#leftParen"/>
                                </migrations:MigrateFeature>
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#argument"/>
                                        <queries:Or initialCapacity="2">
                                        <queries:KindTest value="RESOLVER"/>
                                        <queries:Not>
                                        <queries:Some>
                                        <queries:ChildStep/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </queries:Some>
                                        </queries:Not>
                                        </queries:Or>
                                        </queries:Path>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#rightParen"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#CustomAttribute"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#CustomAttribute"/>
                            <migrations:MigrateFeatures initialCapacity="2">
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#argumentList"/>
                                        <queries:Or initialCapacity="2">
                                        <queries:KindTest value="RESOLVER"/>
                                        <queries:Not>
                                        <queries:Some>
                                        <queries:ChildStep/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </queries:Some>
                                        </queries:Not>
                                        </queries:Or>
                                        </queries:Path>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#leftParen"/>
                                </migrations:MigrateFeature>
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#argumentList"/>
                                        <queries:Or initialCapacity="2">
                                        <queries:KindTest value="RESOLVER"/>
                                        <queries:Not>
                                        <queries:Some>
                                        <queries:ChildStep/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </queries:Some>
                                        </queries:Not>
                                        </queries:Or>
                                        </queries:Path>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#rightParen"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#AccessLevelModifier"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#AccessLevelModifier"/>
                            <migrations:MigrateFeatures initialCapacity="2">
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#modifier"/>
                                        <queries:Or initialCapacity="2">
                                        <queries:KindTest value="RESOLVER"/>
                                        <queries:Not>
                                        <queries:Some>
                                        <queries:ChildStep/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </queries:Some>
                                        </queries:Not>
                                        </queries:Or>
                                        </queries:Path>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#leftParen"/>
                                </migrations:MigrateFeature>
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#modifier"/>
                                        <queries:Or initialCapacity="2">
                                        <queries:KindTest value="RESOLVER"/>
                                        <queries:Not>
                                        <queries:Some>
                                        <queries:ChildStep/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </queries:Some>
                                        </queries:Not>
                                        </queries:Or>
                                        </queries:Path>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#rightParen"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#FunctionParameter"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#FunctionParameter"/>
                            <migrations:MigrateFeatures initialCapacity="1">
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#type"/>
                                        <queries:KindTest value="RESOLVER"/>
                                        </queries:Path>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#colon"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#DeclModifier"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#DeclModifier"/>
                            <migrations:MigrateFeatures initialCapacity="2">
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#detail"/>
                                        <queries:Or initialCapacity="2">
                                        <queries:KindTest value="RESOLVER"/>
                                        <queries:Not>
                                        <queries:Some>
                                        <queries:ChildStep/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </queries:Some>
                                        </queries:Not>
                                        </queries:Or>
                                        </queries:Path>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#detailLeftParen"/>
                                </migrations:MigrateFeature>
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#detail"/>
                                        <queries:Or initialCapacity="2">
                                        <queries:KindTest value="RESOLVER"/>
                                        <queries:Not>
                                        <queries:Some>
                                        <queries:ChildStep/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </queries:Some>
                                        </queries:Not>
                                        </queries:Or>
                                        </queries:Path>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#detailRightParen"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#FunctionCallExpr"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#FunctionCallExpr"/>
                            <migrations:MigrateFeatures initialCapacity="2">
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:And initialCapacity="2">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#argumentList"/>
                                        <queries:Or initialCapacity="2">
                                        <queries:KindTest value="RESOLVER"/>
                                        <queries:Not>
                                        <queries:Some>
                                        <queries:ChildStep/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </queries:Some>
                                        </queries:Not>
                                        </queries:Or>
                                        </queries:Path>
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#trailingClosure"/>
                                        <queries:KindTest value="IMPL"/>
                                        </queries:Path>
                                        </queries:And>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#leftParen"/>
                                </migrations:MigrateFeature>
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:And initialCapacity="2">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#argumentList"/>
                                        <queries:Or initialCapacity="2">
                                        <queries:KindTest value="RESOLVER"/>
                                        <queries:Not>
                                        <queries:Some>
                                        <queries:ChildStep/>
                                        <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                                        </queries:Some>
                                        </queries:Not>
                                        </queries:Or>
                                        </queries:Path>
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#trailingClosure"/>
                                        <queries:KindTest value="IMPL"/>
                                        </queries:Path>
                                        </queries:And>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#rightParen"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#ClosureCaptureItem"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ClosureCaptureItem"/>
                            <migrations:MigrateFeatures initialCapacity="1">
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#name"/>
                                        <queries:KindTest value="RESOLVER"/>
                                        </queries:Path>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#assignToken"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#TupleElement"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#TupleElement"/>
                            <migrations:MigrateFeatures initialCapacity="1">
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#label"/>
                                        <queries:KindTest value="RESOLVER"/>
                                        </queries:Path>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#colon"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#FunctionCallArgument"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#FunctionCallArgument"/>
                            <migrations:MigrateFeatures initialCapacity="1">
                                <migrations:MigrateFeature>
                                    <queries:If xmlns:queries="http://lang.whole.org/Queries">
                                        <queries:Path initialCapacity="3">
                                        <migrations:Target/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#label"/>
                                        <queries:KindTest value="RESOLVER"/>
                                        </queries:Path>
                                        <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                        <commons:Resolver/>
                                        </commons:StageUpFragment>
                                    </queries:If>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#colon"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#ObjectLiteralExpr"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#ObjectLiteralExpr"/>
                            <migrations:MigrateFeatures initialCapacity="1">
                                <migrations:MigrateFeature>
                                    <migrations:MigratePath>
                                        <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#poundIdentifier"/>
                                    </migrations:MigratePath>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#identifier"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#IdentifierPattern"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#IdentifierPattern"/>
                            <migrations:MigrateFeatures initialCapacity="1">
                                <migrations:MigrateFeature>
                                    <migrations:MigratePath>
                                        <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#patternIdentifier"/>
                                    </migrations:MigratePath>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#identifier"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#FunctionDecl"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#FunctionDecl"/>
                            <migrations:MigrateFeatures initialCapacity="1">
                                <migrations:MigrateFeature>
                                    <migrations:MigratePath>
                                        <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#functionIdentifier"/>
                                    </migrations:MigratePath>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#identifier"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntity>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#OperatorDecl"/>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#OperatorDecl"/>
                            <migrations:MigrateFeatures initialCapacity="1">
                                <migrations:MigrateFeature>
                                    <migrations:MigratePath>
                                        <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#operatorIdentifier"/>
                                    </migrations:MigratePath>
                                    <queries:FeatureStep xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#identifier"/>
                                </migrations:MigrateFeature>
                            </migrations:MigrateFeatures>
                            <commons:Resolver xmlns:commons="http://lang.whole.org/Commons"/>
                        </migrations:MigrateEntity>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#IntegerLiteral"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <swiftsyntax:TokenKind value="integerLiteral"/>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <commons:StageDownFragment>
                                        <queries:SelfStep xmlns:queries="http://lang.whole.org/Queries"/>
                                    </commons:StageDownFragment>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#FloatingLiteral"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <swiftsyntax:TokenKind value="floatingLiteral"/>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <commons:StageDownFragment>
                                        <queries:SelfStep xmlns:queries="http://lang.whole.org/Queries"/>
                                    </commons:StageDownFragment>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#StringLiteral"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <commons:StageDownFragment>
                                        <queries:Choose xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                        <queries:If>
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:TypeTest value="whole:org.whole.lang.swift:SwiftModel#StringLiteralSegments"/>
                                        </queries:Some>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="stringSegment"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        <queries:If>
                                        <commons:Resolver/>
                                        <commons:StageUpFragment>
                                        <swiftsyntax:TokenKind value="stringLiteral"/>
                                        </commons:StageUpFragment>
                                        </queries:If>
                                        </queries:Choose>
                                    </commons:StageDownFragment>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <commons:StageDownFragment>
                                        <queries:SelfStep xmlns:queries="http://lang.whole.org/Queries"/>
                                    </commons:StageDownFragment>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#Identifier"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <swiftsyntax:TokenKind value="identifier"/>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <commons:StageDownFragment>
                                        <queries:SelfStep xmlns:queries="http://lang.whole.org/Queries"/>
                                    </commons:StageDownFragment>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#BinaryOperator"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <swiftsyntax:TokenKind value="unspacedBinaryOperator"/>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <commons:StageDownFragment>
                                        <queries:SelfStep xmlns:queries="http://lang.whole.org/Queries"/>
                                    </commons:StageDownFragment>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#PostfixOperator"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <swiftsyntax:TokenKind value="postfixOperator"/>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <commons:StageDownFragment>
                                        <queries:SelfStep xmlns:queries="http://lang.whole.org/Queries"/>
                                    </commons:StageDownFragment>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#PrefixOperator"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <swiftsyntax:TokenKind value="prefixOperator"/>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <commons:StageDownFragment>
                                        <queries:SelfStep xmlns:queries="http://lang.whole.org/Queries"/>
                                    </commons:StageDownFragment>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#DollarIdentifier"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <swiftsyntax:TokenKind value="dollarIdentifier"/>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <commons:StageDownFragment>
                                        <queries:SelfStep xmlns:queries="http://lang.whole.org/Queries"/>
                                    </commons:StageDownFragment>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#RawStringDelimiter"/>
                            <commons:StageUpFragment xmlns:commons="http://lang.whole.org/Commons">
                                <swiftsyntax:Token xmlns:swiftsyntax="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel">
                                    <swiftsyntax:TokenKind value="rawStringDelimiter"/>
                                    <swiftsyntax:SourcePresence value="present"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <swiftsyntax:Trivia initialCapacity="0"/>
                                    <commons:StageDownFragment>
                                        <queries:SelfStep xmlns:queries="http://lang.whole.org/Queries"/>
                                    </commons:StageDownFragment>
                                </swiftsyntax:Token>
                            </commons:StageUpFragment>
                        </migrations:MigrateEntityPattern>
                        <migrations:MigrateEntityPattern>
                            <queries:TypeTest xmlns:queries="http://lang.whole.org/Queries" value="whole:org.whole.lang.swift:SwiftModel#SourceFile"/>
                            <queries:Path xmlns:queries="http://lang.whole.org/Queries" initialCapacity="2">
                                <queries:Create>
                                    <queries:EntityType value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#SourceFile"/>
                                    <queries:Registry value="DEFAULT"/>
                                    <queries:Features initialCapacity="1">
                                        <queries:Feature>
                                        <queries:Name value="statements"/>
                                        <migrations:MigratePath>
                                        <queries:Path initialCapacity="2">
                                        <migrations:Source/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swift:SwiftModel#statements"/>
                                        </queries:Path>
                                        </migrations:MigratePath>
                                        </queries:Feature>
                                    </queries:Features>
                                </queries:Create>
                                <queries:Block initialCapacity="2">
                                    <queries:Delete>
                                        <queries:Path initialCapacity="2">
                                        <queries:DescendantStep/>
                                        <queries:Filter>
                                        <queries:Choose initialCapacity="3">
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#trailingComma"/>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#trailingDot"/>
                                        <queries:Filter>
                                        <queries:FeatureStep value="whole:org.whole.lang.swiftsyntax:SwiftSyntaxModel#dot"/>
                                        <queries:AtIndexTest>
                                        <queries:IntLiteral value="-1"/>
                                        </queries:AtIndexTest>
                                        </queries:Filter>
                                        </queries:Choose>
                                        <queries:Some>
                                        <queries:ParentStep/>
                                        <queries:AtIndexTest>
                                        <queries:IntLiteral value="-1"/>
                                        </queries:AtIndexTest>
                                        </queries:Some>
                                        </queries:Filter>
                                        </queries:Path>
                                    </queries:Delete>
                                    <queries:SelfStep/>
                                </queries:Block>
                            </queries:Path>
                        </migrations:MigrateEntityPattern>
                    </migrations:LanguageMigrationRules>
                    <queries:Registry xmlns:queries="http://lang.whole.org/Queries" value="DEFAULT"/>
                </migrations:MigrateLanguage>
            </migrations:MigrationRules>
        </migrations:MigrationFunction>
    </migrations:MigrationFunctions>
</migrations:Library>
