package org.whole.lang.grammars.util.tests;

import org.whole.lang.model.IEntity;
import org.whole.lang.templates.AbstractTemplateFactory;
import org.whole.lang.templates.AbstractTemplateManager;
import org.whole.lang.templates.ITemplateFactory;

public class Grammars2ModelsVisitorTestTemplateManager extends AbstractTemplateManager {

    private static class SingletonHolder {
        private static final Grammars2ModelsVisitorTestTemplateManager instance = new Grammars2ModelsVisitorTestTemplateManager();
    }

    public static Grammars2ModelsVisitorTestTemplateManager instance() {
        return SingletonHolder.instance;
    }

    private Grammars2ModelsVisitorTestTemplateManager() {
        put("fragment", newfragment());
        put("fragment1", newfragment1());
        put("fragment2", newfragment2());
        put("fragment3", newfragment3());
        put("fragment4", newfragment4());
        put("fragment5", newfragment5());
        put("fragment6", newfragment6());
        put("fragment7", newfragment7());
        put("fragment8", newfragment8());
        put("fragment9", newfragment9());
        put("fragment10", newfragment10());
        put("fragment11", newfragment11());
        put("fragment12", newfragment12());
        put("fragment13", newfragment13());
        put("fragment14", newfragment14());
        put("fragment15", newfragment15());
        put("fragment16", newfragment16());
        put("fragment17", newfragment17());
        put("fragment18", newfragment18());
        put("fragment19", newfragment19());
        put("fragment20", newfragment20());
        put("fragment21", newfragment21());
        put("fragment24", newfragment24());
        put("fragment25", newfragment25());
        put("fragment26", newfragment26());
        put("fragment27", newfragment27());
    }

    public ITemplateFactory<IEntity> newfragment() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("LanguageNameGrammar");
                b2.LanguageDescriptor_();
                b2.URI("http://lang.whole.org/LanguageName");
                b2.Namespace("org.whole.lang.language");
                b2.Name("LanguageName");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("NT_DATA1");
                b1.Resolver();
                b2.Productions_(2);
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("pattern");
                b2.Category("DELIMITER");
                b2.Literal("literal");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.Empty_();
                b2.Literal("");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(10);
                b2.Production_();
                b2.NonTerminal("NT_DATA1");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA2");
                b2.Split_();
                b2.BySize(5);
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA3");
                b2.Concatenate_(1);
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Concatenate();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA4");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA4_AS");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA4_PROD1");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.As_();
                b2.NonTerminal("DATA4Prod1");
                b2.Name("dATA4Prod1");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA4_PROD2");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.As_();
                b2.NonTerminal("DATA4Prod2");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Name");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DATA4Prod1");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DATA4Prod2");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2._Productions();
                b2.URI("http://lang.whole.org/LanguageNameGrammar");
                b2.Namespace("org.whole.lang.language");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment1() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.commons.builders.ICommonsBuilder b0 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b0.StageUpFragment_();
                org.whole.lang.models.builders.IModelsBuilder b1 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b1.Model_();
                b1.SimpleName("LanguageName");
                b1.TypeRelations_(0);
                b1._TypeRelations();
                b1.ModelDeclarations_(10);
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("NT_DATA1");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("NT_DATA2");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("NT_DATA3");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("NT_DATA4");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("NT_DATA4_AS");
                b1.Types_(0);
                b1._Types();
                b1.Features_(1);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Name");
                b1.SimpleName("name");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("NT_DATA4_PROD1");
                b1.Types_(0);
                b1._Types();
                b1.Features_(1);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("DATA4Prod1");
                b1.SimpleName("dATA4Prod1");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("NT_DATA4_PROD2");
                b1.Types_(0);
                b1._Types();
                b1.Features_(1);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("DATA4Prod2");
                b1.SimpleName("name");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Name");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("DATA4Prod1");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("DATA4Prod2");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1._ModelDeclarations();
                b1.Namespace("org.whole.lang.language");
                b0.Resolver();
                b1.URI("http://lang.whole.org/LanguageName");
                b1._Model();
                b0._StageUpFragment();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment2() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("LanguageNameGrammar");
                b2.LanguageDescriptor_();
                b2.URI("http://lang.whole.org/LanguageName");
                b2.Namespace("org.whole.lang.language");
                b2.Name("LanguageName");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("NT_DATA5");
                b1.Resolver();
                b2.Productions_(1);
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("pattern");
                b2.Category("DELIMITER");
                b2.Literal("literal");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(11);
                b2.Production_();
                b2.NonTerminal("NT_DATA5");
                b2.Concatenate_(1);
                b2.Split_();
                b2.BySize(5);
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2._Concatenate();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA5_AS");
                b2.Concatenate_(1);
                b2.Split_();
                b2.BySize(5);
                b2.As_();
                b2.NonTerminal("Namex");
                b2.Name("namex");
                b2._As();
                b2._Split();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA5_PROD1");
                b2.Concatenate_(1);
                b2.As_();
                b2.NonTerminal("DATA5Prod1");
                b2.Name("dATA5Prod1");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA5_PROD2");
                b2.Concatenate_(1);
                b2.As_();
                b2.NonTerminal("DATA5Prod2");
                b2.Name("name");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA6");
                b2.Split_();
                b2.BySize(12);
                b2.Concatenate_(2);
                b2.Split_();
                b2.BySize(5);
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.NonTerminal("TOKEN");
                b2._Concatenate();
                b2._Split();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA6_PROD1");
                b2.Split_();
                b2.BySize(12);
                b2.As_();
                b2.NonTerminal("DATA6Prod1");
                b2.Name("dATA6Prod1");
                b2._As();
                b2._Split();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NT_DATA7");
                b2.Concatenate_(2);
                b2.NonTerminal("TOKEN");
                b2.Split_();
                b2.BySize(12);
                b2.Concatenate_(2);
                b2.Split_();
                b2.BySize(5);
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.NonTerminal("TOKEN");
                b2._Concatenate();
                b2._Split();
                b2._Concatenate();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Namex");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DATA5Prod1");
                b2.Split_();
                b2.BySize(5);
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DATA5Prod2");
                b2.Split_();
                b2.BySize(5);
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DATA6Prod1");
                b2.Concatenate_(2);
                b2.Split_();
                b2.BySize(5);
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.NonTerminal("TOKEN");
                b2._Concatenate();
                b2.DataType("STRING");
                b2._Production();
                b2._Productions();
                b2.URI("http://lang.whole.org/LanguageNameGrammar");
                b2.Namespace("org.whole.lang.language");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment3() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.commons.builders.ICommonsBuilder b0 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b0.StageUpFragment_();
                org.whole.lang.models.builders.IModelsBuilder b1 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b1.Model_();
                b1.SimpleName("LanguageName");
                b1.TypeRelations_(0);
                b1._TypeRelations();
                b1.ModelDeclarations_(11);
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("NT_DATA5");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("NT_DATA5_AS");
                b1.Types_(0);
                b1._Types();
                b1.Features_(1);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Namex");
                b1.SimpleName("namex");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("NT_DATA5_PROD1");
                b1.Types_(0);
                b1._Types();
                b1.Features_(1);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("DATA5Prod1");
                b1.SimpleName("dATA5Prod1");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("NT_DATA5_PROD2");
                b1.Types_(0);
                b1._Types();
                b1.Features_(1);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("DATA5Prod2");
                b1.SimpleName("name");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("NT_DATA6");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("NT_DATA6_PROD1");
                b1.Types_(0);
                b1._Types();
                b1.Features_(1);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("DATA6Prod1");
                b1.SimpleName("dATA6Prod1");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("NT_DATA7");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Namex");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("DATA5Prod1");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("DATA5Prod2");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("DATA6Prod1");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1._ModelDeclarations();
                b1.Namespace("org.whole.lang.language");
                b0.Resolver();
                b1.URI("http://lang.whole.org/LanguageName");
                b1._Model();
                b0._StageUpFragment();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment4() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("grammarName");
                b2.LanguageDescriptor_();
                b2.URI("http://lang.whole.org/LanguageName");
                b2.Namespace("org.whole.lang.language");
                b2.Name("LanguageName");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("A");
                b1.Resolver();
                b2.Productions_(8);
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("a");
                b2.Category("DELIMITER");
                b2.Literal("a");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.LiteralTerminal_();
                b2.RegExp("b");
                b2.Category("DELIMITER");
                b2.Literal("b");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN2");
                b2.LiteralTerminal_();
                b2.RegExp("c");
                b2.Category("DELIMITER");
                b2.Literal("c");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN3");
                b2.LiteralTerminal_();
                b2.RegExp("d");
                b2.Category("DELIMITER");
                b2.Literal("d");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN4");
                b2.LiteralTerminal_();
                b2.RegExp("e");
                b2.Category("DELIMITER");
                b2.Literal("e");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN5");
                b2.LiteralTerminal_();
                b2.RegExp("f");
                b2.Category("DELIMITER");
                b2.Literal("f");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN6");
                b2.LiteralTerminal_();
                b2.RegExp("g");
                b2.Category("DELIMITER");
                b2.Literal("g");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN7");
                b2.LiteralTerminal_();
                b2.RegExp("h");
                b2.Category("DELIMITER");
                b2.Literal("h");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(12);
                b2.Production_();
                b2.NonTerminal("A");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("B");
                b2._Repeat();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("B");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN2");
                b2.Choose_(2);
                b2.NonTerminal("A");
                b2.NonTerminal("C");
                b2._Choose();
                b2.NonTerminal("TOKEN3");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("C");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN4");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.NonTerminal("TOKEN5");
                b2._Concatenate();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("D");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.Split_();
                b2.BySize(5);
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("B");
                b2._Repeat();
                b2._Split();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DD");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.Split_();
                b2.BySize(5);
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("B");
                b2._Repeat();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b2._Split();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("E");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN2");
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("E1");
                b2.Name("e1");
                b2._As();
                b2._Optional();
                b2.NonTerminal("TOKEN3");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("EE");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN2");
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("EE1");
                b2.Name("eE1");
                b2._As();
                b2._Optional();
                b2.NonTerminal("TOKEN3");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("F");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN4");
                b2.When_();
                b2.NonTerminal("TOKEN");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._When();
                b2.NonTerminal("TOKEN5");
                b2._Concatenate();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("G");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN4");
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("TOKEN5");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("E1");
                b2.Choose_(2);
                b2.NonTerminal("A");
                b2.NonTerminal("C");
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("EE1");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN2");
                b2.Choose_(2);
                b2.NonTerminal("A");
                b2.NonTerminal("C");
                b2._Choose();
                b2.NonTerminal("TOKEN3");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Name");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN6");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.NonTerminal("TOKEN7");
                b2._Concatenate();
                b2.DataType("STRING");
                b2._Production();
                b2._Productions();
                b2.URI("http://lang.whole.org/LanguageNameGrammar");
                b2.Namespace("org.whole.lang.language");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment5() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.commons.builders.ICommonsBuilder b0 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b0.StageUpFragment_();
                org.whole.lang.models.builders.IModelsBuilder b1 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b1.Model_();
                b1.SimpleName("LanguageName");
                b1.TypeRelations_(0);
                b1._TypeRelations();
                b1.ModelDeclarations_(12);
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("A");
                b1.Types_(3);
                b1.SimpleName("B");
                b1.SimpleName("E1");
                b1.SimpleName("EE1");
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("B");
                b1._CompositeEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(1);
                b1.EntityModifier("abstract");
                b1._EntityModifiers();
                b1.SimpleName("B");
                b1.Types_(0);
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("C");
                b1.Types_(3);
                b1.SimpleName("B");
                b1.SimpleName("E1");
                b1.SimpleName("EE1");
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("D");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("B");
                b1._CompositeEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("DD");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("B");
                b1._CompositeEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("E");
                b1.Types_(0);
                b1._Types();
                b1.Features_(1);
                b1.Feature_();
                b1.FeatureModifiers_(1);
                b1.FeatureModifier("optional");
                b1._FeatureModifiers();
                b1.SimpleName("E1");
                b1.SimpleName("e1");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("EE");
                b1.Types_(0);
                b1._Types();
                b1.Features_(1);
                b1.Feature_();
                b1.FeatureModifiers_(1);
                b1.FeatureModifier("optional");
                b1._FeatureModifiers();
                b1.SimpleName("EE1");
                b1.SimpleName("eE1");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("F");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("G");
                b1.Types_(0);
                b1._Types();
                b1.Features_(1);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Name");
                b1.SimpleName("name");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(1);
                b1.EntityModifier("abstract");
                b1._EntityModifiers();
                b1.SimpleName("E1");
                b1.Types_(0);
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(1);
                b1.EntityModifier("abstract");
                b1._EntityModifiers();
                b1.SimpleName("EE1");
                b1.Types_(0);
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Name");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1._ModelDeclarations();
                b1.Namespace("org.whole.lang.language");
                b0.Resolver();
                b1.URI("http://lang.whole.org/LanguageName");
                b1._Model();
                b0._StageUpFragment();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment6() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("TestGrammar1");
                b2.LanguageDescriptor_();
                b2.URI("http://lang.whole.org/Test1");
                b2.Namespace("org.whole.lang.language");
                b2.Name("Test1");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("CSVSimple");
                b1.Resolver();
                b2.Productions_(27);
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("a literal terminal");
                b2.Category("DELIMITER");
                b2.Literal("a literal terminal");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.LiteralTerminal_();
                b2.RegExp("[0-9a-zA-Z]{6}[a-zA-Z]{2}");
                b2.Category("DELIMITER");
                b2.Literal("abcedfgh");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN2");
                b2.LiteralTerminal_();
                b2.RegExp("BEGIN");
                b2.Category("DELIMITER");
                b2.Literal("BEGIN");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN3");
                b2.LiteralTerminal_();
                b2.RegExp("[AB]");
                b2.Category("DELIMITER");
                b2.Literal("A");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN4");
                b2.LiteralTerminal_();
                b2.RegExp("[0-9]{2,5}");
                b2.Category("DELIMITER");
                b2.Literal("666");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN5");
                b2.LiteralTerminal_();
                b2.RegExp("(,[0-9]{2})*");
                b2.Category("DELIMITER");
                b2.Literal(",12,23,34");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN6");
                b2.LiteralTerminal_();
                b2.RegExp("END");
                b2.Category("DELIMITER");
                b2.Literal("END");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN7");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q(\\E");
                b2.Category("DELIMITER");
                b2.Literal("(");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN8");
                b2.LiteralTerminal_();
                b2.RegExp(",");
                b2.Category("DELIMITER");
                b2.Literal(",");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN9");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q)\\E");
                b2.Category("DELIMITER");
                b2.Literal(")");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN10");
                b2.LiteralTerminal_();
                b2.RegExp("a");
                b2.Category("DELIMITER");
                b2.Literal("a");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN11");
                b2.LiteralTerminal_();
                b2.RegExp("n optional");
                b2.Category("DELIMITER");
                b2.Literal("n optional");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN12");
                b2.LiteralTerminal_();
                b2.RegExp(" literal terminal");
                b2.Category("DELIMITER");
                b2.Literal(" literal terminal");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN13");
                b2.LiteralTerminal_();
                b2.RegExp("n");
                b2.Category("DELIMITER");
                b2.Literal("n");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN14");
                b2.LiteralTerminal_();
                b2.RegExp("\\s+");
                b2.Category("DELIMITER");
                b2.Literal(" ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN15");
                b2.LiteralTerminal_();
                b2.RegExp("optional");
                b2.Category("DELIMITER");
                b2.Literal("optional");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN16");
                b2.LiteralTerminal_();
                b2.RegExp("Message: ");
                b2.Category("DELIMITER");
                b2.Literal("Message: ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN17");
                b2.LiteralTerminal_();
                b2.RegExp(" ");
                b2.Category("DELIMITER");
                b2.Literal(" ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN18");
                b2.LiteralTerminal_();
                b2.RegExp("bla");
                b2.Category("DELIMITER");
                b2.Literal("bla");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN19");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q.\\E");
                b2.Category("DELIMITER");
                b2.Literal(".");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN20");
                b2.LiteralTerminal_();
                b2.RegExp("My ");
                b2.Category("DELIMITER");
                b2.Literal("My ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN21");
                b2.LiteralTerminal_();
                b2.RegExp("dog");
                b2.Category("DELIMITER");
                b2.Literal("dog");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN22");
                b2.LiteralTerminal_();
                b2.RegExp("cat");
                b2.Category("DELIMITER");
                b2.Literal("cat");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN23");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q is sleeping.\\E");
                b2.Category("DELIMITER");
                b2.Literal(" is sleeping.");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN24");
                b2.LiteralTerminal_();
                b2.RegExp(".*\\n");
                b2.Category("DELIMITER");
                b2.Literal("a string, an int, a char, a double\\n");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN25");
                b2.LiteralTerminal_();
                b2.RegExp("\\n");
                b1.Resolver();
                b2.Literal("\n");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN26");
                b2.LiteralTerminal_();
                b2.RegExp(",");
                b1.Resolver();
                b2.Literal(", ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(29);
                b2.Production_();
                b2.NonTerminal("SingleLiteral");
                b2.NonTerminal("TOKEN");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("SinglePatternLiteral");
                b2.NonTerminal("TOKEN1");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("LiteralSequence");
                b2.Concatenate_(5);
                b2.NonTerminal("TOKEN2");
                b2.NonTerminal("TOKEN3");
                b2.NonTerminal("TOKEN4");
                b2.NonTerminal("TOKEN5");
                b2.NonTerminal("TOKEN6");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("SingleData");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DataSequence");
                b2.Concatenate_(6);
                b2.NonTerminal("TOKEN7");
                b2.As_();
                b2.NonTerminal("F1");
                b2.Name("f1");
                b2._As();
                b2.As_();
                b2.NonTerminal("F2");
                b2.Name("f2");
                b2._As();
                b2.NonTerminal("TOKEN8");
                b2.As_();
                b2.NonTerminal("F3");
                b2.Name("f3");
                b2._As();
                b2.NonTerminal("TOKEN9");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DataSequenceWithDataTypes");
                b2.Concatenate_(6);
                b2.NonTerminal("TOKEN7");
                b2.As_();
                b2.NonTerminal("EF1");
                b2.Name("f1");
                b2._As();
                b2.As_();
                b2.NonTerminal("EF2");
                b2.Name("f2");
                b2._As();
                b2.NonTerminal("TOKEN8");
                b2.As_();
                b2.NonTerminal("EF2");
                b2.Name("f3");
                b2._As();
                b2.NonTerminal("TOKEN9");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("OptionalLiteral");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN10");
                b2.Optional_();
                b2.NonTerminal("TOKEN11");
                b2._Optional();
                b2.NonTerminal("TOKEN12");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("OptionalConcatenate");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN10");
                b2.Optional_();
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN13");
                b2.NonTerminal("TOKEN14");
                b2.NonTerminal("TOKEN15");
                b2._Concatenate();
                b2._Optional();
                b2.As_();
                b2.NonTerminal("OptionalConcatenate1");
                b2.Name("optionalConcatenate1");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("RepeatedLiteral");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN16");
                b2.Repeat_();
                b2.Size(1);
                b2.Size(3);
                b2.NonTerminal("TOKEN17");
                b2.Concatenate_(1);
                b2.NonTerminal("TOKEN18");
                b2._Concatenate();
                b2._Repeat();
                b2.NonTerminal("TOKEN19");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("RepeatedOptionalLiteral");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN16");
                b2.Repeat_();
                b2.Size(0);
                b2.Size(3);
                b2.NonTerminal("TOKEN17");
                b2.NonTerminal("TOKEN18");
                b2._Repeat();
                b2.NonTerminal("TOKEN19");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("RepeatedUnboundedLiteral");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN16");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b2.NonTerminal("TOKEN17");
                b2.NonTerminal("TOKEN18");
                b2._Repeat();
                b2.NonTerminal("TOKEN19");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ChooseLiteral");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN20");
                b2.Choose_(2);
                b2.NonTerminal("TOKEN21");
                b2.NonTerminal("TOKEN22");
                b2._Choose();
                b2.NonTerminal("TOKEN23");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ChoosePolymorphic");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN20");
                b2.Choose_(2);
                b2.NonTerminal("ChooseType1");
                b2.NonTerminal("ChooseType2");
                b2._Choose();
                b2.NonTerminal("TOKEN23");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ChooseEnum");
                b2.Choose_(2);
                b2.As_();
                b2.NonTerminal("TOKEN21");
                b2.Name("DOG");
                b2._As();
                b2.As_();
                b2.NonTerminal("TOKEN22");
                b2.Name("CAT");
                b2._As();
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("CSVSimple");
                b2.Concatenate_(2);
                b2.NonTerminal("TOKEN24");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b2.NonTerminal("TOKEN25");
                b2.NonTerminal("CSVSimple1");
                b2._Repeat();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("STRING");
                b2.DataTerminal_();
                b2.RegExp("(?:\")(.*)(?:\")|[^\",]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("CHAR");
                b2.DataTerminal_();
                b2.RegExp("(?s).");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("CHAR");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("INT");
                b2.DataTerminal_();
                b2.RegExp("([-+]?([0-9]++))");
                b2.Category("LITERAL");
                b2.Format("%d");
                b2._DataTerminal();
                b2.DataType("INT");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("FLOAT");
                b2.DataTerminal_();
                b2.RegExp("([-+]?([0-9]++(\\.[0-9]*+)?)|(\\.[0-9]++))");
                b2.Category("LITERAL");
                b2.Format("%d");
                b2._DataTerminal();
                b2.DataType("FLOAT");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DOUBLE");
                b2.DataTerminal_();
                b2.RegExp("([-+]?([0-9]++(\\.[0-9]*+)?)|(\\.[0-9]++))");
                b2.Category("LITERAL");
                b2.Format("%d");
                b2._DataTerminal();
                b2.DataType("DOUBLE");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("F1");
                b2.DataTerminal_();
                b2.RegExp("[AB]");
                b2.Category("DELIMITER");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("F2");
                b2.DataTerminal_();
                b2.RegExp("[0-9]+");
                b2.Category("DELIMITER");
                b2.Format("%d");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("F3");
                b2.DataTerminal_();
                b2.RegExp("[0-9]+");
                b2.Category("DELIMITER");
                b2.Format("%d");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("EF1");
                b2.DataTerminal_();
                b2.RegExp("[AB]");
                b2.Category("DELIMITER");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("CHAR");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("EF2");
                b2.DataTerminal_();
                b2.RegExp("[0-9]+");
                b2.Category("DELIMITER");
                b2.Format("%d");
                b2._DataTerminal();
                b2.DataType("INT");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("OptionalConcatenate1");
                b2.DataTerminal_();
                b2.RegExp(" concatenate");
                b2.Category("DELIMITER");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ChooseType1");
                b2.NonTerminal("TOKEN21");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ChooseType2");
                b2.NonTerminal("TOKEN22");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("CSVSimple1");
                b2.Concatenate_(7);
                b2.As_();
                b2.NonTerminal("STRING");
                b2.Name("AString");
                b2._As();
                b2.NonTerminal("TOKEN26");
                b2.As_();
                b2.NonTerminal("INT");
                b2.Name("AnInt");
                b2._As();
                b2.NonTerminal("TOKEN26");
                b2.As_();
                b2.NonTerminal("CHAR");
                b2.Name("AChar");
                b2._As();
                b2.NonTerminal("TOKEN26");
                b2.As_();
                b2.NonTerminal("DOUBLE");
                b2.Name("ADouble");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.URI("http://lang.whole.org/TestGrammar1");
                b2.Namespace("org.whole.lang.language");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment7() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.commons.builders.ICommonsBuilder b0 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b0.StageUpFragment_();
                org.whole.lang.models.builders.IModelsBuilder b1 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b1.Model_();
                b1.SimpleName("Test1");
                b1.TypeRelations_(0);
                b1._TypeRelations();
                b1.ModelDeclarations_(29);
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("SingleLiteral");
                b1.Types_(0);
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("SinglePatternLiteral");
                b1.Types_(0);
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("LiteralSequence");
                b1.Types_(0);
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("SingleData");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("DataSequence");
                b1.Types_(0);
                b1._Types();
                b1.Features_(3);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("F1");
                b1.SimpleName("f1");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("F2");
                b1.SimpleName("f2");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("F3");
                b1.SimpleName("f3");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("DataSequenceWithDataTypes");
                b1.Types_(0);
                b1._Types();
                b1.Features_(3);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("EF1");
                b1.SimpleName("f1");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("EF2");
                b1.SimpleName("f2");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("EF2");
                b1.SimpleName("f3");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("OptionalLiteral");
                b1.Types_(0);
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("OptionalConcatenate");
                b1.Types_(0);
                b1._Types();
                b1.Features_(1);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("OptionalConcatenate1");
                b1.SimpleName("optionalConcatenate1");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("RepeatedLiteral");
                b1.Types_(0);
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("RepeatedOptionalLiteral");
                b1.Types_(0);
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("RepeatedUnboundedLiteral");
                b1.Types_(0);
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("ChooseLiteral");
                b1.Types_(0);
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(1);
                b1.EntityModifier("abstract");
                b1._EntityModifiers();
                b1.SimpleName("ChoosePolymorphic");
                b1.Types_(0);
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.EnumEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("ChooseEnum");
                b1.Types_(0);
                b1._Types();
                b1.EnumValues_(2);
                b1.EnumValue("DOG");
                b1.EnumValue("CAT");
                b1._EnumValues();
                b1._EnumEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("CSVSimple");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("CSVSimple1");
                b1._CompositeEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("STRING");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("CHAR");
                b1.Types_(0);
                b1._Types();
                b1.DataType("char");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("INT");
                b1.Types_(0);
                b1._Types();
                b1.DataType("int");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("FLOAT");
                b1.Types_(0);
                b1._Types();
                b1.DataType("float");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("DOUBLE");
                b1.Types_(0);
                b1._Types();
                b1.DataType("double");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("F1");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("F2");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("F3");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("EF1");
                b1.Types_(0);
                b1._Types();
                b1.DataType("char");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("EF2");
                b1.Types_(0);
                b1._Types();
                b1.DataType("int");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("OptionalConcatenate1");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("ChooseType1");
                b1.Types_(1);
                b1.SimpleName("ChoosePolymorphic");
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("ChooseType2");
                b1.Types_(1);
                b1.SimpleName("ChoosePolymorphic");
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("CSVSimple1");
                b1.Types_(0);
                b1._Types();
                b1.Features_(4);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("STRING");
                b1.SimpleName("AString");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("INT");
                b1.SimpleName("AnInt");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("CHAR");
                b1.SimpleName("AChar");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("DOUBLE");
                b1.SimpleName("ADouble");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1._ModelDeclarations();
                b1.Namespace("org.whole.lang.language");
                b0.Resolver();
                b1.URI("http://lang.whole.org/Test1");
                b1._Model();
                b0._StageUpFragment();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment8() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("DataTypesGrammar");
                b2.LanguageDescriptor_();
                b2.URI("http://tests.lang.whole.org/DataTypes");
                b2.Namespace("org.whole.tests.datatypesgrammar");
                b2.Name("DataTypes");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("DataTypes");
                b2.LiteralTerminal_();
                b2.RegExp("\\p{javaWhitespace}*");
                b2.Category("SEPARATOR");
                b2.Literal("");
                b2._LiteralTerminal();
                b2.Productions_(18);
                b2.Production_();
                b2.NonTerminal("BOOLEAN");
                b2.DataTerminal_();
                b2.RegExp("[tT]rue|[fF]alse");
                b2.Category("LITERAL");
                b2.Format("%b");
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("INT");
                b2.DataTerminal_();
                b2.RegExp("([+-]?([0-9]+))");
                b2.Category("LITERAL");
                b2.Format("%d");
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DECIMAL");
                b2.DataTerminal_();
                b2.RegExp("([+-]?([0-9]++[\\.,][0-9]*+)|([\\.,][0-9]++))");
                b2.Category("LITERAL");
                b2.Format("%f");
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ISO_DATETIME");
                b2.DataTerminal_();
                b2.RegExp("[0-9]{4}-[01][0-9]-[0-3][0-9]T[0-5][0-9]:[0-2][0-9]:[0-5][0-9]\\.[0-9]{3}Z");
                b2.Category("LITERAL");
                b1.SameStageFragment_();
                b0.InvokeJavaClassMethod_();
                b0.Text("to extended iso date time");
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.util.StringUtils");
                b0.StringLiteral("toExtendedISO8601DateTime(java.util.Date)");
                b0.Expressions_(1);
                b0.Variable("self");
                b0._Expressions();
                b0._InvokeJavaClassMethod();
                b1._SameStageFragment();
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DATE");
                b2.DataTerminal_();
                b2.RegExp("[0-3][0-9]/[01][0-9]/[0-9]{4}");
                b2.Category("LITERAL");
                b2.Format("%1$td/%1$tm/%1$tY");
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("STRING");
                b2.DataTerminal_();
                b2.RegExp("[^\"]*+");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("εINDENT");
                b2.Empty_();
                b2.Literal("\t");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("εSP");
                b2.Empty_();
                b2.Literal(" ");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("εNL");
                b2.Empty_();
                b2.Literal("\n");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q{\\E");
                b2.Category("DELIMITER");
                b2.Literal("{");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.LiteralTerminal_();
                b2.RegExp(";");
                b2.Category("DELIMITER");
                b2.Literal(";\n");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN2");
                b2.LiteralTerminal_();
                b2.RegExp("x");
                b2.Category("DELIMITER");
                b2.Literal("x");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN3");
                b2.LiteralTerminal_();
                b2.RegExp("one");
                b2.Category("DELIMITER");
                b2.Literal("one");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN4");
                b2.LiteralTerminal_();
                b2.RegExp("two");
                b2.Category("DELIMITER");
                b2.Literal("two");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN5");
                b2.LiteralTerminal_();
                b2.RegExp("three");
                b2.Category("DELIMITER");
                b2.Literal("three");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN6");
                b2.LiteralTerminal_();
                b2.RegExp("\"");
                b2.Category("DELIMITER");
                b2.Literal("\"");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN7");
                b2.Empty_();
                b1.SameStageFragment_();
                org.whole.lang.queries.builders.IQueriesBuilder b3 = (org.whole.lang.queries.builders.IQueriesBuilder) op.wGetBuilder(org.whole.lang.queries.reflect.QueriesLanguageKit.URI);
                b3.Choose_(2);
                b3.If_();
                b3.TypeTest("BooleanLiteral");
                b3.StringLiteral("\n\n\n");
                b3._If();
                b3.StringLiteral("");
                b3._Choose();
                b1._SameStageFragment();
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN8");
                b2.LiteralTerminal_();
                b2.RegExp("}");
                b2.Category("DELIMITER");
                b2.Literal("\n}");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(9);
                b2.Production_();
                b2.NonTerminal("DataTypes");
                b2.Concatenate_(4);
                b2.NonTerminal("TOKEN");
                b2.NonTerminal("εNL");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b2.NonTerminal("TOKEN1");
                b2.Concatenate_(3);
                b2.NonTerminal("εINDENT");
                b2.NonTerminal("DataType");
                b2.NonTerminal("TOKEN7");
                b2._Concatenate();
                b2._Repeat();
                b2.NonTerminal("TOKEN8");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("EnumType");
                b2.Choose_(3);
                b2.As_();
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN2");
                b2.NonTerminal("εSP");
                b2.NonTerminal("TOKEN3");
                b2._Concatenate();
                b2.Name("ONE");
                b2._As();
                b2.As_();
                b2.NonTerminal("TOKEN4");
                b2.Name("TWO");
                b2._As();
                b2.As_();
                b2.NonTerminal("TOKEN5");
                b2.Name("THREE");
                b2._As();
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("BooleanLiteral");
                b2.NonTerminal("BOOLEAN");
                b2.DataType("BOOLEAN");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DecimalLiteral");
                b2.NonTerminal("DECIMAL");
                b2.CustomDataType("java.math.BigDecimal");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DateTimeLiteral");
                b2.NonTerminal("ISO_DATETIME");
                b2.DataType("DATE");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DateLiteral");
                b2.NonTerminal("DATE");
                b2.DataType("DATE");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("IntLiteral");
                b2.NonTerminal("INT");
                b2.DataType("LONG");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("StringLiteral");
                b2.NonTerminal("STRING");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DataType");
                b2.Choose_(7);
                b2.NonTerminal("EnumType");
                b2.NonTerminal("BooleanLiteral");
                b2.NonTerminal("DecimalLiteral");
                b2.NonTerminal("DateTimeLiteral");
                b2.NonTerminal("DateLiteral");
                b2.NonTerminal("IntLiteral");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN6");
                b2.NonTerminal("StringLiteral");
                b2.NonTerminal("TOKEN6");
                b2._Concatenate();
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.URI("http://tests.whole.org/DataTypesGrammar");
                b2.Namespace("org.whole.tests.datatypesgrammar");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment9() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.commons.builders.ICommonsBuilder b0 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b0.StageUpFragment_();
                org.whole.lang.models.builders.IModelsBuilder b1 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b1.Model_();
                b1.SimpleName("DataTypes");
                b1.TypeRelations_(0);
                b1._TypeRelations();
                b1.ModelDeclarations_(9);
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("DataTypes");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("DataType");
                b1._CompositeEntity();
                b1.EnumEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("EnumType");
                b1.Types_(1);
                b1.SimpleName("DataType");
                b1._Types();
                b1.EnumValues_(3);
                b1.EnumValue("ONE");
                b1.EnumValue("TWO");
                b1.EnumValue("THREE");
                b1._EnumValues();
                b1._EnumEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("BooleanLiteral");
                b1.Types_(1);
                b1.SimpleName("DataType");
                b1._Types();
                b1.DataType("boolean");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("DecimalLiteral");
                b1.Types_(1);
                b1.SimpleName("DataType");
                b1._Types();
                b1.DataType("java.math.BigDecimal");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("DateTimeLiteral");
                b1.Types_(1);
                b1.SimpleName("DataType");
                b1._Types();
                b1.DataType("java.util.Date");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("DateLiteral");
                b1.Types_(1);
                b1.SimpleName("DataType");
                b1._Types();
                b1.DataType("java.util.Date");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("IntLiteral");
                b1.Types_(1);
                b1.SimpleName("DataType");
                b1._Types();
                b1.DataType("long");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("StringLiteral");
                b1.Types_(1);
                b1.SimpleName("DataType");
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(1);
                b1.EntityModifier("abstract");
                b1._EntityModifiers();
                b1.SimpleName("DataType");
                b1.Types_(0);
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1._ModelDeclarations();
                b1.Namespace("org.whole.tests.datatypesgrammar");
                b0.Resolver();
                b1.URI("http://tests.lang.whole.org/DataTypes");
                b1._Model();
                b0._StageUpFragment();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment10() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("MessagesGrammar");
                b2.LanguageDescriptor_();
                b2.URI("http://test.lang.whole.org/Messages");
                b2.Namespace("org.whole.tests.messagesgrammar");
                b2.Name("Messages");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("Messages");
                b2.LiteralTerminal_();
                b2.RegExp("\\p{javaWhitespace}+");
                b2.Category("SEPARATOR");
                b2.Literal(" ");
                b2._LiteralTerminal();
                b2.Productions_(6);
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("hd:");
                b2.Category("DELIMITER");
                b2.Literal("hd:");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.LiteralTerminal_();
                b2.RegExp("b");
                b2.Category("DELIMITER");
                b2.Literal("b");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN2");
                b2.LiteralTerminal_();
                b2.RegExp("\\|\\|");
                b2.Category("DELIMITER");
                b2.Literal("||");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN3");
                b2.LiteralTerminal_();
                b2.RegExp("!!");
                b2.Category("DELIMITER");
                b2.Literal("!!\n");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN4");
                b2.LiteralTerminal_();
                b2.RegExp("\\d.*");
                b2.Category("DELIMITER");
                b2.Literal("num");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN5");
                b2.LiteralTerminal_();
                b2.RegExp("\\D.*");
                b2.Category("DELIMITER");
                b2.Literal("non_num");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(7);
                b2.Production_();
                b2.NonTerminal("Messages");
                b2.Repeat_();
                b2.Size(1);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("Message");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Message");
                b2.Concatenate_(4);
                b2.When_();
                b2.Or_();
                b2.NonTerminal("TOKEN");
                b2.Not_();
                b2.NonTerminal("TOKEN1");
                b2._Not();
                b2._Or();
                b2.Concatenate_(2);
                b2.NonTerminal("TOKEN");
                b2.As_();
                b2.NonTerminal("Header");
                b2.Name("header");
                b2._As();
                b2._Concatenate();
                b2._When();
                b2.NonTerminal("TOKEN2");
                b2.As_();
                b2.NonTerminal("Body");
                b2.Name("body");
                b2._As();
                b2.NonTerminal("TOKEN3");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Body");
                b2.Choose_(3);
                b2.When_();
                b2.NonTerminal("TOKEN4");
                b2.NonTerminal("NumericBody");
                b2._When();
                b2.When_();
                b2.NonTerminal("TOKEN5");
                b2.NonTerminal("NonNumericBody");
                b2._When();
                b2.NonTerminal("OtherBody");
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NumericBody");
                b2.DataTerminal_();
                b2.RegExp("\\d+");
                b2.Category("LITERAL");
                b2.Format("%d");
                b2._DataTerminal();
                b2.DataType("INT");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NonNumericBody");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("OtherBody");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Header");
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2._Productions();
                b2.URI("http://tests.whole.org/MessagesGrammar");
                b2.Namespace("org.whole.tests.messagesgrammar");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment11() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.commons.builders.ICommonsBuilder b0 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b0.StageUpFragment_();
                org.whole.lang.models.builders.IModelsBuilder b1 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b1.Model_();
                b1.SimpleName("Messages");
                b1.TypeRelations_(0);
                b1._TypeRelations();
                b1.ModelDeclarations_(7);
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Messages");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("Message");
                b1._CompositeEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Message");
                b1.Types_(0);
                b1._Types();
                b1.Features_(2);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Header");
                b1.SimpleName("header");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Body");
                b1.SimpleName("body");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(1);
                b1.EntityModifier("abstract");
                b1._EntityModifiers();
                b1.SimpleName("Body");
                b1.Types_(0);
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("NumericBody");
                b1.Types_(1);
                b1.SimpleName("Body");
                b1._Types();
                b1.DataType("int");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("NonNumericBody");
                b1.Types_(1);
                b1.SimpleName("Body");
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("OtherBody");
                b1.Types_(1);
                b1.SimpleName("Body");
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Header");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1._ModelDeclarations();
                b1.Namespace("org.whole.tests.messagesgrammar");
                b0.Resolver();
                b1.URI("http://test.lang.whole.org/Messages");
                b1._Model();
                b0._StageUpFragment();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment12() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("StateMachineGrammar");
                b2.LanguageDescriptor_();
                b2.URI("http://tests.lang.whole.org/StateMachine");
                b2.Namespace("org.whole.tests.statemachinegrammar");
                b2.Name("StateMachine");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("StateMachine");
                b2.LiteralTerminal_();
                b2.RegExp("[ \\n\\r\\t]*");
                b2.Category("SEPARATOR");
                b2.Literal("");
                b2._LiteralTerminal();
                b2.Productions_(12);
                b2.Production_();
                b2.NonTerminal("NL");
                b2.Empty_();
                b2.Literal("\n");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("SP");
                b2.Empty_();
                b2.Literal(" ");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("INDENT");
                b2.Empty_();
                b2.Literal("\t");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("events");
                b2.Category("DELIMITER");
                b2.Literal("events");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.LiteralTerminal_();
                b2.RegExp("end");
                b2.Category("DELIMITER");
                b2.Literal("end");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN2");
                b2.LiteralTerminal_();
                b2.RegExp("resetEvents");
                b2.Category("DELIMITER");
                b2.Literal("resetEvents");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN3");
                b2.LiteralTerminal_();
                b2.RegExp("commands");
                b2.Category("DELIMITER");
                b2.Literal("commands");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN4");
                b2.LiteralTerminal_();
                b2.RegExp("state");
                b2.Category("DELIMITER");
                b2.Literal("state");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN5");
                b2.LiteralTerminal_();
                b2.RegExp("actions");
                b2.Category("DELIMITER");
                b2.Literal("actions");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN6");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q{\\E");
                b2.Category("DELIMITER");
                b2.Literal("{");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN7");
                b2.LiteralTerminal_();
                b2.RegExp("}");
                b2.Category("DELIMITER");
                b2.Literal("}");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN8");
                b2.LiteralTerminal_();
                b2.RegExp("=>");
                b2.Category("DELIMITER");
                b2.Literal("=>");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(12);
                b2.Production_();
                b2.NonTerminal("StateMachine");
                b2.Concatenate_(10);
                b2.Split_();
                b2.ByDelimiter_();
                b2.RegExp("end");
                b2._ByDelimiter();
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.NonTerminal("NL");
                b2.As_();
                b2.NonTerminal("Events");
                b2.Name("events");
                b2._As();
                b2._Concatenate();
                b2._Split();
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("NL");
                b2.Split_();
                b2.ByDelimiter_();
                b2.RegExp("end");
                b2._ByDelimiter();
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN2");
                b2.NonTerminal("NL");
                b2.As_();
                b2.NonTerminal("ResetEvents");
                b2.Name("resetEvents");
                b2._As();
                b2._Concatenate();
                b2._Split();
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("NL");
                b2.Split_();
                b2.ByDelimiter_();
                b2.RegExp("end");
                b2._ByDelimiter();
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN3");
                b2.NonTerminal("NL");
                b2.As_();
                b2.NonTerminal("Commands");
                b2.Name("commands");
                b2._As();
                b2._Concatenate();
                b2._Split();
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("NL");
                b2.As_();
                b2.NonTerminal("States");
                b2.Name("states");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("State");
                b2.Concatenate_(3);
                b2.Split_();
                b2.ByDelimiter_();
                b2.RegExp("end");
                b2._ByDelimiter();
                b2.Concatenate_(6);
                b2.NonTerminal("TOKEN4");
                b2.NonTerminal("SP");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("NL");
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("Actions");
                b2.Name("actions");
                b2._As();
                b2._Optional();
                b2.As_();
                b2.NonTerminal("Transitions");
                b2.Name("transitions");
                b2._As();
                b2._Concatenate();
                b2._Split();
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Transition");
                b2.Concatenate_(7);
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("event");
                b2._As();
                b2.NonTerminal("SP");
                b2.NonTerminal("TOKEN8");
                b2.NonTerminal("SP");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("state");
                b2._As();
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ID");
                b2.DataTerminal_();
                b2.RegExp("[a-zA-Z][a-zA-Z0-9]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Event");
                b2.Concatenate_(5);
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("code");
                b2._As();
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Events");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("Event");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ResetEvents");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.Concatenate_(3);
                b2.NonTerminal("INDENT");
                b2.NonTerminal("ID");
                b2.NonTerminal("NL");
                b2._Concatenate();
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Command");
                b2.Concatenate_(5);
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("code");
                b2._As();
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Commands");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("Command");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("States");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("State");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Actions");
                b2.Concatenate_(7);
                b2.NonTerminal("INDENT");
                b2.NonTerminal("TOKEN5");
                b2.NonTerminal("SP");
                b2.NonTerminal("TOKEN6");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b2.NonTerminal("SP");
                b2.NonTerminal("ID");
                b2._Repeat();
                b2.NonTerminal("TOKEN7");
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Transitions");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("Transition");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.URI("http://tests.lang.whole.org/StateMachineGrammar");
                b2.Namespace("org.whole.tests.statemachinegrammar");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment13() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.commons.builders.ICommonsBuilder b0 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b0.StageUpFragment_();
                org.whole.lang.models.builders.IModelsBuilder b1 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b1.Model_();
                b1.SimpleName("StateMachine");
                b1.TypeRelations_(0);
                b1._TypeRelations();
                b1.ModelDeclarations_(12);
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("StateMachine");
                b1.Types_(0);
                b1._Types();
                b1.Features_(4);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Events");
                b1.SimpleName("events");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("ResetEvents");
                b1.SimpleName("resetEvents");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Commands");
                b1.SimpleName("commands");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("States");
                b1.SimpleName("states");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("State");
                b1.Types_(0);
                b1._Types();
                b1.Features_(3);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("ID");
                b1.SimpleName("name");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(1);
                b1.FeatureModifier("optional");
                b1._FeatureModifiers();
                b1.SimpleName("Actions");
                b1.SimpleName("actions");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Transitions");
                b1.SimpleName("transitions");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Transition");
                b1.Types_(0);
                b1._Types();
                b1.Features_(2);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("ID");
                b1.SimpleName("event");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("ID");
                b1.SimpleName("state");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("ID");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Event");
                b1.Types_(0);
                b1._Types();
                b1.Features_(2);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("ID");
                b1.SimpleName("name");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("ID");
                b1.SimpleName("code");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Events");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("Event");
                b1._CompositeEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("ResetEvents");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("ID");
                b1._CompositeEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Command");
                b1.Types_(0);
                b1._Types();
                b1.Features_(2);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("ID");
                b1.SimpleName("name");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("ID");
                b1.SimpleName("code");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Commands");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("Command");
                b1._CompositeEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("States");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("State");
                b1._CompositeEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Actions");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("ID");
                b1._CompositeEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Transitions");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("Transition");
                b1._CompositeEntity();
                b1._ModelDeclarations();
                b1.Namespace("org.whole.tests.statemachinegrammar");
                b0.Resolver();
                b1.URI("http://tests.lang.whole.org/StateMachine");
                b1._Model();
                b0._StageUpFragment();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment14() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("StateMachineGramar2");
                b2.LanguageDescriptor_();
                b2.URI("http://tests.lang.whole.org/StateMachine2");
                b2.Namespace("org.whole.tests.statemachine2grammar");
                b2.Name("StateMachine2");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("StateMachine");
                b2.LiteralTerminal_();
                b2.RegExp("[ \\n\\r\\t]*");
                b2.Category("SEPARATOR");
                b2.Literal("");
                b2._LiteralTerminal();
                b2.Productions_(12);
                b2.Production_();
                b2.NonTerminal("NL");
                b2.Empty_();
                b2.Literal("\n");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("SP");
                b2.Empty_();
                b2.Literal(" ");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("INDENT");
                b2.Empty_();
                b2.Literal("\t");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("events");
                b2.Category("DELIMITER");
                b2.Literal("events");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.LiteralTerminal_();
                b2.RegExp("end");
                b2.Category("DELIMITER");
                b2.Literal("end");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN2");
                b2.LiteralTerminal_();
                b2.RegExp("resetEvents");
                b2.Category("DELIMITER");
                b2.Literal("resetEvents");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN3");
                b2.LiteralTerminal_();
                b2.RegExp("commands");
                b2.Category("DELIMITER");
                b2.Literal("commands");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN4");
                b2.LiteralTerminal_();
                b2.RegExp("state");
                b2.Category("DELIMITER");
                b2.Literal("state");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN5");
                b2.LiteralTerminal_();
                b2.RegExp("actions");
                b2.Category("DELIMITER");
                b2.Literal("actions");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN6");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q{\\E");
                b2.Category("DELIMITER");
                b2.Literal("{");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN7");
                b2.LiteralTerminal_();
                b2.RegExp("}");
                b2.Category("DELIMITER");
                b2.Literal("}");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN8");
                b2.LiteralTerminal_();
                b2.RegExp("=>");
                b2.Category("DELIMITER");
                b2.Literal("=>");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(12);
                b2.Production_();
                b2.NonTerminal("StateMachine");
                b2.Concatenate_(16);
                b2.NonTerminal("TOKEN");
                b2.NonTerminal("NL");
                b2.As_();
                b2.NonTerminal("Events");
                b2.Name("events");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("NL");
                b2.NonTerminal("TOKEN2");
                b2.NonTerminal("NL");
                b2.As_();
                b2.NonTerminal("ResetEvents");
                b2.Name("resetEvents");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("NL");
                b2.NonTerminal("TOKEN3");
                b2.NonTerminal("NL");
                b2.As_();
                b2.NonTerminal("Commands");
                b2.Name("commands");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("NL");
                b2.As_();
                b2.NonTerminal("States");
                b2.Name("states");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("State");
                b2.Concatenate_(8);
                b2.NonTerminal("TOKEN4");
                b2.NonTerminal("SP");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("NL");
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("Actions");
                b2.Name("actions");
                b2._As();
                b2._Optional();
                b2.As_();
                b2.NonTerminal("Transitions");
                b2.Name("transitions");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Transition");
                b2.Concatenate_(7);
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("event");
                b2._As();
                b2.NonTerminal("SP");
                b2.NonTerminal("TOKEN8");
                b2.NonTerminal("SP");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("state");
                b2._As();
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ID");
                b2.When_();
                b2.Not_();
                b2.NonTerminal("TOKEN1");
                b2._Not();
                b2.DataTerminal_();
                b2.RegExp("[a-zA-Z][a-zA-Z0-9]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._When();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Event");
                b2.Concatenate_(5);
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("code");
                b2._As();
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Events");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("Event");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("ResetEvents");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.Concatenate_(3);
                b2.NonTerminal("INDENT");
                b2.NonTerminal("ID");
                b2.NonTerminal("NL");
                b2._Concatenate();
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Command");
                b2.Concatenate_(5);
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("INDENT");
                b2.As_();
                b2.NonTerminal("ID");
                b2.Name("code");
                b2._As();
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Commands");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("Command");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("States");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("State");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Actions");
                b2.Concatenate_(7);
                b2.NonTerminal("INDENT");
                b2.NonTerminal("TOKEN5");
                b2.NonTerminal("SP");
                b2.NonTerminal("TOKEN6");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b2.NonTerminal("SP");
                b2.NonTerminal("ID");
                b2._Repeat();
                b2.NonTerminal("TOKEN7");
                b2.NonTerminal("NL");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Transitions");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("Transition");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.URI("http://tests.lang.whole.org/StateMachine2Grammar");
                b2.Namespace("org.whole.tests.statemachine2grammar");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment15() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.commons.builders.ICommonsBuilder b0 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b0.StageUpFragment_();
                org.whole.lang.models.builders.IModelsBuilder b1 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b1.Model_();
                b1.SimpleName("StateMachine2");
                b1.TypeRelations_(0);
                b1._TypeRelations();
                b1.ModelDeclarations_(12);
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("StateMachine");
                b1.Types_(0);
                b1._Types();
                b1.Features_(4);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Events");
                b1.SimpleName("events");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("ResetEvents");
                b1.SimpleName("resetEvents");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Commands");
                b1.SimpleName("commands");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("States");
                b1.SimpleName("states");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("State");
                b1.Types_(0);
                b1._Types();
                b1.Features_(3);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("ID");
                b1.SimpleName("name");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(1);
                b1.FeatureModifier("optional");
                b1._FeatureModifiers();
                b1.SimpleName("Actions");
                b1.SimpleName("actions");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Transitions");
                b1.SimpleName("transitions");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Transition");
                b1.Types_(0);
                b1._Types();
                b1.Features_(2);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("ID");
                b1.SimpleName("event");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("ID");
                b1.SimpleName("state");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("ID");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Event");
                b1.Types_(0);
                b1._Types();
                b1.Features_(2);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("ID");
                b1.SimpleName("name");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("ID");
                b1.SimpleName("code");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Events");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("Event");
                b1._CompositeEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("ResetEvents");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("ID");
                b1._CompositeEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Command");
                b1.Types_(0);
                b1._Types();
                b1.Features_(2);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("ID");
                b1.SimpleName("name");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("ID");
                b1.SimpleName("code");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Commands");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("Command");
                b1._CompositeEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("States");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("State");
                b1._CompositeEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Actions");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("ID");
                b1._CompositeEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Transitions");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("Transition");
                b1._CompositeEntity();
                b1._ModelDeclarations();
                b1.Namespace("org.whole.tests.statemachine2grammar");
                b0.Resolver();
                b1.URI("http://tests.lang.whole.org/StateMachine2");
                b1._Model();
                b0._StageUpFragment();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment16() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("FamilyGrammar");
                b2.LanguageDescriptor_();
                b2.URI("http://oslo.examples.whole.org/Family");
                b2.Namespace("org.whole.examples.familygrammar");
                b2.Name("Family");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("Persons");
                b2.LiteralTerminal_();
                b2.RegExp("[ \\n\\r\\t]*");
                b2.Category("SEPARATOR");
                b2.Literal(" ");
                b2._LiteralTerminal();
                b2.Productions_(5);
                b2.Production_();
                b2.NonTerminal("Name");
                b2.DataTerminal_();
                b2.RegExp("[a-zA-Z]+");
                b2.Category("SEPARATOR");
                b2.Format("%s");
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp(",");
                b2.Category("DELIMITER");
                b2.Literal(", ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q{\\E");
                b2.Category("DELIMITER");
                b2.Literal("{");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN2");
                b2.LiteralTerminal_();
                b2.RegExp("}");
                b2.Category("DELIMITER");
                b2.Literal("}");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN3");
                b2.LiteralTerminal_();
                b2.RegExp(";");
                b2.Category("DELIMITER");
                b2.Literal(";");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(4);
                b2.Production_();
                b2.NonTerminal("Persons");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b2.NonTerminal("TOKEN");
                b2.NonTerminal("Person");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("First");
                b2.NonTerminal("Name");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Last");
                b2.NonTerminal("Name");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Person");
                b2.Concatenate_(3);
                b2.As_();
                b2.NonTerminal("First");
                b2.Name("first");
                b2._As();
                b2.As_();
                b2.NonTerminal("Last");
                b2.Name("last");
                b2._As();
                b2.Optional_();
                b2.As_();
                b2.Concatenate_(4);
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("Persons");
                b2.NonTerminal("TOKEN2");
                b2.NonTerminal("TOKEN3");
                b2._Concatenate();
                b2.Name("children");
                b2._As();
                b2._Optional();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.URI("http://examples.whole.org/FamilyGrammar");
                b2.Namespace("org.whole.examples.familygrammar");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment17() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.commons.builders.ICommonsBuilder b0 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b0.StageUpFragment_();
                org.whole.lang.models.builders.IModelsBuilder b1 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b1.Model_();
                b1.SimpleName("Family");
                b1.TypeRelations_(0);
                b1._TypeRelations();
                b1.ModelDeclarations_(4);
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Persons");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("Person");
                b1._CompositeEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("First");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Last");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Person");
                b1.Types_(0);
                b1._Types();
                b1.Features_(3);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("First");
                b1.SimpleName("first");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Last");
                b1.SimpleName("last");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(1);
                b1.FeatureModifier("optional");
                b1._FeatureModifiers();
                b1.SimpleName("Persons");
                b1.SimpleName("children");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1._ModelDeclarations();
                b1.Namespace("org.whole.examples.familygrammar");
                b0.Resolver();
                b1.URI("http://oslo.examples.whole.org/Family");
                b1._Model();
                b0._StageUpFragment();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment18() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("MT3Grammar");
                b2.LanguageDescriptor_();
                b2.URI("http://test.whole.org/MT3");
                b2.Namespace("org.whole.examples.mt3grammar");
                b2.Name("MT3");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("Message");
                b1.Resolver();
                b2.Productions_(6);
                b2.Production_();
                b2.NonTerminal("LINE_SEPARATOR");
                b2.LiteralTerminal_();
                b2.RegExp("\\r\\n|[\\n\\r\\u2028\\u2029\\u0085]");
                b2.Category("SEPARATOR");
                b2.Literal("\n");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("MSG_SEPARATOR");
                b2.LiteralTerminal_();
                b2.RegExp(",(\\r\\n|[\\n\\r\\u2028\\u2029\\u0085])");
                b2.Category("SEPARATOR");
                b2.Literal(",\n");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q{\\E");
                b2.Category("LITERAL");
                b2.Literal("{");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.LiteralTerminal_();
                b2.RegExp("}");
                b2.Category("LITERAL");
                b2.Literal("}");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN2");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q{20:\\E");
                b2.Category("LITERAL");
                b2.Literal("{20:");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN3");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q{30:\\E");
                b2.Category("LITERAL");
                b2.Literal("{30:");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(13);
                b2.Production_();
                b2.NonTerminal("Message");
                b2.Concatenate_(5);
                b2.As_();
                b2.NonTerminal("Header");
                b2.Name("header");
                b2._As();
                b2.NonTerminal("LINE_SEPARATOR");
                b2.As_();
                b2.NonTerminal("Body");
                b2.Name("body");
                b2._As();
                b2.NonTerminal("LINE_SEPARATOR");
                b2.As_();
                b2.NonTerminal("Trailer");
                b2.Name("trailer");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Header");
                b2.Concatenate_(4);
                b2.NonTerminal("TOKEN");
                b2.As_();
                b2.NonTerminal("Date");
                b2.Name("date");
                b2._As();
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("Decimal18");
                b2.Name("totAmount");
                b2._As();
                b2._Optional();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Body");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b2.NonTerminal("MSG_SEPARATOR");
                b2.NonTerminal("BodyElement");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("BodyElement");
                b2.Choose_(2);
                b2.NonTerminal("Msg1");
                b2.NonTerminal("Msg2");
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Msg1");
                b2.Concatenate_(4);
                b2.NonTerminal("TOKEN2");
                b2.As_();
                b2.NonTerminal("Bic");
                b2.Name("bic");
                b2._As();
                b2.As_();
                b2.NonTerminal("Decimal18");
                b2.Name("amount");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Msg2");
                b2.Concatenate_(5);
                b2.NonTerminal("TOKEN3");
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("name");
                b2._As();
                b2.As_();
                b2.NonTerminal("DateOfBidth");
                b2.Name("dateOfBidth");
                b2._As();
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("Decimal18");
                b2.Name("amount");
                b2._As();
                b2._Optional();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Trailer");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN");
                b2.As_();
                b2.NonTerminal("NofMsg");
                b2.Name("nofMsg");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Decimal18");
                b2.Split_();
                b2.BySize(18);
                b2.DataTerminal_();
                b2.RegExp("[ 0-9,.]*");
                b2.Category("LITERAL");
                b2.Format("%18s");
                b2._DataTerminal();
                b2._Split();
                b2.DataType("DOUBLE");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Date");
                b2.Split_();
                b2.BySize(6);
                b2.DataTerminal_();
                b2.RegExp("[0-9]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Bic");
                b2.Split_();
                b2.BySize(11);
                b2.DataTerminal_();
                b2.RegExp("[0-9A-Z]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Name");
                b2.Split_();
                b2.BySize(20);
                b2.DataTerminal_();
                b2.RegExp(".*");
                b2.Category("LITERAL");
                b2.Format("%-20s");
                b2._DataTerminal();
                b2._Split();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DateOfBidth");
                b2.Split_();
                b2.BySize(6);
                b2.DataTerminal_();
                b2.RegExp("[0-9]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NofMsg");
                b2.Split_();
                b2.BySize(2);
                b2.DataTerminal_();
                b2.RegExp("[0-9]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2._Split();
                b2.DataType("STRING");
                b2._Production();
                b2._Productions();
                b2.URI("http://examples.whole.org/MT3Grammar");
                b2.Namespace("org.whole.examples.mt3grammar");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment19() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.commons.builders.ICommonsBuilder b0 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b0.StageUpFragment_();
                org.whole.lang.models.builders.IModelsBuilder b1 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b1.Model_();
                b1.SimpleName("MT3");
                b1.TypeRelations_(0);
                b1._TypeRelations();
                b1.ModelDeclarations_(13);
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Message");
                b1.Types_(0);
                b1._Types();
                b1.Features_(3);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Header");
                b1.SimpleName("header");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Body");
                b1.SimpleName("body");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Trailer");
                b1.SimpleName("trailer");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Header");
                b1.Types_(0);
                b1._Types();
                b1.Features_(2);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Date");
                b1.SimpleName("date");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(1);
                b1.FeatureModifier("optional");
                b1._FeatureModifiers();
                b1.SimpleName("Decimal18");
                b1.SimpleName("totAmount");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Body");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("BodyElement");
                b1._CompositeEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(1);
                b1.EntityModifier("abstract");
                b1._EntityModifiers();
                b1.SimpleName("BodyElement");
                b1.Types_(0);
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Msg1");
                b1.Types_(1);
                b1.SimpleName("BodyElement");
                b1._Types();
                b1.Features_(2);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Bic");
                b1.SimpleName("bic");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Decimal18");
                b1.SimpleName("amount");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Msg2");
                b1.Types_(1);
                b1.SimpleName("BodyElement");
                b1._Types();
                b1.Features_(3);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Name");
                b1.SimpleName("name");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("DateOfBidth");
                b1.SimpleName("dateOfBidth");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(1);
                b1.FeatureModifier("optional");
                b1._FeatureModifiers();
                b1.SimpleName("Decimal18");
                b1.SimpleName("amount");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Trailer");
                b1.Types_(0);
                b1._Types();
                b1.Features_(1);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("NofMsg");
                b1.SimpleName("nofMsg");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Decimal18");
                b1.Types_(0);
                b1._Types();
                b1.DataType("double");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Date");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Bic");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Name");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("DateOfBidth");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("NofMsg");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1._ModelDeclarations();
                b1.Namespace("org.whole.examples.mt3grammar");
                b0.Resolver();
                b1.URI("http://test.whole.org/MT3");
                b1._Model();
                b0._StageUpFragment();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment20() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("XmlGrammar");
                b2.LanguageDescriptor_();
                b2.URI("http://lang.whole.org/Xml");
                b2.Namespace("org.whole.lang.xml");
                b2.Name("Xml");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("Document");
                b2.LiteralTerminal_();
                b2.RegExp("\\p{javaWhitespace}*");
                b2.Category("SEPARATOR");
                b2.Literal("");
                b2._LiteralTerminal();
                b2.Productions_(23);
                b2.Production_();
                b2.NonTerminal("QS");
                b2.DataTerminal_();
                b2.RegExp("[^\"]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NCNAME");
                b2.DataTerminal_();
                b2.RegExp("[a-zA-Z][_a-zA-Z0-9]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("STRING");
                b2.DataTerminal_();
                b2.RegExp("(?s).*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("SP");
                b2.LiteralTerminal_();
                b2.RegExp("\\p{javaWhitespace}+");
                b2.Category("SEPARATOR");
                b2.Literal(" ");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q<?xml\\E");
                b2.Category("DELIMITER");
                b2.Literal("<?xml");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN1");
                b2.Empty_();
                b2.Literal(" ");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN2");
                b2.LiteralTerminal_();
                b2.RegExp("version");
                b2.Category("DELIMITER");
                b2.Literal("version");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN3");
                b2.LiteralTerminal_();
                b2.RegExp("=");
                b2.Category("DELIMITER");
                b2.Literal("=");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN4");
                b2.LiteralTerminal_();
                b2.RegExp("\"");
                b2.Category("DELIMITER");
                b2.Literal("\"");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN5");
                b2.LiteralTerminal_();
                b2.RegExp("encoding");
                b2.Category("DELIMITER");
                b2.Literal("encoding");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN6");
                b2.LiteralTerminal_();
                b2.RegExp("standalone");
                b2.Category("DELIMITER");
                b2.Literal("standalone");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN7");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q?>\\E");
                b2.Category("DELIMITER");
                b2.Literal("?>");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN8");
                b2.Empty_();
                b2.Literal("\n");
                b2._Empty();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN9");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q<!DOCTYPE\\E");
                b2.Category("DELIMITER");
                b2.Literal("<!DOCTYPE");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN10");
                b2.LiteralTerminal_();
                b2.RegExp(">");
                b2.Category("DELIMITER");
                b2.Literal(">");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN11");
                b2.LiteralTerminal_();
                b2.RegExp("<");
                b2.Category("DELIMITER");
                b2.Literal("<");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN12");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q</\\E");
                b2.Category("DELIMITER");
                b2.Literal("</");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN13");
                b2.LiteralTerminal_();
                b2.RegExp(":");
                b2.Category("DELIMITER");
                b2.Literal(":");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN14");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q<![CDATA[\\E");
                b2.Category("DELIMITER");
                b2.Literal("<![CDATA[");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN15");
                b2.LiteralTerminal_();
                b2.RegExp("]]>");
                b2.Category("DELIMITER");
                b2.Literal("]]>");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN16");
                b2.LiteralTerminal_();
                b2.RegExp("<!--");
                b2.Category("DELIMITER");
                b2.Literal("<!--");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN17");
                b2.LiteralTerminal_();
                b2.RegExp("-->");
                b2.Category("DELIMITER");
                b2.Literal("-->");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("TOKEN18");
                b2.LiteralTerminal_();
                b2.RegExp("\\Q<?\\E");
                b2.Category("DELIMITER");
                b2.Literal("<?");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(31);
                b2.Production_();
                b2.NonTerminal("Document");
                b2.Concatenate_(2);
                b2.As_();
                b2.NonTerminal("Prolog");
                b2.Name("prolog");
                b2._As();
                b2.As_();
                b2.NonTerminal("Element");
                b2.Name("element");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Element");
                b2.Concatenate_(8);
                b2.NonTerminal("TOKEN11");
                b2.As_();
                b2.NonTerminal("IName");
                b2.Name("tag");
                b2._As();
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("Attributes");
                b2.Name("attributes");
                b2._As();
                b2._Optional();
                b2.NonTerminal("TOKEN10");
                b2.As_();
                b2.NonTerminal("IContent");
                b2.Name("content");
                b2._As();
                b2.NonTerminal("TOKEN12");
                b2.As_();
                b2.NonTerminal("IName");
                b2.Name("tag");
                b2._As();
                b2.NonTerminal("TOKEN10");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("IName");
                b2.Choose_(2);
                b2.NonTerminal("Name");
                b2.NonTerminal("QualifiedName");
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("IContent");
                b2.Choose_(6);
                b2.NonTerminal("Element");
                b2.NonTerminal("CharData");
                b2.NonTerminal("CDataSect");
                b2.NonTerminal("Comment");
                b2.NonTerminal("PI");
                b2.NonTerminal("Content");
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("IMisc");
                b2.Choose_(2);
                b2.NonTerminal("PI");
                b2.NonTerminal("Comment");
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Version");
                b2.NonTerminal("QS");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Encoding");
                b2.NonTerminal("QS");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Standalone");
                b2.DataTerminal_();
                b2.RegExp("yes|no");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("BOOLEAN");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("XMLDecl");
                b2.Concatenate_(12);
                b2.NonTerminal("TOKEN");
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("TOKEN2");
                b2.NonTerminal("TOKEN3");
                b2.NonTerminal("TOKEN4");
                b2.As_();
                b2.NonTerminal("Version");
                b2.Name("version");
                b2._As();
                b2.NonTerminal("TOKEN4");
                b2.Optional_();
                b2.As_();
                b2.Concatenate_(6);
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("TOKEN5");
                b2.NonTerminal("TOKEN3");
                b2.NonTerminal("TOKEN4");
                b2.NonTerminal("Encoding");
                b2.NonTerminal("TOKEN4");
                b2._Concatenate();
                b2.Name("encoding");
                b2._As();
                b2._Optional();
                b2.Optional_();
                b2.As_();
                b2.Concatenate_(6);
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("TOKEN6");
                b2.NonTerminal("TOKEN3");
                b2.NonTerminal("TOKEN4");
                b2.NonTerminal("Standalone");
                b2.NonTerminal("TOKEN4");
                b2._Concatenate();
                b2.Name("standalone");
                b2._As();
                b2._Optional();
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("TOKEN7");
                b2.NonTerminal("TOKEN8");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("SystemLiteral");
                b2.NonTerminal("QS");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("SystemId");
                b2.Concatenate_(1);
                b2.As_();
                b2.NonTerminal("SystemLiteral");
                b2.Name("systemLiteral");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("PubidLiteral");
                b2.NonTerminal("QS");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("PublicId");
                b2.Concatenate_(3);
                b2.As_();
                b2.NonTerminal("PubidLiteral");
                b2.Name("pubidLiteral");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2.As_();
                b2.NonTerminal("SystemLiteral");
                b2.Name("systemLiteral");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("IExternalId");
                b2.Choose_(2);
                b2.NonTerminal("SystemId");
                b2.NonTerminal("PublicId");
                b2._Choose();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("DocTypeDecl");
                b2.Concatenate_(6);
                b2.NonTerminal("TOKEN9");
                b2.NonTerminal("TOKEN1");
                b2.As_();
                b2.NonTerminal("IName");
                b2.Name("name");
                b2._As();
                b2.Optional_();
                b2.As_();
                b2.Concatenate_(2);
                b2.NonTerminal("TOKEN1");
                b2.NonTerminal("IExternalId");
                b2._Concatenate();
                b2.Name("externalId");
                b2._As();
                b2._Optional();
                b2.NonTerminal("TOKEN10");
                b2.NonTerminal("TOKEN8");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Misc");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b2.NonTerminal("TOKEN8");
                b2.NonTerminal("IMisc");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Prolog");
                b2.Concatenate_(3);
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("XMLDecl");
                b2.Name("xmlDecl");
                b2._As();
                b2._Optional();
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("DocTypeDecl");
                b2.Name("docTypeDecl");
                b2._As();
                b2._Optional();
                b2.Optional_();
                b2.As_();
                b2.NonTerminal("Misc");
                b2.Name("misc");
                b2._As();
                b2._Optional();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Value");
                b2.NonTerminal("QS");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Attribute");
                b2.Concatenate_(6);
                b2.NonTerminal("TOKEN1");
                b2.As_();
                b2.NonTerminal("IName");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("TOKEN3");
                b2.NonTerminal("TOKEN4");
                b2.As_();
                b2.NonTerminal("Value");
                b2.Name("value");
                b2._As();
                b2.NonTerminal("TOKEN4");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Attributes");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("Attribute");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Name");
                b2.NonTerminal("NCNAME");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("NameSpace");
                b2.NonTerminal("NCNAME");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("QualifiedName");
                b2.Concatenate_(3);
                b2.As_();
                b2.NonTerminal("NameSpace");
                b2.Name("nameSpace");
                b2._As();
                b2.NonTerminal("TOKEN13");
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("name");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("CharData");
                b2.DataTerminal_();
                b2.RegExp("[^<]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("CDataSectData");
                b2.NonTerminal("STRING");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("CDataSect");
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN14");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("CDataSectData");
                b2._Repeat();
                b2.NonTerminal("TOKEN15");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("CommentText");
                b2.NonTerminal("STRING");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Comment");
                b2.As_();
                b2.Concatenate_(3);
                b2.NonTerminal("TOKEN16");
                b2.NonTerminal("CommentText");
                b2.NonTerminal("TOKEN17");
                b2._Concatenate();
                b2.Name("text");
                b2._As();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Instruction");
                b2.NonTerminal("STRING");
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("PI");
                b2.Concatenate_(5);
                b2.NonTerminal("TOKEN18");
                b2.As_();
                b2.NonTerminal("IName");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("TOKEN1");
                b2.As_();
                b2.NonTerminal("Instruction");
                b2.Name("instruction");
                b2._As();
                b2.NonTerminal("TOKEN7");
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Content");
                b2.Repeat_();
                b2.Size(0);
                b2.Unbounded();
                b2.NonTerminal("TOKEN8");
                b2.NonTerminal("IContent");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.URI("http://lang.whole.org/XmlGrammar");
                b2.Namespace("org.whole.lang.xml");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment21() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.commons.builders.ICommonsBuilder b0 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b0.StageUpFragment_();
                org.whole.lang.models.builders.IModelsBuilder b1 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b1.Model_();
                b1.SimpleName("Xml");
                b1.TypeRelations_(0);
                b1._TypeRelations();
                b1.ModelDeclarations_(31);
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Document");
                b1.Types_(0);
                b1._Types();
                b1.Features_(2);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Prolog");
                b1.SimpleName("prolog");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Element");
                b1.SimpleName("element");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Element");
                b1.Types_(1);
                b1.SimpleName("IContent");
                b1._Types();
                b1.Features_(3);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("IName");
                b1.SimpleName("tag");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(1);
                b1.FeatureModifier("optional");
                b1._FeatureModifiers();
                b1.SimpleName("Attributes");
                b1.SimpleName("attributes");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("IContent");
                b1.SimpleName("content");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(1);
                b1.EntityModifier("abstract");
                b1._EntityModifiers();
                b1.SimpleName("IName");
                b1.Types_(0);
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(1);
                b1.EntityModifier("abstract");
                b1._EntityModifiers();
                b1.SimpleName("IContent");
                b1.Types_(0);
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(1);
                b1.EntityModifier("abstract");
                b1._EntityModifiers();
                b1.SimpleName("IMisc");
                b1.Types_(0);
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Version");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Encoding");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Standalone");
                b1.Types_(0);
                b1._Types();
                b1.DataType("boolean");
                b1._DataEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("XMLDecl");
                b1.Types_(0);
                b1._Types();
                b1.Features_(3);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Version");
                b1.SimpleName("version");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(1);
                b1.FeatureModifier("optional");
                b1._FeatureModifiers();
                b1.SimpleName("Encoding");
                b1.SimpleName("encoding");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(1);
                b1.FeatureModifier("optional");
                b1._FeatureModifiers();
                b1.SimpleName("Standalone");
                b1.SimpleName("standalone");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("SystemLiteral");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("SystemId");
                b1.Types_(1);
                b1.SimpleName("IExternalId");
                b1._Types();
                b1.Features_(1);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("SystemLiteral");
                b1.SimpleName("systemLiteral");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("PubidLiteral");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("PublicId");
                b1.Types_(1);
                b1.SimpleName("IExternalId");
                b1._Types();
                b1.Features_(2);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("PubidLiteral");
                b1.SimpleName("pubidLiteral");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("SystemLiteral");
                b1.SimpleName("systemLiteral");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(1);
                b1.EntityModifier("abstract");
                b1._EntityModifiers();
                b1.SimpleName("IExternalId");
                b1.Types_(0);
                b1._Types();
                b1.Features_(0);
                b1._Features();
                b1._SimpleEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("DocTypeDecl");
                b1.Types_(0);
                b1._Types();
                b1.Features_(2);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("IName");
                b1.SimpleName("name");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(1);
                b1.FeatureModifier("optional");
                b1._FeatureModifiers();
                b1.SimpleName("IExternalId");
                b1.SimpleName("externalId");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Misc");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("IMisc");
                b1._CompositeEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Prolog");
                b1.Types_(0);
                b1._Types();
                b1.Features_(3);
                b1.Feature_();
                b1.FeatureModifiers_(1);
                b1.FeatureModifier("optional");
                b1._FeatureModifiers();
                b1.SimpleName("XMLDecl");
                b1.SimpleName("xmlDecl");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(1);
                b1.FeatureModifier("optional");
                b1._FeatureModifiers();
                b1.SimpleName("DocTypeDecl");
                b1.SimpleName("docTypeDecl");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(1);
                b1.FeatureModifier("optional");
                b1._FeatureModifiers();
                b1.SimpleName("Misc");
                b1.SimpleName("misc");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Value");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Attribute");
                b1.Types_(0);
                b1._Types();
                b1.Features_(2);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("IName");
                b1.SimpleName("name");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Value");
                b1.SimpleName("value");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Attributes");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("Attribute");
                b1._CompositeEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Name");
                b1.Types_(1);
                b1.SimpleName("IName");
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("NameSpace");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("QualifiedName");
                b1.Types_(1);
                b1.SimpleName("IName");
                b1._Types();
                b1.Features_(2);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("NameSpace");
                b1.SimpleName("nameSpace");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Name");
                b1.SimpleName("name");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("CharData");
                b1.Types_(1);
                b1.SimpleName("IContent");
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("CDataSectData");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("CDataSect");
                b1.Types_(1);
                b1.SimpleName("IContent");
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("CDataSectData");
                b1._CompositeEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("CommentText");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Comment");
                b1.Types_(2);
                b1.SimpleName("IContent");
                b1.SimpleName("IMisc");
                b1._Types();
                b1.Features_(1);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("CommentText");
                b1.SimpleName("text");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Instruction");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("PI");
                b1.Types_(2);
                b1.SimpleName("IContent");
                b1.SimpleName("IMisc");
                b1._Types();
                b1.Features_(2);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("IName");
                b1.SimpleName("name");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Instruction");
                b1.SimpleName("instruction");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Content");
                b1.Types_(1);
                b1.SimpleName("IContent");
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("IContent");
                b1._CompositeEntity();
                b1._ModelDeclarations();
                b1.Namespace("org.whole.lang.xml");
                b0.Resolver();
                b1.URI("http://lang.whole.org/Xml");
                b1._Model();
                b0._StageUpFragment();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment24() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("MotoGP_TeamsCSVGrammar");
                b2.LanguageDescriptor_();
                b2.URI("http://dataintegration.examples.whole.org/MotoGP");
                b2.Namespace("org.whole.examples.motogpteams");
                b2.Name("MotoGP");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("Teams");
                b1.Resolver();
                b2.Productions_(2);
                b2.Production_();
                b2.NonTerminal("NL");
                b2.LiteralTerminal_();
                b2.RegExp("\\r\\n|[\\n\\r\\u2028\\u2029\\u0085]");
                b1.Resolver();
                b2.Literal("\n");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("SEP");
                b2.LiteralTerminal_();
                b2.RegExp(";");
                b2.Category("DELIMITER");
                b2.Literal(";");
                b2._LiteralTerminal();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.Productions_(5);
                b2.Production_();
                b2.NonTerminal("Teams");
                b2.Repeat_();
                b2.Size(2);
                b2.Unbounded();
                b2.NonTerminal("NL");
                b2.NonTerminal("Team");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Rider");
                b2.Concatenate_(3);
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("SEP");
                b2.As_();
                b2.NonTerminal("Number");
                b2.Name("number");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Name");
                b2.DataTerminal_();
                b2.RegExp("[a-zA-Z0-9 ]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Number");
                b2.DataTerminal_();
                b2.RegExp("[0-9]+");
                b2.Category("LITERAL");
                b2.Format("%d");
                b2._DataTerminal();
                b2.DataType("INT");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Team");
                b2.Concatenate_(7);
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("name");
                b2._As();
                b2.NonTerminal("SEP");
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("manufacturer");
                b2._As();
                b2.NonTerminal("SEP");
                b2.As_();
                b2.NonTerminal("Rider");
                b2.Name("rider1");
                b2._As();
                b2.NonTerminal("SEP");
                b2.As_();
                b2.NonTerminal("Rider");
                b2.Name("rider2");
                b2._As();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.URI("http://examples.whole.org/MotoGPTeamsCSVGrammar");
                b2.Namespace("org.whole.examples.motogpteams");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment25() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.commons.builders.ICommonsBuilder b0 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b0.StageUpFragment_();
                org.whole.lang.models.builders.IModelsBuilder b1 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b1.Model_();
                b1.SimpleName("MotoGP");
                b1.TypeRelations_(0);
                b1._TypeRelations();
                b1.ModelDeclarations_(5);
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Teams");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("Team");
                b1._CompositeEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Rider");
                b1.Types_(0);
                b1._Types();
                b1.Features_(2);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Name");
                b1.SimpleName("name");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Number");
                b1.SimpleName("number");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Name");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Number");
                b1.Types_(0);
                b1._Types();
                b1.DataType("int");
                b1._DataEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Team");
                b1.Types_(0);
                b1._Types();
                b1.Features_(4);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Name");
                b1.SimpleName("name");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Name");
                b1.SimpleName("manufacturer");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Rider");
                b1.SimpleName("rider1");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Rider");
                b1.SimpleName("rider2");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1._ModelDeclarations();
                b1.Namespace("org.whole.examples.motogpteams");
                b0.Resolver();
                b1.URI("http://dataintegration.examples.whole.org/MotoGP");
                b1._Model();
                b0._StageUpFragment();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment26() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.workflows.builders.IWorkflowsBuilder b0 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
                b0.InvokeJavaClassMethod_();
                b0.Text("map grammars to models");
                org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b1.Resolver();
                b1.Resolver();
                b0.StringLiteral("org.whole.lang.grammars.util.GrammarsUtils");
                b0.StringLiteral("deriveModel(org.whole.lang.grammars.model.Grammar, boolean)");
                b0.Expressions_(2);
                b1.StageUpFragment_();
                org.whole.lang.grammars.builders.IGrammarsBuilder b2 = (org.whole.lang.grammars.builders.IGrammarsBuilder) op.wGetBuilder(org.whole.lang.grammars.reflect.GrammarsLanguageKit.URI);
                b2.Grammar_();
                b2.Name("MotoGP_TeamsFLFGrammar");
                b2.LanguageDescriptor_();
                b2.URI("http://dataintegration.examples.whole.org/MotoGP");
                b2.Namespace("org.whole.examples.motogpteams");
                b2.Name("MotoGP");
                b1.Resolver();
                b2._LanguageDescriptor();
                b2.NonTerminal("Teams");
                b1.Resolver();
                b2.Productions_(0);
                b2._Productions();
                b2.Productions_(5);
                b2.Production_();
                b2.NonTerminal("Teams");
                b2.Repeat_();
                b2.Size(2);
                b2.Unbounded();
                b1.Resolver();
                b2.NonTerminal("Team");
                b2._Repeat();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Rider");
                b2.Concatenate_(2);
                b2.Split_();
                b2.BySize(28);
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("name");
                b2._As();
                b2._Split();
                b2.Split_();
                b2.BySize(2);
                b2.As_();
                b2.NonTerminal("Number");
                b2.Name("number");
                b2._As();
                b2._Split();
                b2._Concatenate();
                b1.Resolver();
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Name");
                b2.DataTerminal_();
                b2.RegExp("(([ ]?[a-zA-Z0-9]+)*)[ ]*");
                b2.Category("LITERAL");
                b2.Format("%s");
                b2._DataTerminal();
                b2.DataType("STRING");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Number");
                b2.DataTerminal_();
                b2.RegExp("[0-9]+");
                b2.Category("LITERAL");
                b2.Format("%02d");
                b2._DataTerminal();
                b2.DataType("INT");
                b2._Production();
                b2.Production_();
                b2.NonTerminal("Team");
                b2.Split_();
                b2.BySize(100);
                b2.Concatenate_(4);
                b2.Split_();
                b2.BySize(30);
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("name");
                b2._As();
                b2._Split();
                b2.Split_();
                b2.BySize(10);
                b2.As_();
                b2.NonTerminal("Name");
                b2.Name("manufacturer");
                b2._As();
                b2._Split();
                b2.As_();
                b2.NonTerminal("Rider");
                b2.Name("rider1");
                b2._As();
                b2.As_();
                b2.NonTerminal("Rider");
                b2.Name("rider2");
                b2._As();
                b2._Concatenate();
                b2._Split();
                b1.Resolver();
                b2._Production();
                b2._Productions();
                b2.URI("http://examples.whole.org/MotoGPTeamsFLFGrammar");
                b2.Namespace("org.whole.examples.motogpteams");
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b1.Resolver();
                b2._Grammar();
                b1._StageUpFragment();
                b0.BooleanLiteral(false);
                b0._Expressions();
                b0._InvokeJavaClassMethod();
            }
        };
    }

    public ITemplateFactory<IEntity> newfragment27() {
        return new AbstractTemplateFactory<IEntity>() {

            public void apply(org.whole.lang.builders.IBuilderOperation op) {
                org.whole.lang.commons.builders.ICommonsBuilder b0 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
                b0.StageUpFragment_();
                org.whole.lang.models.builders.IModelsBuilder b1 = (org.whole.lang.models.builders.IModelsBuilder) op.wGetBuilder(org.whole.lang.models.reflect.ModelsLanguageKit.URI);
                b1.Model_();
                b1.SimpleName("MotoGP");
                b1.TypeRelations_(0);
                b1._TypeRelations();
                b1.ModelDeclarations_(5);
                b1.CompositeEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Teams");
                b1.Types_(0);
                b1._Types();
                b1.ComponentModifiers_(1);
                b1.ComponentModifier("ordered");
                b1._ComponentModifiers();
                b1.SimpleName("Team");
                b1._CompositeEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Rider");
                b1.Types_(0);
                b1._Types();
                b1.Features_(2);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Name");
                b1.SimpleName("name");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Number");
                b1.SimpleName("number");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Name");
                b1.Types_(0);
                b1._Types();
                b1.DataType("String");
                b1._DataEntity();
                b1.DataEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Number");
                b1.Types_(0);
                b1._Types();
                b1.DataType("int");
                b1._DataEntity();
                b1.SimpleEntity_();
                b1.EntityModifiers_(0);
                b1._EntityModifiers();
                b1.SimpleName("Team");
                b1.Types_(0);
                b1._Types();
                b1.Features_(4);
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Name");
                b1.SimpleName("name");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Name");
                b1.SimpleName("manufacturer");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Rider");
                b1.SimpleName("rider1");
                b0.Resolver();
                b1._Feature();
                b1.Feature_();
                b1.FeatureModifiers_(0);
                b1._FeatureModifiers();
                b1.SimpleName("Rider");
                b1.SimpleName("rider2");
                b0.Resolver();
                b1._Feature();
                b1._Features();
                b1._SimpleEntity();
                b1._ModelDeclarations();
                b1.Namespace("org.whole.examples.motogpteams");
                b0.Resolver();
                b1.URI("http://dataintegration.examples.whole.org/MotoGP");
                b1._Model();
                b0._StageUpFragment();
            }
        };
    }
}
