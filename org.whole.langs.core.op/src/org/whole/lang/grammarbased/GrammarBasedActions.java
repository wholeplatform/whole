package org.whole.lang.grammarbased;

import org.whole.lang.builders.IBuilderOperation;
import org.whole.lang.templates.AbstractTemplateFactory;

public class GrammarBasedActions extends AbstractTemplateFactory<org.whole.lang.actions.model.LanguageActionFactory> {

    public void apply(IBuilderOperation op) {
        org.whole.lang.actions.builders.IActionsBuilder b0 = (org.whole.lang.actions.builders.IActionsBuilder) op.wGetBuilder(org.whole.lang.actions.reflect.ActionsLanguageKit.URI);
        b0.LanguageActionFactory_();
        b0.URI("whole:org.whole.lang.grammarbased:GrammarBasedActions");
        b0.Namespace("org.whole.lang.grammarbased");
        b0.Name("Grammar Based Actions");
        org.whole.lang.commons.builders.ICommonsBuilder b1 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
        b1.Resolver();
        b0.URI("http://lang.whole.org/GrammarBased");
        b0.ToolbarActions_();
        b1.Resolver();
        b0.SimpleAction_();
        b0.Label("Normalize");
        org.whole.lang.queries.builders.IQueriesBuilder b2 = (org.whole.lang.queries.builders.IQueriesBuilder) op.wGetBuilder(org.whole.lang.queries.reflect.QueriesLanguageKit.URI);
        b2.Block_(18);
        b2.Filter_();
        b2.SelfStep();
        b2.VariableTest("editParts");
        b2._Filter();
        b2.Filter_();
        org.whole.lang.workflows.builders.IWorkflowsBuilder b3 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
        b3.CreateJavaClassInstance_();
        b3.Text("create an HashMap");
        b1.Resolver();
        b1.Resolver();
        b3.StringLiteral("java.util.HashMap");
        b3.StringLiteral("HashMap()");
        b1.Resolver();
        b3._CreateJavaClassInstance();
        b2.VariableTest("editPartsMap");
        b2._Filter();
        b2.QueryDeclaration_();
        b2.Name("getEditPart");
        b2.Names_(4);
        b2.Name("name");
        b2.Name("nameString");
        b2.Name("key");
        b2.Name("keyString");
        b2._Names();
        b2.Block_(3);
        b2.Filter_();
        b2.SelfStep();
        b2.VariableTest("name");
        b2._Filter();
        b2.If_();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("is editPartsMap empty?");
        b1.Resolver();
        b3.Variable("editPartsMap");
        b1.Resolver();
        b3.StringLiteral("java.util.HashMap");
        b3.StringLiteral("isEmpty()");
        b1.Resolver();
        b3._InvokeJavaInstanceMethod();
        b2.For_();
        b2.Path_(2);
        b2.VariableRefStep("editParts");
        b2.Filter_();
        b2.ChildStep();
        b2.And_(2);
        b2.Not_();
        b2.TypeTest("SugarPart");
        b2._Not();
        b2.Some_();
        b2.Filter_();
        b2.FeatureStep("name");
        b2.VariableTest("key");
        b2._Filter();
        b1.Resolver();
        b2._Some();
        b2._And();
        b2._Filter();
        b2._Path();
        b1.SameStageFragment_();
        b3.Sequence_();
        b3.Text("sequence");
        b3.FlowObjects_(2);
        b3.InvokeJavaInstanceMethod_();
        b3.Text("key to string value");
        b3.Variable("keyString");
        b3.Variable("key");
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.model.IEntity");
        b3.StringLiteral("wStringValue()");
        b1.Resolver();
        b3._InvokeJavaInstanceMethod();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("put edit part");
        b1.Resolver();
        b3.Variable("editPartsMap");
        b1.Resolver();
        b3.StringLiteral("java.util.HashMap");
        b3.StringLiteral("put(java.lang.Object, java.lang.Object)");
        b3.Expressions_(2);
        b3.Variable("keyString");
        b3.Variable("self");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b3._FlowObjects();
        b3._Sequence();
        b1._SameStageFragment();
        b2._For();
        b2._If();
        b1.SameStageFragment_();
        b3.Sequence_();
        b3.Text("sequence");
        b3.FlowObjects_(2);
        b3.InvokeJavaInstanceMethod_();
        b3.Text("name to string value");
        b3.Variable("nameString");
        b3.Variable("name");
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.model.IEntity");
        b3.StringLiteral("wStringValue()");
        b1.Resolver();
        b3._InvokeJavaInstanceMethod();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("get edit part");
        b1.Resolver();
        b3.Variable("editPartsMap");
        b1.Resolver();
        b3.StringLiteral("java.util.HashMap");
        b3.StringLiteral("get(java.lang.Object)");
        b3.Expressions_(1);
        b3.Variable("nameString");
        b3._Expressions();
        b3._InvokeJavaInstanceMethod();
        b3._FlowObjects();
        b3._Sequence();
        b1._SameStageFragment();
        b2._Block();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("isNewLineTerminated");
        b2.Names_(0);
        b2._Names();
        b2.Choose_(6);
        b2.Path_(2);
        b2.Filter_();
        b2.SelfStep();
        b2.TypeTest("SequenceFigure");
        b2._Filter();
        b2.Choose_(2);
        b2.Filter_();
        b2.FeatureStep("multiline");
        b2.KindTest("IMPL");
        b2._Filter();
        b2.Path_(3);
        b2.FeatureStep("figures");
        b2.Filter_();
        b2.ChildStep();
        b2.Not_();
        b2.Some_();
        b2.FollowingSiblingStep();
        b1.Resolver();
        b2._Some();
        b2._Not();
        b2._Filter();
        b2.Choose_(2);
        b2.If_();
        b2.TypeTest("NewLine");
        b2.BooleanLiteral(true);
        b2._If();
        b2.Call_();
        b2.Name("isNewLineTerminated");
        b1.Resolver();
        b2._Call();
        b2._Choose();
        b2._Path();
        b2._Choose();
        b2._Path();
        b2.Path_(4);
        b2.Filter_();
        b2.SelfStep();
        b2.TypeTest("NonTerminalFigure");
        b2._Filter();
        b2.FeatureStep("name");
        b2.Call_();
        b2.Name("getEditPart");
        b1.Resolver();
        b2._Call();
        b2.Call_();
        b2.Name("isNewLineTerminated");
        b1.Resolver();
        b2._Call();
        b2._Path();
        b2.Path_(3);
        b2.Filter_();
        b2.SelfStep();
        b2.TypeTest("SimplePart");
        b2._Filter();
        b2.FeatureStep("contents");
        b2.Call_();
        b2.Name("isNewLineTerminated");
        b1.Resolver();
        b2._Call();
        b2._Path();
        b2.Path_(2);
        b2.Filter_();
        b2.SelfStep();
        b2.TypeTest("CompositePart");
        b2._Filter();
        b2.Choose_(2);
        b2.Path_(2);
        b2.Filter_();
        b2.FeatureStep("after");
        b2.KindTest("IMPL");
        b2._Filter();
        b2.Call_();
        b2.Name("isNewLineTerminated");
        b1.Resolver();
        b2._Call();
        b2._Path();
        b2.Filter_();
        b2.FeatureStep("multiline");
        b2.KindTest("IMPL");
        b2._Filter();
        b2._Choose();
        b2._Path();
        b2.Path_(3);
        b2.Filter_();
        b2.SelfStep();
        b2.TypeTest("DataPart");
        b2._Filter();
        b2.FeatureStep("after");
        b2.Call_();
        b2.Name("isNewLineTerminated");
        b1.Resolver();
        b2._Call();
        b2._Path();
        b2.Do_();
        b2.BooleanLiteral(false);
        b2._Do();
        b2._Choose();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("containsNewLines");
        b1.Resolver();
        b2.Block_(2);
        b2.QueryDeclaration_();
        b2.Name("figures");
        b1.Resolver();
        b2.Path_(2);
        b2.ChildStep();
        b2.Filter_();
        b2.Choose_(4);
        b2.If_();
        b2.TypeTest("SequenceFigure");
        b2.Call_();
        b2.Name("figures");
        b1.Resolver();
        b2._Call();
        b2._If();
        b2.If_();
        b2.TypeTest("NonTerminalFigure");
        b2.Path_(3);
        b2.FeatureStep("name");
        b2.Call_();
        b2.Name("getEditPart");
        b1.Resolver();
        b2._Call();
        b2.Call_();
        b2.Name("figures");
        b1.Resolver();
        b2._Call();
        b2._Path();
        b2._If();
        b2.If_();
        b2.SubtypeTest("Figure");
        b2.SelfStep();
        b2._If();
        b2.Call_();
        b2.Name("figures");
        b1.Resolver();
        b2._Call();
        b2._Choose();
        b2.SubtypeTest("Figure");
        b2._Filter();
        b2._Path();
        b2._QueryDeclaration();
        b2.Choose_(2);
        b2.If_();
        b2.Some_();
        b2.Call_();
        b2.Name("figures");
        b1.Resolver();
        b2._Call();
        b2.TypeTest("NewLine");
        b2._Some();
        b2.BooleanLiteral(true);
        b2._If();
        b2.Do_();
        b2.BooleanLiteral(false);
        b2._Do();
        b2._Choose();
        b2._Block();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("groupByNewLineTermination");
        b2.Names_(2);
        b2.Name("figures");
        b2.Name("rowFigure");
        b2._Names();
        b2.Block_(2);
        b2.QueryDeclaration_();
        b2.Name("introduceNewRowSequence");
        b2.Names_(3);
        b2.Name("figures");
        b2.Name("figure");
        b2.Name("replacement");
        b2._Names();
        b2.Block_(5);
        b2.QueryDeclaration_();
        b2.Name("deletNewLineTerminations");
        b1.Resolver();
        b2.Sequence_(3);
        b2.Path_(2);
        b2.FeatureStep("figures");
        b2.Filter_();
        b2.ChildStep();
        b2.And_(3);
        b2.IndexVariableTest("fromIndex");
        b2.Some_();
        b2.FollowingSiblingStep();
        b1.Resolver();
        b2._Some();
        b2.Every_();
        b2.FollowingSiblingStep();
        b2.TypeTest("NewLine");
        b2._Every();
        b2._And();
        b2._Filter();
        b2._Path();
        b2.If_();
        b2.Some_();
        b2.Path_(1);
        b2.VariableRefStep("fromIndex");
        b2._Path();
        b1.Resolver();
        b2._Some();
        b2.Delete_();
        b2.Path_(2);
        b2.FeatureStep("figures");
        b2.Filter_();
        b2.ChildStep();
        b2.And_(2);
        b2.IndexVariableTest("index");
        b2.GreaterThan_();
        b2.VariableRefStep("index");
        b2.VariableRefStep("fromIndex");
        b2._GreaterThan();
        b2._And();
        b2._Filter();
        b2._Path();
        b2._Delete();
        b2._If();
        b2.SelfStep();
        b2._Sequence();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("splitOnNewLines");
        b2.Names_(4);
        b2.Name("figures");
        b2.Name("figure");
        b2.Name("replacement");
        b2.Name("rowFigure");
        b2._Names();
        b2.Block_(3);
        b2.QueryDeclaration_();
        b2.Name("introduceNewEmbeddedRowSequence");
        b2.Names_(2);
        b2.Name("figures");
        b2.Name("figure");
        b2._Names();
        b2.Select_();
        b1.StageUpFragment_();
        org.whole.lang.reflect.EntityDescriptorEnum e4 = org.whole.lang.reflect.ReflectionFactory.getLanguageKit("http://lang.whole.org/GrammarBased").getEntityDescriptorEnum();
        b1.wEntity_(e4.valueOf("SequenceFigure"));
        b1.Resolver();
        b1.Resolver();
        b1.wEntity_(e4.valueOf("Figures"), 1);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/GrammarBased#Figure");
        b1.VarName("figure");
        b1.Quantifier("*");
        b1._Variable();
        b1._wEntity(e4.valueOf("Figures"));
        b1._wEntity(e4.valueOf("SequenceFigure"));
        b1._StageUpFragment();
        b2.Filter_();
        b2.SelfStep();
        b2.Some_();
        b2.Path_(2);
        b2.VariableRefStep("figures");
        b2.ChildStep();
        b2._Path();
        b1.Resolver();
        b2._Some();
        b2._Filter();
        b2.Delete_();
        b2.Path_(2);
        b2.VariableRefStep("figures");
        b2.Filter_();
        b2.ChildStep();
        b2.VariableTest("figure");
        b2._Filter();
        b2._Path();
        b2._Delete();
        b2.TemplateNames();
        b2._Select();
        b2._QueryDeclaration();
        b2.Filter_();
        b2.Union_();
        b2.Expressions_(0);
        b2._Expressions();
        b1.Resolver();
        b2._Union();
        b2.VariableTest("figures");
        b2._Filter();
        b2.PointwiseUpdate_();
        b2.SelfStep();
        b2.Select_();
        b2.Filter_();
        b1.StageUpFragment_();
        b1.wEntity_(e4.valueOf("SequenceFigure"));
        b1.wEntity(e4.valueOf("BoolValue"), true);
        b1.StageDownFragment_();
        b2.FeatureStep("optional");
        b1._StageDownFragment();
        b1.wEntity_(e4.valueOf("Figures"), 1);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/GrammarBased#Figure");
        b1.VarName("rowFigure");
        b1.Quantifier("*");
        b1._Variable();
        b1._wEntity(e4.valueOf("Figures"));
        b1._wEntity(e4.valueOf("SequenceFigure"));
        b1._StageUpFragment();
        b2.VariableTest("replacement");
        b2._Filter();
        b2.SelfStep();
        b2.Filter_();
        b2.Sequence_(2);
        b2.Path_(3);
        b2.FeatureStep("figures");
        b2.ChildStep();
        b2.Block_(2);
        b2.PointwiseInsert_();
        b2.Placement("INTO");
        b2.VariableRefStep("figures");
        b2.Filter_();
        b2.SelfStep();
        b2.Not_();
        b2.TypeTest("NewLine");
        b2._Not();
        b2._Filter();
        b2._PointwiseInsert();
        b2.If_();
        b2.TypeTest("NewLine");
        b2.Call_();
        b2.Name("introduceNewEmbeddedRowSequence");
        b2.Expressions_(1);
        b2.VariableRefStep("figures");
        b2._Expressions();
        b2._Call();
        b2._If();
        b2._Block();
        b2._Path();
        b2.Call_();
        b2.Name("introduceNewEmbeddedRowSequence");
        b2.Expressions_(1);
        b2.VariableRefStep("figures");
        b2._Expressions();
        b2._Call();
        b2._Sequence();
        b2.VariableTest("rowFigure");
        b2._Filter();
        b2.TemplateNames();
        b2._Select();
        b2._PointwiseUpdate();
        b2._Block();
        b2._QueryDeclaration();
        b2.Select_();
        b2.Filter_();
        b1.StageUpFragment_();
        b1.wEntity_(e4.valueOf("SequenceFigure"));
        b1.Resolver();
        b1.Resolver();
        b1.wEntity_(e4.valueOf("Figures"), 1);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/GrammarBased#Figure");
        b1.VarName("figure");
        b1.Quantifier("*");
        b1._Variable();
        b1._wEntity(e4.valueOf("Figures"));
        b1._wEntity(e4.valueOf("SequenceFigure"));
        b1._StageUpFragment();
        b2.VariableTest("replacement");
        b2._Filter();
        b2.Filter_();
        b2.SelfStep();
        b2.Some_();
        b2.Path_(2);
        b2.VariableRefStep("figures");
        b2.ChildStep();
        b2._Path();
        b1.Resolver();
        b2._Some();
        b2._Filter();
        b2.Delete_();
        b2.Path_(2);
        b2.VariableRefStep("figures");
        b2.Filter_();
        b2.ChildStep();
        b2.VariableTest("figure");
        b2._Filter();
        b2._Path();
        b2._Delete();
        b2.TemplateNames();
        b2._Select();
        b2.Path_(4);
        b2.VariableRefStep("replacement");
        b2.FeatureStep("figures");
        b2.ChildStep();
        b2.Sequence_(2);
        b2.Call_();
        b2.Name("deletNewLineTerminations");
        b1.Resolver();
        b2._Call();
        b2.If_();
        b2.Some_();
        b2.Path_(2);
        b2.FeatureStep("figures");
        b2.Filter_();
        b2.ChildStep();
        b2.TypeTest("NewLine");
        b2._Filter();
        b2._Path();
        b1.Resolver();
        b2._Some();
        b2.Call_();
        b2.Name("splitOnNewLines");
        b1.Resolver();
        b2._Call();
        b2._If();
        b2._Sequence();
        b2._Path();
        b2.VariableRefStep("replacement");
        b2._Block();
        b2._QueryDeclaration();
        b2.PointwiseUpdate_();
        b2.SelfStep();
        b2.Select_();
        b1.StageUpFragment_();
        b1.wEntity_(e4.valueOf("SequenceFigure"));
        b1.Variable_();
        b1.VarType("http://lang.whole.org/GrammarBased#BoolValue");
        b1.VarName("multiline");
        b1.Quantifier("?");
        b1._Variable();
        b1.StageDownFragment_();
        b2.FeatureStep("optional");
        b1._StageDownFragment();
        b1.wEntity_(e4.valueOf("Figures"), 1);
        b1.Variable_();
        b1.VarType("http://lang.whole.org/GrammarBased#Figure");
        b1.VarName("rowFigure");
        b1.Quantifier("*");
        b1._Variable();
        b1._wEntity(e4.valueOf("Figures"));
        b1._wEntity(e4.valueOf("SequenceFigure"));
        b1._StageUpFragment();
        b2.SelfStep();
        b2.Sequence_(4);
        b2.Filter_();
        b2.Union_();
        b2.Expressions_(0);
        b2._Expressions();
        b1.Resolver();
        b2._Union();
        b2.VariableTest("figures");
        b2._Filter();
        b2.Filter_();
        b2.BooleanLiteral(false);
        b2.VariableTest("hasManyRows");
        b2._Filter();
        b2.Filter_();
        b2.Sequence_(2);
        b2.Path_(3);
        b2.FeatureStep("figures");
        b2.ChildStep();
        b2.Block_(2);
        b2.PointwiseInsert_();
        b2.Placement("INTO");
        b2.VariableRefStep("figures");
        b2.SelfStep();
        b2._PointwiseInsert();
        b2.If_();
        b2.Call_();
        b2.Name("isNewLineTerminated");
        b1.Resolver();
        b2._Call();
        b2.Block_(2);
        b2.PointwiseUpdate_();
        b2.VariableRefStep("hasManyRows");
        b2.BooleanLiteral(true);
        b2._PointwiseUpdate();
        b2.Call_();
        b2.Name("introduceNewRowSequence");
        b2.Expressions_(1);
        b2.VariableRefStep("figures");
        b2._Expressions();
        b2._Call();
        b2._Block();
        b2._If();
        b2._Block();
        b2._Path();
        b2.Call_();
        b2.Name("introduceNewRowSequence");
        b2.Expressions_(1);
        b2.VariableRefStep("figures");
        b2._Expressions();
        b2._Call();
        b2._Sequence();
        b2.VariableTest("rowFigure");
        b2._Filter();
        b2.If_();
        b2.VariableRefStep("hasManyRows");
        b2.Filter_();
        b2.BooleanLiteral(true);
        b2.VariableTest("multiline");
        b2._Filter();
        b2._If();
        b2._Sequence();
        b2.TemplateNames();
        b2._Select();
        b2._PointwiseUpdate();
        b2._Block();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("optimizeSequenceFigures");
        b2.Names_(2);
        b2.Name("multiline");
        b2.Name("figures");
        b2._Names();
        b2.Sequence_(2);
        b2.Path_(2);
        b2.ChildStep();
        b2.Call_();
        b2.Name("optimizeSequenceFigures");
        b1.Resolver();
        b2._Call();
        b2._Path();
        b2.If_();
        b2.And_(3);
        b2.TypeTest("SequenceFigure");
        b2.Some_();
        b2.Path_(2);
        b2.FeatureStep("figures");
        b2.Filter_();
        b2.ChildStep();
        b2.IndexTest_();
        b2.IntLiteral(0);
        b2._IndexTest();
        b2._Filter();
        b2._Path();
        b1.Resolver();
        b2._Some();
        b2.Not_();
        b2.Some_();
        b2.Path_(2);
        b2.FeatureStep("figures");
        b2.Filter_();
        b2.ChildStep();
        b2.IndexTest_();
        b2.IntLiteral(1);
        b2._IndexTest();
        b2._Filter();
        b2._Path();
        b1.Resolver();
        b2._Some();
        b2._Not();
        b2._And();
        b2.PointwiseUpdate_();
        b2.SelfStep();
        b2.Path_(2);
        b2.FeatureStep("figures");
        b2.Filter_();
        b2.ChildStep();
        b2.IndexTest_();
        b2.IntLiteral(0);
        b2._IndexTest();
        b2._Filter();
        b2._Path();
        b2._PointwiseUpdate();
        b2._If();
        b2._Sequence();
        b2._QueryDeclaration();
        b2.QueryDeclaration_();
        b2.Name("addTableMappings");
        b2.Names_(2);
        b2.Name("componentName");
        b2.Name("size");
        b2._Names();
        b2.For_();
        b2.Filter_();
        b2.ChildStep();
        b2.And_(3);
        b2.TypeTest("CompositePart");
        b2.Some_();
        b2.FeatureStep("multiline");
        b1.Resolver();
        b2._Some();
        b2.Some_();
        b2.Path_(2);
        b2.Filter_();
        b2.DescendantStep();
        b2.TypeTest("NonTerminalFigure");
        b2._Filter();
        b2.Filter_();
        b2.FeatureStep("name");
        b2.VariableTest("componentName");
        b2._Filter();
        b2._Path();
        b1.Resolver();
        b2._Some();
        b2._And();
        b2._Filter();
        b2.Block_(2);
        b2.Filter_();
        b2.IntLiteral(0);
        b2.VariableTest("size");
        b2._Filter();
        b2.If_();
        b2.Some_();
        b2.PointwiseUpdate_();
        b2.Path_(3);
        b2.ParentStep();
        b2.Filter_();
        b2.ChildStep();
        b2.And_(3);
        b2.TypeTest("SimplePart");
        b2.Some_();
        b2.Filter_();
        b2.FeatureStep("name");
        b2.VariableTest("componentName");
        b2._Filter();
        b1.Resolver();
        b2._Some();
        b2.Some_();
        b2.Path_(2);
        b2.Filter_();
        b2.FeatureStep("contents");
        b2.Not_();
        b2.Some_();
        b2.FeatureStep("multiline");
        b1.Resolver();
        b2._Some();
        b2._Not();
        b2._Filter();
        b2.Filter_();
        b2.FeatureStep("figures");
        b2.And_(2);
        b2.Some_();
        b2.Filter_();
        b2.ChildStep();
        b2.TypeTest("Indent");
        b2._Filter();
        b1.Resolver();
        b2._Some();
        b2.NotEquals_();
        b3.InvokeJavaInstanceMethod_();
        b3.Text("wSize");
        b3.Variable("size");
        b3.Variable("self");
        b1.Resolver();
        b3.StringLiteral("org.whole.lang.model.IEntity");
        b3.StringLiteral("wSize()");
        b1.Resolver();
        b3._InvokeJavaInstanceMethod();
        b2.IntLiteral(0);
        b2._NotEquals();
        b2._And();
        b2._Filter();
        b2._Path();
        b1.Resolver();
        b2._Some();
        b2._And();
        b2._Filter();
        b2.FeatureStep("table");
        b2._Path();
        b2.BooleanLiteral(true);
        b2._PointwiseUpdate();
        b1.Resolver();
        b2._Some();
        b2.PointwiseUpdate_();
        b2.FeatureStep("columns");
        b2.VariableRefStep("size");
        b2._PointwiseUpdate();
        b2._If();
        b2._Block();
        b2._For();
        b2._QueryDeclaration();
        b2.For_();
        b2.Filter_();
        b2.ChildStep();
        b2.TypeTest("SugarPart");
        b2._Filter();
        b2.Sequence_(6);
        b2.Filter_();
        b2.FeatureStep("before");
        b2.VariableTest("before");
        b2._Filter();
        b2.Filter_();
        b2.FeatureStep("after");
        b2.VariableTest("after");
        b2._Filter();
        b2.Filter_();
        b2.FeatureStep("name");
        b2.VariableTest("name");
        b2._Filter();
        b2.CartesianInsert_();
        b2.Placement("BEFORE");
        b2.Path_(2);
        b2.VariableRefStep("editParts");
        b2.Filter_();
        b2.DescendantStep();
        b2.And_(2);
        b2.TypeTest("NonTerminalFigure");
        b2.Some_();
        b2.Filter_();
        b2.FeatureStep("name");
        b2.VariableTest("name");
        b2._Filter();
        b1.Resolver();
        b2._Some();
        b2._And();
        b2._Filter();
        b2._Path();
        b2.Path_(3);
        b2.VariableRefStep("before");
        b2.FeatureStep("figures");
        b2.ChildStep();
        b2._Path();
        b2._CartesianInsert();
        b2.CartesianInsert_();
        b2.Placement("INTO");
        b2.Path_(3);
        b2.VariableRefStep("editParts");
        b2.Filter_();
        b2.DescendantStep();
        b2.And_(2);
        b2.TypeTest("NonTerminalFigure");
        b2.Some_();
        b2.Filter_();
        b2.FeatureStep("name");
        b2.VariableTest("name");
        b2._Filter();
        b1.Resolver();
        b2._Some();
        b2._And();
        b2._Filter();
        b2.ParentStep();
        b2._Path();
        b2.Path_(3);
        b2.VariableRefStep("after");
        b2.FeatureStep("figures");
        b2.ChildStep();
        b2._Path();
        b2._CartesianInsert();
        b2.Delete_();
        b2.SelfStep();
        b2._Delete();
        b2._Sequence();
        b2._For();
        b2.For_();
        b2.Filter_();
        b2.ChildStep();
        b2.And_(2);
        b2.TypeTest("TODO_CompositePart");
        b2.Some_();
        b2.Filter_();
        b2.FeatureStep("multiline");
        b2.TypeTest("http://lang.whole.org/Commons#Resolver");
        b2._Filter();
        b1.Resolver();
        b2._Some();
        b2._And();
        b2._Filter();
        b2.If_();
        b2.Or_(2);
        b2.Path_(2);
        b2.FeatureStep("separator");
        b2.Call_();
        b2.Name("containsNewLines");
        b1.Resolver();
        b2._Call();
        b2._Path();
        b2.Path_(2);
        b2.FeatureStep("contents");
        b2.Call_();
        b2.Name("isNewLineTerminated");
        b1.Resolver();
        b2._Call();
        b2._Path();
        b2._Or();
        b2.Sequence_(2);
        b2.PointwiseUpdate_();
        b2.FeatureStep("multiline");
        b2.BooleanLiteral(true);
        b2._PointwiseUpdate();
        b2.Delete_();
        b2.Path_(2);
        b2.FeatureStep("separator");
        b2.Filter_();
        b2.DescendantStep();
        b2.TypeTest("NewLine");
        b2._Filter();
        b2._Path();
        b2._Delete();
        b2._Sequence();
        b2._If();
        b2._For();
        b2.For_();
        b2.Path_(2);
        b2.Filter_();
        b2.ChildStep();
        b2.TypeTest("TODO_CompositePart");
        b2._Filter();
        b2.FeatureStep("contents");
        b2._Path();
        b2.Call_();
        b2.Name("groupByNewLineTermination");
        b1.Resolver();
        b2._Call();
        b2._For();
        b2.For_();
        b2.Path_(2);
        b2.Filter_();
        b2.ChildStep();
        b2.TypeTest("SimplePart");
        b2._Filter();
        b2.Filter_();
        b2.FeatureStep("contents");
        b2.Some_();
        b2.Filter_();
        b2.FeatureStep("multiline");
        b2.TypeTest("http://lang.whole.org/Commons#Resolver");
        b2._Filter();
        b1.Resolver();
        b2._Some();
        b2._Filter();
        b2._Path();
        b2.Call_();
        b2.Name("groupByNewLineTermination");
        b1.Resolver();
        b2._Call();
        b2._For();
        b2.For_();
        b2.Path_(1);
        b2.Filter_();
        b2.ChildStep();
        b2.TypeTest("SimplePart");
        b2._Filter();
        b2._Path();
        b2.Block_(3);
        b2.Filter_();
        b2.IntLiteral(0);
        b2.VariableTest("panes");
        b2._Filter();
        b2.For_();
        b2.Path_(1);
        b2.Filter_();
        b2.DescendantStep();
        b2.TypeTest("NonTerminalFigure");
        b2._Filter();
        b2._Path();
        b2.PointwiseUpdate_();
        b2.VariableRefStep("panes");
        b2.Addition_();
        b2.VariableRefStep("panes");
        b2.IntLiteral(1);
        b2._Addition();
        b2._PointwiseUpdate();
        b2._For();
        b2.PointwiseUpdate_();
        b2.FeatureStep("panes");
        b2.VariableRefStep("panes");
        b2._PointwiseUpdate();
        b2._Block();
        b2._For();
        b2.Delete_();
        b2.Filter_();
        b2.DescendantStep();
        b2.TypeTest("NewLine");
        b2._Filter();
        b2._Delete();
        b2.Delete_();
        b2.Filter_();
        b2.DescendantStep();
        b2.And_(2);
        b2.TypeTest("SequenceFigure");
        b2.Not_();
        b2.Some_();
        b2.Path_(2);
        b2.FeatureStep("figures");
        b2.Filter_();
        b2.ChildStep();
        b2.IndexTest_();
        b2.IntLiteral(0);
        b2._IndexTest();
        b2._Filter();
        b2._Path();
        b1.Resolver();
        b2._Some();
        b2._Not();
        b2._And();
        b2._Filter();
        b2._Delete();
        b2.Call_();
        b2.Name("optimizeSequenceFigures");
        b1.Resolver();
        b2._Call();
        b2.Call_();
        b2.Name("addTableMappings");
        b1.Resolver();
        b2._Call();
        b2.SelfStep();
        b2._Block();
        b0._SimpleAction();
        b1.Resolver();
        b1.Resolver();
        b1.Resolver();
        b0._ToolbarActions();
        b0.ContextMenuActions_();
        b0.MenuActions_(0);
        b0._MenuActions();
        b0.MenuActions_(0);
        b0._MenuActions();
        b0.MenuActions_(0);
        b0._MenuActions();
        b0.MenuActions_(0);
        b0._MenuActions();
        b0.MenuActions_(0);
        b0._MenuActions();
        b1.Resolver();
        b0._ContextMenuActions();
        b0._LanguageActionFactory();
    }
}
