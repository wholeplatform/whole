package org.whole.lang.grammarbased;

import org.whole.lang.builders.IBuilderOperation;
import org.whole.lang.templates.AbstractTemplateFactory;

public class GrammarsToGrammarBasedQuery extends AbstractTemplateFactory<org.whole.lang.queries.model.Scope> {

    public void apply(IBuilderOperation op) {
        org.whole.lang.queries.builders.IQueriesBuilder b0 = (org.whole.lang.queries.builders.IQueriesBuilder) op.wGetBuilder(org.whole.lang.queries.reflect.QueriesLanguageKit.URI);
        b0.Scope_();
        b0.FreshNames_(7);
        b0.Name("newLineNT");
        b0.Name("phraseStructure");
        b0.Name("phraseStructureMap");
        b0.Name("lexicalStructure");
        b0.Name("lexicalStructureMap");
        b0.Name("editPart");
        b0.Name("productionName");
        b0._FreshNames();
        b0.Block_(14);
        b0.Filter_();
        b0.FeatureStep("phraseStructure");
        b0.VariableTest("phraseStructure");
        b0._Filter();
        b0.Filter_();
        org.whole.lang.workflows.builders.IWorkflowsBuilder b1 = (org.whole.lang.workflows.builders.IWorkflowsBuilder) op.wGetBuilder(org.whole.lang.workflows.reflect.WorkflowsLanguageKit.URI);
        b1.CreateJavaClassInstance_();
        b1.Text("create an HashMap");
        org.whole.lang.commons.builders.ICommonsBuilder b2 = (org.whole.lang.commons.builders.ICommonsBuilder) op.wGetBuilder(org.whole.lang.commons.reflect.CommonsLanguageKit.URI);
        b2.Resolver();
        b2.Resolver();
        b1.StringLiteral("java.util.HashMap");
        b1.StringLiteral("HashMap()");
        b2.Resolver();
        b1._CreateJavaClassInstance();
        b0.VariableTest("phraseStructureMap");
        b0._Filter();
        b0.QueryDeclaration_();
        b0.Name("getProductionRule");
        b0.Names_(4);
        b0.Name("nonTerminal");
        b0.Name("nonTerminalString");
        b0.Name("key");
        b0.Name("keyString");
        b0._Names();
        b0.Block_(3);
        b0.Filter_();
        b0.SelfStep();
        b0.VariableTest("nonTerminal");
        b0._Filter();
        b0.If_();
        b1.InvokeJavaInstanceMethod_();
        b1.Text("is phraseStructureMap empty?");
        b2.Resolver();
        b1.Variable("phraseStructureMap");
        b2.Resolver();
        b1.StringLiteral("java.util.HashMap");
        b1.StringLiteral("isEmpty()");
        b2.Resolver();
        b1._InvokeJavaInstanceMethod();
        b0.For_();
        b0.Path_(3);
        b0.VariableRefStep("phraseStructure");
        b0.Filter_();
        b0.ChildStep();
        b0.Some_();
        b0.Filter_();
        b0.FeatureStep("name");
        b0.VariableTest("key");
        b0._Filter();
        b2.Resolver();
        b0._Some();
        b0._Filter();
        b0.FeatureStep("rule");
        b0._Path();
        b2.SameStageFragment_();
        b1.Sequence_();
        b1.Text("sequence");
        b1.FlowObjects_(2);
        b1.InvokeJavaInstanceMethod_();
        b1.Text("key to string value");
        b1.Variable("keyString");
        b1.Variable("key");
        b2.Resolver();
        b1.StringLiteral("org.whole.lang.model.IEntity");
        b1.StringLiteral("wStringValue()");
        b2.Resolver();
        b1._InvokeJavaInstanceMethod();
        b1.InvokeJavaInstanceMethod_();
        b1.Text("put edit part");
        b2.Resolver();
        b1.Variable("phraseStructureMap");
        b2.Resolver();
        b1.StringLiteral("java.util.HashMap");
        b1.StringLiteral("put(java.lang.Object, java.lang.Object)");
        b1.Expressions_(2);
        b1.Variable("keyString");
        b1.Variable("self");
        b1._Expressions();
        b1._InvokeJavaInstanceMethod();
        b1._FlowObjects();
        b1._Sequence();
        b2._SameStageFragment();
        b0._For();
        b0._If();
        b2.SameStageFragment_();
        b1.Sequence_();
        b1.Text("sequence");
        b1.FlowObjects_(2);
        b1.InvokeJavaInstanceMethod_();
        b1.Text("nonTerminal to string value");
        b1.Variable("nonTerminalString");
        b1.Variable("nonTerminal");
        b2.Resolver();
        b1.StringLiteral("org.whole.lang.model.IEntity");
        b1.StringLiteral("wStringValue()");
        b2.Resolver();
        b1._InvokeJavaInstanceMethod();
        b1.InvokeJavaInstanceMethod_();
        b1.Text("get edit part");
        b2.Resolver();
        b1.Variable("phraseStructureMap");
        b2.Resolver();
        b1.StringLiteral("java.util.HashMap");
        b1.StringLiteral("get(java.lang.Object)");
        b1.Expressions_(1);
        b1.Variable("nonTerminalString");
        b1._Expressions();
        b1._InvokeJavaInstanceMethod();
        b1._FlowObjects();
        b1._Sequence();
        b2._SameStageFragment();
        b0._Block();
        b0._QueryDeclaration();
        b0.Filter_();
        b0.FeatureStep("lexicalStructure");
        b0.VariableTest("lexicalStructure");
        b0._Filter();
        b0.Filter_();
        b1.CreateJavaClassInstance_();
        b1.Text("create an HashMap");
        b2.Resolver();
        b2.Resolver();
        b1.StringLiteral("java.util.HashMap");
        b1.StringLiteral("HashMap()");
        b2.Resolver();
        b1._CreateJavaClassInstance();
        b0.VariableTest("lexicalStructureMap");
        b0._Filter();
        b0.QueryDeclaration_();
        b0.Name("getLexicalRule");
        b0.Names_(4);
        b0.Name("nonTerminal");
        b0.Name("nonTerminalString");
        b0.Name("key");
        b0.Name("keyString");
        b0._Names();
        b0.Block_(3);
        b0.Filter_();
        b0.SelfStep();
        b0.VariableTest("nonTerminal");
        b0._Filter();
        b0.If_();
        b1.InvokeJavaInstanceMethod_();
        b1.Text("is lexicalStructureMap empty?");
        b2.Resolver();
        b1.Variable("lexicalStructureMap");
        b2.Resolver();
        b1.StringLiteral("java.util.HashMap");
        b1.StringLiteral("isEmpty()");
        b2.Resolver();
        b1._InvokeJavaInstanceMethod();
        b0.For_();
        b0.Path_(3);
        b0.VariableRefStep("lexicalStructure");
        b0.Filter_();
        b0.ChildStep();
        b0.Some_();
        b0.Filter_();
        b0.FeatureStep("name");
        b0.VariableTest("key");
        b0._Filter();
        b2.Resolver();
        b0._Some();
        b0._Filter();
        b0.FeatureStep("rule");
        b0._Path();
        b2.SameStageFragment_();
        b1.Sequence_();
        b1.Text("sequence");
        b1.FlowObjects_(2);
        b1.InvokeJavaInstanceMethod_();
        b1.Text("key to string value");
        b1.Variable("keyString");
        b1.Variable("key");
        b2.Resolver();
        b1.StringLiteral("org.whole.lang.model.IEntity");
        b1.StringLiteral("wStringValue()");
        b2.Resolver();
        b1._InvokeJavaInstanceMethod();
        b1.InvokeJavaInstanceMethod_();
        b1.Text("put rule");
        b2.Resolver();
        b1.Variable("lexicalStructureMap");
        b2.Resolver();
        b1.StringLiteral("java.util.HashMap");
        b1.StringLiteral("put(java.lang.Object, java.lang.Object)");
        b1.Expressions_(2);
        b1.Variable("keyString");
        b1.Variable("self");
        b1._Expressions();
        b1._InvokeJavaInstanceMethod();
        b1._FlowObjects();
        b1._Sequence();
        b2._SameStageFragment();
        b0._For();
        b0._If();
        b2.SameStageFragment_();
        b1.Sequence_();
        b1.Text("sequence");
        b1.FlowObjects_(2);
        b1.InvokeJavaInstanceMethod_();
        b1.Text("nonTerminal to string value");
        b1.Variable("nonTerminalString");
        b1.Variable("nonTerminal");
        b2.Resolver();
        b1.StringLiteral("org.whole.lang.model.IEntity");
        b1.StringLiteral("wStringValue()");
        b2.Resolver();
        b1._InvokeJavaInstanceMethod();
        b1.InvokeJavaInstanceMethod_();
        b1.Text("get rule");
        b2.Resolver();
        b1.Variable("lexicalStructureMap");
        b2.Resolver();
        b1.StringLiteral("java.util.HashMap");
        b1.StringLiteral("get(java.lang.Object)");
        b1.Expressions_(1);
        b1.Variable("nonTerminalString");
        b1._Expressions();
        b1._InvokeJavaInstanceMethod();
        b1._FlowObjects();
        b1._Sequence();
        b2._SameStageFragment();
        b0._Block();
        b0._QueryDeclaration();
        b0.QueryDeclaration_();
        b0.Name("isNewLineTerminated");
        b0.Names_(2);
        b0.Name("nonTerminals");
        b0.Name("nt");
        b0._Names();
        b0.Block_(3);
        b0.QueryDeclaration_();
        b0.Name("traversed");
        b0.Names_(1);
        b0.Name("nt");
        b0._Names();
        b0.Block_(2);
        b0.Filter_();
        b0.SelfStep();
        b0.VariableTest("nt");
        b0._Filter();
        b0.Path_(2);
        b0.VariableRefStep("nonTerminals");
        b0.Filter_();
        b0.ChildStep();
        b0.VariableTest("nt");
        b0._Filter();
        b0._Path();
        b0._Block();
        b0._QueryDeclaration();
        b0.Filter_();
        b0.Union_();
        b0.Expressions_(0);
        b0._Expressions();
        b2.Resolver();
        b0._Union();
        b0.VariableTest("nonTerminals");
        b0._Filter();
        b0.Choose_(6);
        b0.If_();
        b0.And_(2);
        b0.TypeTest("Repeat");
        b0.Some_();
        b0.Sequence_(2);
        b0.FeatureStep("separator");
        b0.FeatureStep("rule");
        b0._Sequence();
        b0.Call_();
        b0.Name("isNewLineTerminated");
        b0.Expressions_(1);
        b0.VariableRefStep("nonTerminals");
        b0._Expressions();
        b0._Call();
        b0._Some();
        b0._And();
        b0.BooleanLiteral(true);
        b0._If();
        b0.If_();
        b0.And_(2);
        b0.TypeTest("Concatenate");
        b0.Path_(2);
        b0.Filter_();
        b0.ChildStep();
        b0.Not_();
        b0.Some_();
        b0.FollowingSiblingStep();
        b2.Resolver();
        b0._Some();
        b0._Not();
        b0._Filter();
        b0.Call_();
        b0.Name("isNewLineTerminated");
        b0.Expressions_(1);
        b0.VariableRefStep("nonTerminals");
        b0._Expressions();
        b0._Call();
        b0._Path();
        b0._And();
        b0.BooleanLiteral(true);
        b0._If();
        b0.If_();
        b0.And_(2);
        b0.TypeTest("Choose");
        b0.Some_();
        b0.ChildStep();
        b0.Call_();
        b0.Name("isNewLineTerminated");
        b0.Expressions_(1);
        b0.VariableRefStep("nonTerminals");
        b0._Expressions();
        b0._Call();
        b0._Some();
        b0._And();
        b0.BooleanLiteral(true);
        b0._If();
        b0.If_();
        b0.And_(2);
        b0.Or_(2);
        b0.TypeTest("Optional");
        b0.TypeTest("When");
        b0._Or();
        b0.Path_(2);
        b0.FeatureStep("rule");
        b0.Call_();
        b0.Name("isNewLineTerminated");
        b0.Expressions_(1);
        b0.VariableRefStep("nonTerminals");
        b0._Expressions();
        b0._Call();
        b0._Path();
        b0._And();
        b0.BooleanLiteral(true);
        b0._If();
        b0.If_();
        b0.And_(2);
        b0.And_(3);
        b0.TypeTest("NonTerminal");
        b0.Not_();
        b0.Some_();
        b0.Call_();
        b0.Name("traversed");
        b2.Resolver();
        b0._Call();
        b2.Resolver();
        b0._Some();
        b0._Not();
        b0.VariableTest("nt");
        b0._And();
        b0.Some_();
        b0.Choose_(2);
        b0.Filter_();
        b0.Call_();
        b0.Name("getLexicalRule");
        b2.Resolver();
        b0._Call();
        b0.Or_(2);
        b0.TypeTest("NewLine");
        b0.Some_();
        b0.Filter_();
        b0.DescendantOrSelfStep();
        b0.And_(2);
        b0.Not_();
        b0.Some_();
        b0.FollowingStep();
        b2.Resolver();
        b0._Some();
        b0._Not();
        b0.TypeTest("NewLine");
        b0._And();
        b0._Filter();
        b2.Resolver();
        b0._Some();
        b0._Or();
        b0._Filter();
        b0.Filter_();
        b0.Call_();
        b0.Name("getProductionRule");
        b2.Resolver();
        b0._Call();
        b0.Call_();
        b0.Name("isNewLineTerminated");
        b0.Expressions_(1);
        b0.Union_();
        b0.Expressions_(2);
        b0.Path_(2);
        b0.VariableRefStep("nonTerminals");
        b0.ChildStep();
        b0._Path();
        b0.VariableRefStep("nt");
        b0._Expressions();
        b2.Resolver();
        b0._Union();
        b0._Expressions();
        b0._Call();
        b0._Filter();
        b0._Choose();
        b2.Resolver();
        b0._Some();
        b0._And();
        b0.BooleanLiteral(true);
        b0._If();
        b0.Do_();
        b0.BooleanLiteral(false);
        b0._Do();
        b0._Choose();
        b0._Block();
        b0._QueryDeclaration();
        b0.QueryDeclaration_();
        b0.Name("allNonLookaheadNonTerminals");
        b2.Resolver();
        b0.Path_(2);
        b0.Filter_();
        b0.DescendantOrSelfStep();
        b0.Prune_();
        b0.Or_(2);
        b0.TypeTest("NonTerminal");
        b0.TypeTest("When");
        b0._Or();
        b0._Prune();
        b0._Filter();
        b0.Choose_(2);
        b0.Path_(2);
        b0.FeatureStep("rule");
        b0.Filter_();
        b0.DescendantOrSelfStep();
        b0.TypeTest("NonTerminal");
        b0._Filter();
        b0._Path();
        b0.SelfStep();
        b0._Choose();
        b0._Path();
        b0._QueryDeclaration();
        b0.QueryDeclaration_();
        b0.Name("createFigure");
        b0.Names_(3);
        b0.Name("iterator");
        b0.Name("rowFigure");
        b0.Name("nonTerminal");
        b0._Names();
        b0.Block_(1);
        b0.Select_();
        b2.StageUpFragment_();
        org.whole.lang.reflect.EntityDescriptorEnum e3 = org.whole.lang.reflect.ReflectionFactory.getLanguageKit("http://lang.whole.org/GrammarBased").getEntityDescriptorEnum();
        b2.wEntity_(e3.valueOf("SequenceFigure"));
        b2.Resolver();
        b2.Resolver();
        b2.wEntity_(e3.valueOf("Figures"), 1);
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#Figure");
        b2.VarName("rowFigure");
        b2.Quantifier("*");
        b2._Variable();
        b2._wEntity(e3.valueOf("Figures"));
        b2._wEntity(e3.valueOf("SequenceFigure"));
        b2._StageUpFragment();
        b0.SelfStep();
        b0.Path_(2);
        b0.Filter_();
        b0.Call_();
        b0.Name("iterator");
        b2.Resolver();
        b0._Call();
        b0.And_(2);
        b0.TypeTest("NonTerminal");
        b0.VariableTest("nonTerminal");
        b0._And();
        b0._Filter();
        b0.Filter_();
        b0.Choose_(2);
        b0.Path_(2);
        b0.Call_();
        b0.Name("getLexicalRule");
        b2.Resolver();
        b0._Call();
        b0.Choose_(4);
        b0.If_();
        b0.TypeTest("Space");
        b0.VoidLiteral();
        b0._If();
        b0.If_();
        b0.Or_(2);
        b0.TypeTest("LiteralTerminal");
        b0.TypeTest("Empty");
        b0._Or();
        b2.StageUpFragment_();
        b2.wEntity_(e3.valueOf("TerminalFigure"));
        b2.StageDownFragment_();
        b0.Choose_(2);
        b0.FeatureStep("category");
        b0.StringLiteral("LITERAL");
        b0._Choose();
        b2._StageDownFragment();
        b2.StageDownFragment_();
        b0.FeatureStep("literal");
        b2._StageDownFragment();
        b2._wEntity(e3.valueOf("TerminalFigure"));
        b2._StageUpFragment();
        b0._If();
        b0.If_();
        b0.TypeTest("Indent");
        b2.StageUpFragment_();
        b2.wEntity(e3.valueOf("Indent"));
        b2._StageUpFragment();
        b0._If();
        b0.If_();
        b0.TypeTest("NewLine");
        b2.StageUpFragment_();
        b2.wEntity(e3.valueOf("NewLine"));
        b2._StageUpFragment();
        b0._If();
        b0._Choose();
        b0._Path();
        b0.Do_();
        b2.StageUpFragment_();
        b2.wEntity_(e3.valueOf("NonTerminalFigure"));
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#Name");
        b2.VarName("nonTerminal");
        b2.Quantifier("!");
        b2._Variable();
        b2._wEntity(e3.valueOf("NonTerminalFigure"));
        b2._StageUpFragment();
        b0._Do();
        b0._Choose();
        b0.VariableTest("rowFigure");
        b0._Filter();
        b0._Path();
        b0.TemplateNames();
        b0._Select();
        b0._Block();
        b0._QueryDeclaration();
        b0.QueryDeclaration_();
        b0.Name("createBeforeFigure");
        b0.Names_(1);
        b0.Name("subject");
        b0._Names();
        b0.Block_(1);
        b0.Path_(2);
        b0.Filter_();
        b0.SelfStep();
        b0.Not_();
        b0.VariableTest("subject");
        b0._Not();
        b0._Filter();
        b0.Call_();
        b0.Name("createFigure");
        b0.Expressions_(1);
        b2.StageUpFragment_();
        b0.Path_(3);
        b0.Filter_();
        b0.VariableRefStep("subject");
        b0.Not_();
        b0.Some_();
        b0.Filter_();
        b0.ParentStep();
        b0.TypeTest("When");
        b0._Filter();
        b2.Resolver();
        b0._Some();
        b0._Not();
        b0._Filter();
        b0.Reverse_();
        b0.PrecedingSiblingStep();
        b0._Reverse();
        b0.Call_();
        b0.Name("allNonLookaheadNonTerminals");
        b2.Resolver();
        b0._Call();
        b0._Path();
        b2._StageUpFragment();
        b0._Expressions();
        b0._Call();
        b0._Path();
        b0._Block();
        b0._QueryDeclaration();
        b0.QueryDeclaration_();
        b0.Name("createAfterFigure");
        b0.Names_(1);
        b0.Name("subject");
        b0._Names();
        b0.Path_(2);
        b0.Filter_();
        b0.SelfStep();
        b0.Not_();
        b0.VariableTest("subject");
        b0._Not();
        b0._Filter();
        b0.Call_();
        b0.Name("createFigure");
        b0.Expressions_(1);
        b2.StageUpFragment_();
        b0.Path_(3);
        b0.VariableRefStep("subject");
        b0.FollowingSiblingStep();
        b0.Call_();
        b0.Name("allNonLookaheadNonTerminals");
        b2.Resolver();
        b0._Call();
        b0._Path();
        b2._StageUpFragment();
        b0._Expressions();
        b0._Call();
        b0._Path();
        b0._QueryDeclaration();
        b0.QueryDeclaration_();
        b0.Name("createSimplePartContentsFigure");
        b0.Names_(4);
        b0.Name("ancestor");
        b0.Name("literals");
        b0.Name("childFigure");
        b0.Name("rowFigure");
        b0._Names();
        b0.Block_(3);
        b0.QueryDeclaration_();
        b0.Name("children");
        b2.Resolver();
        b0.Choose_(3);
        b0.If_();
        b0.TypeTest("Concatenate");
        b0.Path_(2);
        b0.ChildStep();
        b0.Call_();
        b0.Name("children");
        b2.Resolver();
        b0._Call();
        b0._Path();
        b0._If();
        b0.If_();
        b0.Or_(3);
        b0.TypeTest("Optional");
        b0.TypeTest("Split");
        b0.TypeTest("When");
        b0._Or();
        b0.Path_(2);
        b0.FeatureStep("rule");
        b0.Call_();
        b0.Name("children");
        b2.Resolver();
        b0._Call();
        b0._Path();
        b0._If();
        b0.Do_();
        b0.SelfStep();
        b0._Do();
        b0._Choose();
        b0._QueryDeclaration();
        b0.QueryDeclaration_();
        b0.Name("isOptional");
        b0.Names_(1);
        b0.Name("ancestor");
        b0._Names();
        b0.Path_(2);
        b0.ParentStep();
        b0.Choose_(3);
        b0.If_();
        b0.TypeTest("Optional");
        b0.BooleanLiteral(true);
        b0._If();
        b0.If_();
        b0.VariableTest("ancestor");
        b0.BooleanLiteral(false);
        b0._If();
        b0.Do_();
        b0.Call_();
        b0.Name("isOptional");
        b2.Resolver();
        b0._Call();
        b0._Do();
        b0._Choose();
        b0._Path();
        b0._QueryDeclaration();
        b0.Select_();
        b2.StageUpFragment_();
        b2.wEntity_(e3.valueOf("SequenceFigure"));
        b2.Resolver();
        b2.Resolver();
        b2.wEntity_(e3.valueOf("Figures"), 1);
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#Figure");
        b2.VarName("rowFigure");
        b2.Quantifier("*");
        b2._Variable();
        b2._wEntity(e3.valueOf("Figures"));
        b2._wEntity(e3.valueOf("SequenceFigure"));
        b2._StageUpFragment();
        b0.SelfStep();
        b0.Sequence_(3);
        b0.Filter_();
        b0.Union_();
        b0.Expressions_(0);
        b0._Expressions();
        b2.Resolver();
        b0._Union();
        b0.VariableTest("literals");
        b0._Filter();
        b0.For_();
        b0.Path_(2);
        b0.Filter_();
        b0.SelfStep();
        b0.VariableTest("ancestor");
        b0._Filter();
        b0.Call_();
        b0.Name("children");
        b2.Resolver();
        b0._Call();
        b0._Path();
        b0.Choose_(2);
        b0.If_();
        b0.TypeTest("As");
        b0.Filter_();
        b0.Sequence_(2);
        b0.If_();
        b0.Some_();
        b0.Path_(2);
        b0.VariableRefStep("literals");
        b0.ChildStep();
        b0._Path();
        b2.Resolver();
        b0._Some();
        b0.Call_();
        b0.Name("createFigure");
        b0.Expressions_(1);
        b2.StageUpFragment_();
        b0.Delete_();
        b0.Path_(2);
        b0.VariableRefStep("literals");
        b0.ChildStep();
        b0._Path();
        b0._Delete();
        b2._StageUpFragment();
        b0._Expressions();
        b0._Call();
        b0._If();
        b0.Do_();
        b0.Block_(3);
        b0.Filter_();
        b0.Call_();
        b0.Name("createFigure");
        b0.Expressions_(1);
        b2.StageUpFragment_();
        b0.Filter_();
        b0.DescendantOrSelfStep();
        b0.TypeTest("NonTerminal");
        b0._Filter();
        b2._StageUpFragment();
        b0._Expressions();
        b0._Call();
        b0.VariableTest("childFigure");
        b0._Filter();
        b0.If_();
        b0.Call_();
        b0.Name("isOptional");
        b0.Expressions_(1);
        b0.VariableRefStep("ancestor");
        b0._Expressions();
        b0._Call();
        b0.PointwiseUpdate_();
        b0.Path_(2);
        b0.VariableRefStep("childFigure");
        b0.FeatureStep("optional");
        b0._Path();
        b0.BooleanLiteral(true);
        b0._PointwiseUpdate();
        b0._If();
        b0.VariableRefStep("childFigure");
        b0._Block();
        b0._Do();
        b0._Sequence();
        b0.VariableTest("rowFigure");
        b0._Filter();
        b0._If();
        b0.Do_();
        b0.PointwiseInsert_();
        b0.Placement("INTO");
        b0.VariableRefStep("literals");
        b0.SelfStep();
        b0._PointwiseInsert();
        b0._Do();
        b0._Choose();
        b0._For();
        b0.Filter_();
        b0.Call_();
        b0.Name("createFigure");
        b0.Expressions_(1);
        b2.StageUpFragment_();
        b0.Path_(2);
        b0.VariableRefStep("literals");
        b0.ChildStep();
        b0._Path();
        b2._StageUpFragment();
        b0._Expressions();
        b0._Call();
        b0.VariableTest("rowFigure");
        b0._Filter();
        b0._Sequence();
        b0.TemplateNames();
        b0._Select();
        b0._Block();
        b0._QueryDeclaration();
        b0.QueryDeclaration_();
        b0.Name("mapProduction");
        b0.Names_(10);
        b0.Name("productionName");
        b0.Name("repeat");
        b0.Name("multiline");
        b0.Name("separator");
        b0.Name("before");
        b0.Name("after");
        b0.Name("dataTerminal");
        b0.Name("category");
        b0.Name("choose");
        b0.Name("name");
        b0._Names();
        b0.Choose_(5);
        b0.Select_();
        b2.StageUpFragment_();
        b2.wEntity_(e3.valueOf("CompositePart"));
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#Name");
        b2.VarName("productionName");
        b2.Quantifier("!");
        b2._Variable();
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#BoolValue");
        b2.VarName("multiline");
        b2.Quantifier("!");
        b2._Variable();
        b2.Resolver();
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#Figure");
        b2.VarName("separator");
        b2.Quantifier("?");
        b2._Variable();
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#Figure");
        b2.VarName("contents");
        b2.Quantifier("!");
        b2._Variable();
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#Figure");
        b2.VarName("before");
        b2.Quantifier("?");
        b2._Variable();
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#Figure");
        b2.VarName("after");
        b2.Quantifier("?");
        b2._Variable();
        b2._wEntity(e3.valueOf("CompositePart"));
        b2._StageUpFragment();
        b0.Filter_();
        b0.SelfStep();
        b0.One_();
        b0.DescendantOrSelfStep();
        b0.And_(2);
        b0.TypeTest("Repeat");
        b0.VariableTest("repeat");
        b0._And();
        b0._One();
        b0._Filter();
        b0.Sequence_(5);
        b0.Path_(2);
        b0.VariableRefStep("repeat");
        b0.Filter_();
        b0.Call_();
        b0.Name("isNewLineTerminated");
        b2.Resolver();
        b0._Call();
        b0.VariableTest("multiline");
        b0._Filter();
        b0._Path();
        b0.Filter_();
        b0.Call_();
        b0.Name("createFigure");
        b0.Expressions_(1);
        b2.StageUpFragment_();
        b0.Path_(3);
        b0.VariableRefStep("repeat");
        b0.FeatureStep("separator");
        b0.DescendantOrSelfStep();
        b0._Path();
        b2._StageUpFragment();
        b0._Expressions();
        b0._Call();
        b0.VariableTest("separator");
        b0._Filter();
        b0.Filter_();
        b0.Call_();
        b0.Name("createFigure");
        b0.Expressions_(1);
        b2.StageUpFragment_();
        b0.Path_(3);
        b0.VariableRefStep("repeat");
        b0.FeatureStep("rule");
        b0.DescendantOrSelfStep();
        b0._Path();
        b2._StageUpFragment();
        b0._Expressions();
        b0._Call();
        b0.VariableTest("contents");
        b0._Filter();
        b0.Filter_();
        b0.Call_();
        b0.Name("createBeforeFigure");
        b0.Expressions_(1);
        b0.VariableRefStep("repeat");
        b0._Expressions();
        b0._Call();
        b0.VariableTest("before");
        b0._Filter();
        b0.Filter_();
        b0.Call_();
        b0.Name("createAfterFigure");
        b0.Expressions_(1);
        b0.VariableRefStep("repeat");
        b0._Expressions();
        b0._Call();
        b0.VariableTest("after");
        b0._Filter();
        b0._Sequence();
        b0.TemplateNames();
        b0._Select();
        b0.Select_();
        b2.StageUpFragment_();
        b2.wEntity_(e3.valueOf("DataPart"));
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#Name");
        b2.VarName("productionName");
        b2.Quantifier("!");
        b2._Variable();
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#Category");
        b2.VarName("category");
        b2.Quantifier("!");
        b2._Variable();
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#Figure");
        b2.VarName("before");
        b2.Quantifier("?");
        b2._Variable();
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#Figure");
        b2.VarName("after");
        b2.Quantifier("?");
        b2._Variable();
        b2._wEntity(e3.valueOf("DataPart"));
        b2._StageUpFragment();
        b0.Filter_();
        b0.SelfStep();
        b0.One_();
        b0.Path_(2);
        b0.Choose_(2);
        b0.If_();
        b0.TypeTest("NonTerminal");
        b0.Call_();
        b0.Name("getLexicalRule");
        b2.Resolver();
        b0._Call();
        b0._If();
        b0.SelfStep();
        b0._Choose();
        b0.DescendantOrSelfStep();
        b0._Path();
        b0.And_(3);
        b0.TypeTest("DataTerminal");
        b0.VariableTest("dataTerminal");
        b0.Some_();
        b0.Filter_();
        b0.FeatureStep("category");
        b0.VariableTest("category");
        b0._Filter();
        b2.Resolver();
        b0._Some();
        b0._And();
        b0._One();
        b0._Filter();
        b0.Sequence_(2);
        b0.Filter_();
        b0.Call_();
        b0.Name("createBeforeFigure");
        b0.Expressions_(1);
        b0.VariableRefStep("dataTerminal");
        b0._Expressions();
        b0._Call();
        b0.VariableTest("before");
        b0._Filter();
        b0.Filter_();
        b0.Call_();
        b0.Name("createAfterFigure");
        b0.Expressions_(1);
        b0.VariableRefStep("dataTerminal");
        b0._Expressions();
        b0._Call();
        b0.VariableTest("after");
        b0._Filter();
        b0._Sequence();
        b0.TemplateNames();
        b0._Select();
        b0.Select_();
        b2.StageUpFragment_();
        b2.wEntity_(e3.valueOf("EnumPart"));
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#Name");
        b2.VarName("productionName");
        b2.Quantifier("!");
        b2._Variable();
        b2.wEntity(e3.valueOf("Category"), "LITERAL");
        b2._wEntity(e3.valueOf("EnumPart"));
        b2._StageUpFragment();
        b0.Filter_();
        b0.SelfStep();
        b0.One_();
        b0.DescendantOrSelfStep();
        b0.And_(2);
        b0.TypeTest("Choose");
        b0.Some_();
        b0.Filter_();
        b0.ChildStep();
        b0.TypeTest("As");
        b0._Filter();
        b2.Resolver();
        b0._Some();
        b0._And();
        b0._One();
        b0._Filter();
        b2.Resolver();
        b0.TemplateNames();
        b0._Select();
        b0.Select_();
        b2.StageUpFragment_();
        b2.wEntity_(e3.valueOf("SugarPart"));
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#Name");
        b2.VarName("productionName");
        b2.Quantifier("!");
        b2._Variable();
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#Figure");
        b2.VarName("before");
        b2.Quantifier("?");
        b2._Variable();
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#Figure");
        b2.VarName("after");
        b2.Quantifier("?");
        b2._Variable();
        b2._wEntity(e3.valueOf("SugarPart"));
        b2._StageUpFragment();
        b0.Filter_();
        b0.SelfStep();
        b0.One_();
        b0.DescendantOrSelfStep();
        b0.And_(3);
        b0.TypeTest("Choose");
        b0.VariableTest("choose");
        b0.Some_();
        b0.Filter_();
        b0.ParentStep();
        b0.And_(2);
        b0.TypeTest("Concatenate");
        b0.Some_();
        b0.Filter_();
        b0.ChildStep();
        b0.IndexTest_();
        b0.IntLiteral(1);
        b0._IndexTest();
        b0._Filter();
        b2.Resolver();
        b0._Some();
        b0._And();
        b0._Filter();
        b2.Resolver();
        b0._Some();
        b0._And();
        b0._One();
        b0._Filter();
        b0.Sequence_(2);
        b0.Filter_();
        b0.Call_();
        b0.Name("createBeforeFigure");
        b0.Expressions_(1);
        b0.VariableRefStep("choose");
        b0._Expressions();
        b0._Call();
        b0.VariableTest("before");
        b0._Filter();
        b0.Filter_();
        b0.Call_();
        b0.Name("createAfterFigure");
        b0.Expressions_(1);
        b0.VariableRefStep("choose");
        b0._Expressions();
        b0._Call();
        b0.VariableTest("after");
        b0._Filter();
        b0._Sequence();
        b0.TemplateNames();
        b0._Select();
        b0.Select_();
        b2.StageUpFragment_();
        b2.wEntity_(e3.valueOf("SimplePart"));
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#Name");
        b2.VarName("productionName");
        b2.Quantifier("!");
        b2._Variable();
        b2.Resolver();
        b2.Resolver();
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#Figure");
        b2.VarName("contents");
        b2.Quantifier("!");
        b2._Variable();
        b2._wEntity(e3.valueOf("SimplePart"));
        b2._StageUpFragment();
        b0.Filter_();
        b0.SelfStep();
        b0.And_(1);
        b0.Every_();
        b0.DescendantOrSelfStep();
        b0.Not_();
        b0.TypeTest("Choose");
        b0._Not();
        b0._Every();
        b0._And();
        b0._Filter();
        b0.Path_(1);
        b0.Filter_();
        b0.Call_();
        b0.Name("createSimplePartContentsFigure");
        b2.Resolver();
        b0._Call();
        b0.VariableTest("contents");
        b0._Filter();
        b0._Path();
        b0.TemplateNames();
        b0._Select();
        b0._Choose();
        b0._QueryDeclaration();
        b0.Select_();
        b2.StageUpFragment_();
        b2.wEntity_(e3.valueOf("EditParts"), 1);
        b2.Variable_();
        b2.VarType("http://lang.whole.org/GrammarBased#EditPart");
        b2.VarName("editPart");
        b2.Quantifier("+");
        b2._Variable();
        b2._wEntity(e3.valueOf("EditParts"));
        b2._StageUpFragment();
        b0.SelfStep();
        b0.Path_(4);
        b0.FeatureStep("phraseStructure");
        b0.Filter_();
        b0.ChildStep();
        b0.Some_();
        b0.Filter_();
        b0.FeatureStep("name");
        b0.VariableTest("productionName");
        b0._Filter();
        b2.Resolver();
        b0._Some();
        b0._Filter();
        b0.FeatureStep("rule");
        b0.Filter_();
        b0.Call_();
        b0.Name("mapProduction");
        b0.Expressions_(1);
        b0.VariableRefStep("productionName");
        b0._Expressions();
        b0._Call();
        b0.VariableTest("editPart");
        b0._Filter();
        b0._Path();
        b0.TemplateNames();
        b0._Select();
        b0._Block();
        b0._Scope();
    }
}
